import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"ASP.NET Architectural Patterns","description":"A domain-centric approach to organizing dependencies","frontmatter":{"title":"ASP.NET Architectural Patterns","description":"A domain-centric approach to organizing dependencies"},"headers":[],"relativePath":"Languages/C-Sharp/ASP_NET/ASP_NET_Architectural_Patterns.md","filePath":"Languages/C-Sharp/ASP_NET/ASP_NET_Architectural_Patterns.md","lastUpdated":1756574703000}`);var a={name:`Languages/C-Sharp/ASP_NET/ASP_NET_Architectural_Patterns.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="asp-net-architecture" tabindex="-1">ASP.NET Architecture <a class="header-anchor" href="#asp-net-architecture" aria-label="Permalink to “ASP.NET Architecture”">​</a></h1><p>Clean Architecture also known as:</p><ul><li>Onion Architecture</li><li>Hexagonal Architecture</li><li>Ports and Adapters</li></ul><p>A domain-centric approach to organizing dependencies</p><h2 id="two-common-approaches" tabindex="-1">Two Common Approaches <a class="header-anchor" href="#two-common-approaches" aria-label="Permalink to “Two Common Approaches”">​</a></h2><ol><li><p>N-Tier / N-Layer: UI --&gt; Business --&gt; Data Access --&gt; DB</p></li><li><p>Clean Architecture:</p><ul><li>UI --&gt; Domain (Business)</li><li>Infrastructure (including Data Access) --&gt; Domain (Business)</li><li>Infrastructure (including Data Access) --&gt; DB</li></ul></li></ol><h2 id="clean-architecture-rules" tabindex="-1">Clean Architecture Rules <a class="header-anchor" href="#clean-architecture-rules" aria-label="Permalink to “Clean Architecture Rules”">​</a></h2><ol><li><p>Model all business rules and entities in the Core project</p></li><li><p>All dependencies flow towards the core project</p></li><li><p>Inner projects, define interfaces. Outer projects implement them</p></li></ol><h2 id="core-project" tabindex="-1">Core Project <a class="header-anchor" href="#core-project" aria-label="Permalink to “Core Project”">​</a></h2><p>Should consist of:</p><ul><li><p>Interfaces</p></li><li><p>Entities: Things that have identities and are stored in DB</p></li><li><p>Aggregates: Domain driven design pattern to group together entities. Grouping related entities</p></li><li><p>Value Objects: Things that don&#39;t have identities (<code>DateTime</code>). Validation present in the construct, no validation required anywhere else.</p></li><li><p>Domain Services: Where logic lives and interactions between entities are defined</p></li><li><p>Domain Exceptions: Not depend on low level exception like <code>NullReference</code> exception. But create domain exceptions such as <code>UserNotFound</code> exception</p></li><li><p>Domain Events</p></li><li><p>Event Handlers</p></li><li><p>Specification: Take query logic (LINQ) out of repository and put it into domain model</p></li><li><p>Validations: Fluent validations</p></li><li><p>Enums or Smart Enums</p></li><li><p>Custom Guards: Simple validators to make sure the system is in a consistent state.</p></li></ul><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to “References”">​</a></h2><ul><li><a href="https://www.youtube.com/watch?v=lkmvnjypENw" target="_blank" rel="noreferrer">Clean Architecture with ASP.NET Core 6</a></li></ul>`,13)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
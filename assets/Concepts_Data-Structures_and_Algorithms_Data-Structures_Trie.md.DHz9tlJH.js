import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"Trie","description":"Trie","frontmatter":{"title":"Trie","description":"Trie"},"headers":[],"relativePath":"Concepts/Data-Structures_and_Algorithms/Data-Structures/Trie.md","filePath":"Concepts/Data-Structures_and_Algorithms/Data-Structures/Trie.md","lastUpdated":1662907892000}`);var a={name:`Concepts/Data-Structures_and_Algorithms/Data-Structures/Trie.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="trie" tabindex="-1">Trie <a class="header-anchor" href="#trie" aria-label="Permalink to “Trie”">​</a></h1><p>A trie, also called <em>digital tree</em> and sometimes <em>radix tree</em> or <em>prefix tree</em> (as they can be searched by prefixes), is a kind of <em>search tree</em></p><ul><li><p>An ordered tree data structure that is used to store a dynamic set or associative array where the keys are usually strings</p></li><li><p>Unlike a <a href="./Trees.html#binary-search-tree-bst">binary search tree</a>, no node in the tree stores the key associated with that node; instead, its position in the tree defines the key with which it is associated</p></li><li><p>All the descendants of a node have a common prefix of the string associated with that node, and the root is associated with the empty string.</p></li><li><p>Values are not necessarily associated with every node.</p></li><li><p>Rather, values tend only to be associated with leaves, and with some inner nodes that correspond to keys of interest.</p></li><li><p>Don&#39;t look up each prefix from the root, build on the past calls</p></li></ul><h2 id="applications" tabindex="-1">Applications <a class="header-anchor" href="#applications" aria-label="Permalink to “Applications”">​</a></h2><ul><li>Spell check</li><li>Word validation problems</li><li>Scrabble</li></ul>`,5)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
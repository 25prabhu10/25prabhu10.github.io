import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"ECS","description":"ECS","frontmatter":{"title":"ECS","description":"ECS","prev":"./AWS"},"headers":[],"relativePath":"Concepts/AWS/AWS_ECS.md","filePath":"Concepts/AWS/AWS_ECS.md","lastUpdated":1756574703000}`);var a={name:`Concepts/AWS/AWS_ECS.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="ecs" tabindex="-1">ECS <a class="header-anchor" href="#ecs" aria-label="Permalink to “ECS”">​</a></h1><p>ECS (Elastic Container Service)</p><h2 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-label="Permalink to “Docker”">​</a></h2><ul><li>Docker is a software development platform to deploy apps</li><li>Apps are packaged in containers that can be run on any OS</li><li>Apps run the same, regardless of where they&#39;re run</li><li>Any machine</li><li>No compatibility issues</li><li>Predictable behaviour</li><li>Less work</li><li>Easier to maintain and deploy</li><li>Works with any language, any OS, any technology</li></ul><h3 id="where-docker-images-are-stored" tabindex="-1">Where Docker images are stored? <a class="header-anchor" href="#where-docker-images-are-stored" aria-label="Permalink to “Where Docker images are stored?”">​</a></h3><ul><li>Docker images are stored in Docker Repositories</li><li>Public: <a href="https://hub.docker.com/" target="_blank" rel="noreferrer">Docker Hub</a></li><li>Find base images for many technologies or OS: <ul><li>Ubuntu</li><li>MySQL</li><li>NodeJS, Java...</li></ul></li><li>Private: Amazon ECR (Elastic Container Registry)</li></ul><h3 id="docker-versus-virtual-machines" tabindex="-1">Docker versus Virtual Machines <a class="header-anchor" href="#docker-versus-virtual-machines" aria-label="Permalink to “Docker versus Virtual Machines”">​</a></h3><ul><li>Docker is &quot;sort of &quot; a virtualization technology, but not exactly</li><li>Resources are shared with the host =&gt; many containers on one server</li></ul><h3 id="getting-started-with-docker" tabindex="-1">Getting Started with Docker <a class="header-anchor" href="#getting-started-with-docker" aria-label="Permalink to “Getting Started with Docker”">​</a></h3><ul><li>Download <a href="https://www.docker.com/get-started" target="_blank" rel="noreferrer">Docker</a></li></ul><h3 id="docker-containers-management" tabindex="-1">Docker Containers Management <a class="header-anchor" href="#docker-containers-management" aria-label="Permalink to “Docker Containers Management”">​</a></h3><ul><li>To manage containers, we need a container management platform</li><li>Three choices:</li><li>ECS: Amazon&#39;s own platform</li><li>Fargate: Amazon&#39;s own Serverless platform</li><li>EKS: Amazon&#39;s managed Kubernetes (open source)</li></ul><h2 id="ecs-clusters" tabindex="-1">ECS Clusters <a class="header-anchor" href="#ecs-clusters" aria-label="Permalink to “ECS Clusters”">​</a></h2><ul><li>ECS Clusters are logical grouping of EC2 instances</li><li>Multiple EC2 instances which will house the docker containers</li><li>EC2 instances run the ECS agent (Docker container)</li><li>The ECS agents registers the instance to the ECS cluster</li><li>The EC2 instances run a special AMI, made specifically for ECS</li></ul><h3 id="create-cluster" tabindex="-1">Create Cluster <a class="header-anchor" href="#create-cluster" aria-label="Permalink to “Create Cluster”">​</a></h3><p>Steps:</p><ol><li>Goto ECS --&gt; Clusters --&gt; Create Cluster</li><li>Select EC2 Linux + Newtworking (old way)</li><li>Configure cluster: <ul><li>Cluster name:</li><li>Provisioning Model: (On-Demand Instance) (Spot)</li><li>EC2 instance type: <code>t2.micro</code></li><li>Number of instances: 1</li><li>EC2 AMI ID: Amazon Linux 2 AMI</li><li>Root EBS Volume Size (GiB): 30</li><li>Key pair:</li><li>Networking: <ul><li>VPC:</li><li>Subnets: (add more for more availability)</li><li>Auto assign public IP:</li><li>Security group:</li><li>Security group inbound rules: 0.0.0.0/0:22 (for SSH)</li></ul></li><li>Container instance IAM role</li></ul></li></ol><h2 id="ecs-task-definitions" tabindex="-1">ECS Task Definitions <a class="header-anchor" href="#ecs-task-definitions" aria-label="Permalink to “ECS Task Definitions”">​</a></h2><ul><li>Tasks definitions are metadata in JSON form to tell ECS how to run a Docker Container</li><li>It contains crucial information around: <ul><li>Image Name</li><li>Port Binding for Container and Host</li><li>Memory and CPU required</li><li>Environment variables</li><li>Networking information</li><li>IAM Role</li><li>Logging configuration (ex CloudWatch)</li></ul></li></ul><h3 id="create-task-definition" tabindex="-1">Create Task Definition <a class="header-anchor" href="#create-task-definition" aria-label="Permalink to “Create Task Definition”">​</a></h3><p>Steps:</p><ol><li>Goto ECS --&gt; Task Definitions</li><li>Create new Task Definition: <ul><li>Select launch type compatibility: (FARGATE) (EC2)</li><li>Task Definition Name:</li><li>Task Role: (optional IAM role that tasks can use to make API requests to authorized AWS services...)</li><li>Network Mode: default (Bridge (default on Linux)) (Host) (awsvpc) (None) (NAT is default on Windows)</li><li>Task size: <ul><li>Task memory (MiB):</li><li>Task CPU (unit):</li></ul></li><li>Container Definitions: <ul><li>Add container</li><li>Container name:</li><li>Hard Limits (MiB)*: Hard Limit - 200</li><li>Port mappings: 8080 (Host port): 80 (Container port) - (If Host is left empty, ports are auto assigned)</li><li>...more options</li></ul></li><li>...more options</li></ul></li></ol><h2 id="ecs-service" tabindex="-1">ECS Service <a class="header-anchor" href="#ecs-service" aria-label="Permalink to “ECS Service”">​</a></h2><ul><li>ECS Services help define how many tasks should run and how they should be run</li><li>They ensure that the number of tasks desired is running across our fleet of EC2 instances.</li><li>They can be linked to ELB / NLB / ALB if needed</li></ul><h3 id="create-a-service" tabindex="-1">Create a Service <a class="header-anchor" href="#create-a-service" aria-label="Permalink to “Create a Service”">​</a></h3><p>Steps:</p><ol><li><p>Goto Clusters and select a cluster --&gt; Services</p></li><li><p>Configure service:</p><ul><li>Launch type: (FARGATE) (EC2)</li><li>Task Definition: Select a task</li><li>Cluster: Select a cluster</li><li>Service name:</li><li>Service type: (REPLICA) (DAEMON: Automatic number of tasks)</li><li>Number of tasks: 1</li><li>Minimum healthy percent: 0 (default 100)</li><li>Maximum percent: 200</li><li>Deployments: <ul><li>Rolling update</li><li>Blue/green deployment governed by AWS CodeDeploy</li></ul></li><li>Task Placement: (Custom) (AZ Balanced Spread) (AZ Balanced BinPack) (BinPack) (One Task Per Host)</li><li>Configure network:</li><li>Load balancing: <ul><li>None</li><li>Application Load Balancer</li><li>Network Load Balancer</li><li>Classic Load Balancer</li></ul></li><li>...more options</li></ul></li><li><p>Now a task will be started by the service</p></li></ol><div class="warning custom-block"><p class="custom-block-title">NOTE</p><p>A service cannot be updated to add a Load balancer. To add a Load balancer you need to set it during the creation of the service.</p></div><h2 id="ecr-repository" tabindex="-1">ECR Repository <a class="header-anchor" href="#ecr-repository" aria-label="Permalink to “ECR Repository”">​</a></h2><ul><li><p>So far we&#39;ve been using Docker images from Docker Hub (public)</p></li><li><p>ECR is a private Docker image repository</p></li><li><p>Access is controlled through IAM (permission errors =&gt; policy)</p></li><li><p>AWS CLI v1 login command (may be asked at the exam)</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">aws</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> ecr</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> get-login</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --no-include-email</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --region</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> eu-west-1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span></code></pre></div></li><li><p>AWS CLI v2 login command (newer, may also be asked at the exam - pipe)</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">aws</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> ecr</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> get-login-password</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --region</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> eu-west-1</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> login</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --username</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> AWS</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> password-stdin</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> 1234567890.dkr.ecr.eu-west-1.amazonaws.com</span></span></code></pre></div></li><li><p>Docker Push &amp; Pull:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> 1234567890.dkr.ecr.eu-west-1.amazonaws.com/demo:latest</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> 1234567890.dkr.ecr.eu-west-1.amazonaws.com/demo:latest</span></span></code></pre></div></li></ul><h3 id="create-repository" tabindex="-1">Create Repository <a class="header-anchor" href="#create-repository" aria-label="Permalink to “Create Repository”">​</a></h3><p>Steps:</p><ol><li><p>Repository access and tags:</p><ul><li>Repository name:</li><li>Tag immutability: (cannot push new images with the same tag)</li></ul></li><li><p>Image scan settings: (scan images for security)</p></li></ol><h2 id="fargate" tabindex="-1">Fargate <a class="header-anchor" href="#fargate" aria-label="Permalink to “Fargate”">​</a></h2><ul><li>When launching an ECS Cluster, we have to create our EC2 instances</li><li>If we need to scale, we need to add EC2 instances</li><li>So we manage infrastructure...</li><li>With Fargate, it&#39;s all Serverless!</li><li>We don&#39;t provision EC2 instances</li><li>We just create task definitions, and AWS will run our containers for us</li><li>To scale, just increase the task number. Simple! No more EC2 J</li></ul><h2 id="ecs-iam-roles-deep-dive" tabindex="-1">ECS IAM Roles Deep Dive <a class="header-anchor" href="#ecs-iam-roles-deep-dive" aria-label="Permalink to “ECS IAM Roles Deep Dive”">​</a></h2><ul><li>EC2 Instance Profile: <ul><li>Used by the ECS agent</li><li>Makes API calls to ECS service</li><li>Send container logs to CloudWatch Logs</li><li>Pull Docker image from ECR</li></ul></li><li>ECS Task Role: <ul><li>Allow each task to have a specific role</li><li>Use different roles for the different ECS Services you run</li><li>Task Role is defined in the task definition</li></ul></li></ul><h2 id="ecs-tasks-placement" tabindex="-1">ECS Tasks Placement <a class="header-anchor" href="#ecs-tasks-placement" aria-label="Permalink to “ECS Tasks Placement”">​</a></h2><ul><li>When a task of type EC2 is launched, ECS must determine where to place it, with the constraints of CPU, memory, and available port.</li><li>Similarly, when a service scales in, ECS needs to determine which task to terminate.</li><li>To assist with this, you can define a task placement strategy and task placement constraints</li><li>Note: this is only for ECS with EC2, not for Fargate</li></ul><h2 id="ecs-task-placement-process" tabindex="-1">ECS Task Placement Process <a class="header-anchor" href="#ecs-task-placement-process" aria-label="Permalink to “ECS Task Placement Process”">​</a></h2><ul><li>Task placement strategies are a best effort</li><li>When Amazon ECS places tasks, it uses the following process to select container instances: <ol><li>Identify the instances that satisfy the CPU, memory, and port requirements in the task definition.</li><li>Identify the instances that satisfy the task placement constraints.</li><li>Identify the instances that satisfy the task placement strategies.</li><li>Select the instances for task placement.</li></ol></li></ul><h2 id="ecs-task-placement-strategies" tabindex="-1">ECS Task Placement Strategies <a class="header-anchor" href="#ecs-task-placement-strategies" aria-label="Permalink to “ECS Task Placement Strategies”">​</a></h2><ul><li><p>Binpack</p><ul><li>Place tasks based on the least available amount of CPU or memory</li><li>This minimizes the number of instances in use (cost savings)</li></ul><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">placementStrategy</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">field</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">memory</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">type</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">binpack</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>Random</p><ul><li>Place the task randomly</li></ul><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">placementStrategy</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">type</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">random</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>Spread</p><ul><li>Place the task evenly based on the specified value</li><li>Example: instanceId, attribute:ecs.availability-zone</li></ul><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">placementStrategy</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">field</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">attribute:ecs.availability-zone</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">type</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">spread</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>You can mix them together</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">placementStrategy</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">field</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">attribute:ecs.availability-zone</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">type</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">spread</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">field</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">memory</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">type</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">spread</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">placementStrategy</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">field</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">attribute:ecs.availability-zone</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">type</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">spread</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">field</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">memory</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">type</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">binpack</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li></ul><h2 id="ecs-task-placement-constraints" tabindex="-1">ECS Task Placement Constraints <a class="header-anchor" href="#ecs-task-placement-constraints" aria-label="Permalink to “ECS Task Placement Constraints”">​</a></h2><ul><li><p>distinctInstance: place each task on a different container instance</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">placementStrategy</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">type</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">distinctInstance</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>memberOf: places task on instances that satisfy an expression</p><ul><li>Uses the Cluster Query Language (advanced)</li></ul><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">placementStrategy</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">field</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">attribute:ecs.instance-type = ~ t2.*</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">type</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">memberof</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li></ul><h2 id="ecs-service-auto-scaling" tabindex="-1">ECS - Service Auto Scaling <a class="header-anchor" href="#ecs-service-auto-scaling" aria-label="Permalink to “ECS - Service Auto Scaling”">​</a></h2><ul><li>CPU and RAM is tracked in CloudWatch at the ECS service level</li><li>Target Tracking: target a specific average CloudWatch metric</li><li>Step Scaling: scale based on CloudWatch alarms</li><li>Scheduled Scaling: based on predictable changes</li><li>ECS Service Scaling (task level) ≠ EC2 Auto Scaling (instance level)</li><li>Fargate Auto Scaling is much easier to setup (because serverless)</li></ul><h2 id="ecs-cluster-capacity-provider" tabindex="-1">ECS - Cluster Capacity Provider <a class="header-anchor" href="#ecs-cluster-capacity-provider" aria-label="Permalink to “ECS - Cluster Capacity Provider”">​</a></h2><ul><li>A Capacity Provider is used in association with a cluster to determine the infrastructure that a task runs on <ul><li>For ECS and Fargate users, the FARGATE and FARGATE_SPOT capacity providers are added automatically</li><li>For Amazon ECS on EC2, you need to associate the capacity provider with an auto-scaling group</li></ul></li><li>When you run a task or a service, you define a capacity provider strategy, to prioritize in which provider to run.</li><li>This allows the capacity provider to automatically provision infrastructure for you</li></ul><h2 id="ecs-data-volumes-ec2-task-strategies" tabindex="-1">ECS Data Volumes - EC2 Task Strategies <a class="header-anchor" href="#ecs-data-volumes-ec2-task-strategies" aria-label="Permalink to “ECS Data Volumes - EC2 Task Strategies”">​</a></h2><ul><li>The EBS volume is already mounted onto the EC2 instances</li><li>This allows your Docker containers to mount the EBS volume and extend the storage capacity of your task</li><li>Problem: if your task moves from one EC2 instance to another one, it won&#39;t be the same EBS volume and data</li><li>Use cases: <ul><li>Mount a data volume between different containers on the same instance</li><li>Extend the temporary storage of a task</li></ul></li></ul><h2 id="ecs-data-volumes-efs-file-systems" tabindex="-1">ECS Data Volumes - EFS File Systems <a class="header-anchor" href="#ecs-data-volumes-efs-file-systems" aria-label="Permalink to “ECS Data Volumes - EFS File Systems”">​</a></h2><ul><li>Works for both EC2 Tasks and Fargate tasks</li><li>Ability to mount EFS volumes onto tasks</li><li>Tasks launched in any AZ will be able to share the same data in the EFS volume</li><li>Fargate + EFS = serverless + data storage without managing servers</li><li>Use case: persistent multi-AZ shared storage for your containers</li></ul><h2 id="ecs-data-volumes-bind-mounts-sharing-data-between-containers" tabindex="-1">ECS Data Volumes - Bind Mounts Sharing data between containers <a class="header-anchor" href="#ecs-data-volumes-bind-mounts-sharing-data-between-containers" aria-label="Permalink to “ECS Data Volumes - Bind Mounts Sharing data between containers”">​</a></h2><ul><li>Works for both EC2 Tasks (using Fargate or EC2 instance storage) and Fargate tasks (get 4 GB for volume mounts)</li><li>Useful to share an ephemeral storage between multiple containers part of the same ECS task</li><li>Great for &quot;sidecar&quot; container pattern where the sidecar can be used to send metrics/logs to other destinations (separation of concerns)</li></ul><h2 id="ecs-summary-exam-tips" tabindex="-1">ECS Summary + Exam Tips <a class="header-anchor" href="#ecs-summary-exam-tips" aria-label="Permalink to “ECS Summary + Exam Tips”">​</a></h2><ul><li>ECS is used to run Docker containers and has 3 flavors:</li><li>ECS &quot;Classic&quot;: provision EC2 instances to run containers onto</li><li>Fargate: ECS Serverless, no more EC2 to provision</li><li>EKS: Managed Kubernetes by AWS</li></ul><p>ECS Classic</p><ul><li>EC2 instances must be created</li><li>We must configure the file /etc/ecs/ecs.config with the cluster name</li><li>The EC2 instance must run an ECS agent</li><li>EC2 instances can run multiple containers on the same type: <ul><li>You must not specify a host port (only container port)</li><li>You should use an Application Load Balancer with the dynamic port mapping</li><li>The EC2 instance security group must allow traffic from the ALB on all ports</li></ul></li><li>ECS tasks can have IAM Roles to execute actions against AWS</li><li>Security groups operate at the instance level, not task level</li></ul><p>ECR is used to store Docker Images</p><ul><li>ECR is tightly integrated with IAM</li><li>AWS CLI v1 login command (may be asked at the exam)</li><li>$(aws ecr get-login --no-include-email --region eu-west-1)</li><li>&quot;aws ecr get-login&quot; generates a &quot;docker login&quot; command</li><li>AWS CLI v2 login command (newer, may also be asked at the exam - pipe)</li><li>aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 1234567890.dkr.ecr.eu-west-1.amazonaws.com</li><li>Docker Push &amp; Pull: <ul><li>docker push 1234567890.dkr.ecr.eu-west-1.amazonaws.com/demo:latest</li><li>docker pull 1234567890.dkr.ecr.eu-west-1.amazonaws.com/demo:latest</li></ul></li><li>In case an EC2 instance (or you) cannot pull a Docker image, check IAM</li></ul><p>Fargate</p><ul><li>Fargate is Serverless (no EC2 to manage)</li><li>AWS provisions containers for us and assigns them ENI</li><li>Fargate containers are provisioned by the container spec (CPU / RAM)</li><li>Fargate tasks can have IAM Roles to execute actions against AWS</li></ul><p>Fargate vs Lambda</p><table tabindex="0"><thead><tr><th></th><th>Fargate</th><th>Lambda</th></tr></thead><tbody><tr><td>Cold Starts</td><td>Yes (shorter)</td><td>Yes</td></tr><tr><td>Duration</td><td>As long as you want</td><td><strong>15 mins</strong> (max)</td></tr><tr><td>Memory</td><td>Up to <strong>30 GB</strong></td><td>Up to <strong>3 GB</strong></td></tr><tr><td>Containers</td><td>Your provide your own containers</td><td>Limited to standardize containers</td></tr><tr><td>Integration</td><td>More manual labour</td><td>Seamlessly integrates with other serverless services</td></tr><tr><td>Pricing</td><td>Pay at least 1 min and every additional second</td><td>Pay per 100ms</td></tr></tbody></table><p>ECS Other</p><ul><li>ECS does integrate with CloudWatch Logs: <ul><li>You need to setup logging at the task definition level</li><li>Each container will have a different log stream</li><li>The EC2 Instance Profile needs to have the correct IAM permissions</li></ul></li><li>Use IAM Task Roles for your tasks</li><li>Task Placement Strategies: binpack, random, spread</li><li>Service Auto Scaling with target tracking, step scaling, or scheduled</li><li>Cluster Auto Scaling through Capacity Providers</li></ul>`,67)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
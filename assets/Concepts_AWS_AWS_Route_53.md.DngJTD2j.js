import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"Route 53","description":"Route 53","frontmatter":{"title":"Route 53","description":"Route 53","prev":"./AWS"},"headers":[],"relativePath":"Concepts/AWS/AWS_Route_53.md","filePath":"Concepts/AWS/AWS_Route_53.md","lastUpdated":1756574703000}`);var a={name:`Concepts/AWS/AWS_Route_53.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="route-53" tabindex="-1">Route 53 <a class="header-anchor" href="#route-53" aria-label="Permalink to “Route 53”">​</a></h1><ul><li>TTL</li><li>CNAME vs Alias</li><li>Health Checks</li><li>Routing Policies <ul><li>Simple</li><li>Weighted</li><li>Latency</li><li>Failover</li><li>Geolocation</li><li>Multi Value</li></ul></li><li>3rd party domains integration</li></ul><h2 id="aws-route-53-overview" tabindex="-1">AWS Route 53 Overview <a class="header-anchor" href="#aws-route-53-overview" aria-label="Permalink to “AWS Route 53 Overview”">​</a></h2><ul><li><p>Route53 is a Managed DNS (Domain Name System)</p></li><li><p>DNS is a collection of rules and records which helps clients understand how to reach a server through URLs.</p></li><li><p>In AWS, the most common records are:</p><ul><li>A: hostname to IPv4</li><li>AAAA: hostname to IPv6</li><li>CNAME: hostname to hostname</li><li>Alias: hostname to AWS resource.</li></ul></li><li><p>Route53 can use:</p><ul><li>public domain names you own (or buy) application1.mypublicdomain.com</li><li>private domain names that can be resolved by your instances in your VPCs. application1.company.internal</li></ul></li><li><p>Route53 has advanced features such as:</p><ul><li>Load balancing (through DNS - also called client load balancing)</li><li>Health checks (although limited...)</li><li>Routing policy: simple, failover, geolocation, latency, weighted, multi value</li></ul></li><li><p>You pay $0.50 per month per hosted zone</p></li></ul><h2 id="dns-records-ttl-time-to-live" tabindex="-1">DNS Records TTL (Time to Live) <a class="header-anchor" href="#dns-records-ttl-time-to-live" aria-label="Permalink to “DNS Records TTL (Time to Live)”">​</a></h2><ul><li>High TTL: (e.g. 24hr) <ul><li>Less traffic on DNS</li><li>Possibly outdated records</li></ul></li><li>Low TTL: (e.g 60 s) <ul><li>More traffic on DNS</li><li>Records are outdated for less time</li><li>Easy to change records</li><li>TTL is mandatory for each DNS record</li></ul></li></ul><h2 id="cname-vs-alias" tabindex="-1">CNAME vs Alias <a class="header-anchor" href="#cname-vs-alias" aria-label="Permalink to “CNAME vs Alias”">​</a></h2><ul><li>AWS Resources (Load Balancer, CloudFront...) expose an AWS hostname: lb1-1234.us-east-2.elb.amazonaws.com and you want myapp.mydomain.com</li><li>CNAME: <ul><li>Points a hostname to any other hostname. (app.mydomain.com =&gt; blabla.anything.com)</li><li>ONLY FOR NON ROOT DOMAIN (aka. something.mydomain.com)</li></ul></li><li>Alias: <ul><li>Points a hostname to an AWS Resource (app.mydomain.com =&gt; blabla.amazonaws.com)</li><li>Works for ROOT DOMAIN and NON ROOT DOMAIN (aka mydomain.com)</li><li>Free of charge</li><li>Native health check</li></ul></li></ul><h2 id="simple-routing-policy" tabindex="-1">Simple Routing Policy <a class="header-anchor" href="#simple-routing-policy" aria-label="Permalink to “Simple Routing Policy”">​</a></h2><ul><li>Maps a hostname to another hostname</li><li>Use when you need to redirect to a single resource</li><li>You can&#39;t attach health checks to simple routing policy</li><li>If multiple values are returned, a random one is chosen by the client</li></ul><h2 id="weighted-routing-policy" tabindex="-1">Weighted Routing Policy <a class="header-anchor" href="#weighted-routing-policy" aria-label="Permalink to “Weighted Routing Policy”">​</a></h2><ul><li>Control the % of the requests that go to specific endpoint</li><li>Helpful to test 1% of traffic on new app version for example</li><li>Helpful to split traffic between two regions</li><li>Can be associated with Health Checks</li></ul><h2 id="latency-routing-policy" tabindex="-1">Latency Routing Policy <a class="header-anchor" href="#latency-routing-policy" aria-label="Permalink to “Latency Routing Policy”">​</a></h2><ul><li>Redirect to the server that has the least latency close to us</li><li>Super helpful when latency of users is a priority</li><li>Latency is evaluated in terms of user to designated AWS Region</li><li>Germany may be directed to the US (if that&#39;s the lowest latency)</li></ul><h2 id="health-checks" tabindex="-1">Health Checks <a class="header-anchor" href="#health-checks" aria-label="Permalink to “Health Checks”">​</a></h2><ul><li>Have X health checks failed =&gt; unhealthy (default 3)</li><li>After X health checks passed =&gt; health (default 3)</li><li>Default Health Check Interval: 30s (can set to 10s - higher cost)</li><li>About 15 health checkers will check the endpoint health</li><li>=&gt; one request every 2 seconds on average</li><li>Can have HTTP, TCP and HTTPS health checks (no SSL verification)</li><li>Possibility of integrating the health check with CloudWatch</li><li>Health checks can be linked to Route53 DNS queries!</li></ul><h2 id="failover-routing-policy" tabindex="-1">Failover Routing Policy <a class="header-anchor" href="#failover-routing-policy" aria-label="Permalink to “Failover Routing Policy”">​</a></h2><h2 id="geo-location-routing-policy" tabindex="-1">Geo Location Routing Policy <a class="header-anchor" href="#geo-location-routing-policy" aria-label="Permalink to “Geo Location Routing Policy”">​</a></h2><ul><li>Different from Latency based!</li><li>This is routing based on user location</li><li>Here we specify: traffic from the UK should go to this specific IP</li><li>Should create a &quot;default&quot; policy (in case there&#39;s no match on location)</li></ul><h2 id="geoproximity-routing-policy" tabindex="-1">Geoproximity Routing Policy <a class="header-anchor" href="#geoproximity-routing-policy" aria-label="Permalink to “Geoproximity Routing Policy”">​</a></h2><ul><li>Route traffic to your resources based on the geographic location of users and resources</li><li>Ability to shift more traffic to resources based on the defined bias</li><li>To change the size of the geographic region, specify bias values: <ul><li>To expand (1 to 99) - more traffic to the resource</li><li>To shrink (-1 to -99) - less traffic to the resource</li></ul></li><li>Resources can be: <ul><li>AWS resources (specify AWS region)</li><li>Non-AWS resources (specify Latitude and Longitude)</li></ul></li><li>You must use Route 53 Traffic Flow (advanced) to use this feature</li></ul><h2 id="multi-value-routing-policy" tabindex="-1">Multi Value Routing Policy <a class="header-anchor" href="#multi-value-routing-policy" aria-label="Permalink to “Multi Value Routing Policy”">​</a></h2><ul><li>Use when routing traffic to multiple resources</li><li>Want to associate a Route 53 health checks with records</li><li>Up to 8 healthy records are returned for each Multi Value query</li><li>Multi Value is not a substitute for having an ELB</li></ul><h2 id="route53-as-a-registrar" tabindex="-1">Route53 as a Registrar <a class="header-anchor" href="#route53-as-a-registrar" aria-label="Permalink to “Route53 as a Registrar”">​</a></h2><ul><li>A domain name registrar is an organization that manages the reservation of Internet domain names</li><li>Famous names: <ul><li>GoDaddy</li><li>Google Domains</li><li>Etc...</li></ul></li><li>And also... Route53 (e.g. AWS)!</li><li>Domain Registrar != DNS</li></ul><h2 id="_3rd-party-registrar-with-aws-route-53" tabindex="-1">3rd Party Registrar with AWS Route 53 <a class="header-anchor" href="#_3rd-party-registrar-with-aws-route-53" aria-label="Permalink to “3rd Party Registrar with AWS Route 53”">​</a></h2><ul><li>If you buy your domain on 3rd party website, you can still use Route53. <ol><li>Create a Hosted Zone in Route 53</li><li>Update NS Records on 3rd party website to use Route 53 name servers</li></ol></li><li>Domain Registrar != DNS</li><li>(But each domain registrar usually comes with some DNS features)</li></ul>`,27)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"regex","description":"Regular expression (regex) is a sequence of characters that specifies a search pattern in text","frontmatter":{"title":"regex","description":"Regular expression (regex) is a sequence of characters that specifies a search pattern in text"},"headers":[],"relativePath":"Concepts/Regular_Expression/regex.md","filePath":"Concepts/Regular_Expression/regex.md","lastUpdated":1666469073000}`);var a={name:`Concepts/Regular_Expression/regex.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="regular-expression-regex" tabindex="-1">Regular expression (regex) <a class="header-anchor" href="#regular-expression-regex" aria-label="Permalink to “Regular expression (regex)”">​</a></h1><p>regex is a sequence of characters that specifies a search pattern in text</p><h2 id="syntax" tabindex="-1">Syntax <a class="header-anchor" href="#syntax" aria-label="Permalink to “Syntax”">​</a></h2><p>Identifiers:</p><ul><li><p><code>.</code>: any character, except for a newline</p></li><li><p><code>\\d</code>: any digit (0-9)</p></li><li><p><code>\\D</code>: not a digit</p></li><li><p><code>\\w</code>: any character (a-z, A-Z, 0-9, _)</p></li><li><p><code>\\W</code>: not a character</p></li><li><p><code>\\s</code>: whitespace (space, tab, newline)</p></li><li><p><code>\\S</code>: not whitespace</p></li><li><p><code>\\b</code>: the whitespace around words (word boundary)</p></li><li><p><code>\\B</code>: not a word boundary</p></li></ul><p>Modifiers:</p><ul><li><p><code>+</code>: match 1 or more</p></li><li><p><code>?</code>: match 0 or 1</p></li><li><p><code>*</code>: match 0 or more</p></li><li><p><code>^</code>: match the <strong>beginning</strong> of a string</p></li><li><p><code>$</code>: match the <strong>end</strong> of the string</p></li><li><p><code>|</code>: either or</p></li><li><p><code>[ ]</code>: range or variance <code>[A-Z]</code> (match characters in brackets)</p></li><li><p><code>[^ ]</code>: not match the range or variance <code>[A-Z]</code></p></li><li><p><code>{x}</code>: expecting <code>x</code> amount</p></li><li><p><code>{1,3}</code>: we&#39;re expecting 1 to 3</p></li></ul><p>White Space Characters:</p><ul><li><code>\\n</code>: new line</li><li><code>\\s</code>: space</li><li><code>\\t</code>: tab</li><li><code>\\e</code>: escape</li><li><code>\\f</code>: form feed</li><li><code>\\r</code>: return</li></ul><p>DON&#39;t FORGET!: <code>{ } \\</code></p><p><em>syntax characters</em>:</p><ul><li><code>\\</code>:</li><li><code>.</code>:</li><li><code>*</code>:</li><li><code>+</code>:</li><li><code>?</code>:</li><li><code>(</code>:</li><li><code>)</code>:</li><li><code>[</code>:</li><li><code>]</code>:</li><li><code>{</code>:</li><li><code>}</code>:</li></ul><h3 id="groups-look-around" tabindex="-1">Groups &amp; Look-around <a class="header-anchor" href="#groups-look-around" aria-label="Permalink to “Groups &amp; Look-around”">​</a></h3><ul><li><code>(abc)</code>: capture group</li><li><code>\\1</code>: back-reference to group <em>#1</em></li><li><code>(?:abc)</code>: non-capturing group</li><li><code>(?=abc)</code>: positive lookahead</li><li><code>(?!abc)</code>: negative lookahead</li></ul><h3 id="quantifiers" tabindex="-1">Quantifiers <a class="header-anchor" href="#quantifiers" aria-label="Permalink to “Quantifiers”">​</a></h3><ul><li><p><code>?</code>: match never or 1</p></li><li><p><code>*</code>: match 0 or more times</p></li><li><p><code>+</code>: match 1 or more times</p></li><li><p><code>{n}</code>: match <em>n</em> times</p></li><li><p><code>{n,}</code>: match <em>n</em> or more times</p></li><li><p><code>{n,m}</code>: match at least <em>n</em> times, at most <em>m</em> times</p></li><li><p><code>|</code>: match this or that</p></li></ul><h3 id="atoms" tabindex="-1">Atoms <a class="header-anchor" href="#atoms" aria-label="Permalink to “Atoms”">​</a></h3><p><em>Atoms</em> are the basic building blocks of regular expressions</p><h3 id="lookahead" tabindex="-1">Lookahead <a class="header-anchor" href="#lookahead" aria-label="Permalink to “Lookahead”">​</a></h3><h2 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to “JavaScript”">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> regTerm</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#C4704F;">hello</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">regTerm</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">regTerm</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // hello</span></span></code></pre></div><h3 id="flags" tabindex="-1">Flags <a class="header-anchor" href="#flags" aria-label="Permalink to “Flags”">​</a></h3><table tabindex="0"><thead><tr><th>Literal flag</th><th>Property name</th><th>ES</th><th>Description</th></tr></thead><tbody><tr><td><code>d</code></td><td><code>hasIndices</code></td><td>ES2022</td><td>Switch on match indices</td></tr><tr><td><code>g</code></td><td><code>global</code></td><td>ES3</td><td><strong>Match multiple times</strong></td></tr><tr><td><code>i</code></td><td><code>ignoreCase</code></td><td>ES3</td><td>Match <strong>case-insensitively</strong></td></tr><tr><td><code>m</code></td><td><code>multiline</code></td><td>ES3</td><td><code>^</code> and <code>$</code> match per line</td></tr><tr><td><code>s</code></td><td><code>dotAll</code></td><td>ES2018</td><td>Dot matches line terminators</td></tr><tr><td><code>u</code></td><td><code>unicode</code></td><td>ES6</td><td><strong>Unicode mode</strong> (recommended)</td></tr><tr><td><code>y</code></td><td><code>sticky</code></td><td>ES6</td><td>No characters between matches</td></tr></tbody></table><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to “Methods”">​</a></h3><ul><li><p><code>exec()</code>: executes a search for a match in a specified string and returns a result <code>array</code>, or <code>null</code></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> regex1</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">foo*</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">g</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> str1</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">table football, foosball</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> array1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ((</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">array1</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> regex1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">str1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">))</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> !==</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Found </span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">array1</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">]</span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">. Next starts at </span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">regex1</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">lastIndex</span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // expected output: &quot;Found foo. Next starts at 9.&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // expected output: &quot;Found foo. Next starts at 19.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p><code>test()</code>: executes a search for a match between a regular expression and a specified string. <strong>Returns <code>true</code> or <code>false</code></strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">table football</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> regex</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">foo*</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> globalRegex</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">foo*</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">g</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">regex</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// expected output: true</span></span></code></pre></div></li></ul>`,25)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
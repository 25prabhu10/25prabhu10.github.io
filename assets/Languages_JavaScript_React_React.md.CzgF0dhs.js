import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"React.js","description":"A JavaScript library for building user interfaces","frontmatter":{"title":"React.js","description":"A JavaScript library for building user interfaces","lastmod":"2025-02-08T00:00:00.000Z"},"headers":[],"relativePath":"Languages/JavaScript/React/React.md","filePath":"Languages/JavaScript/React/React.md","lastUpdated":1756574703000}`);var a={name:`Languages/JavaScript/React/React.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="react-js" tabindex="-1">React.js <a class="header-anchor" href="#react-js" aria-label="Permalink to “React.js”">​</a></h1><p>A JavaScript library for building user interfaces. Developed by Facebook and released in 2013</p><p>It is used to build components that represent logical reusable parts of the UI</p><p>Why React?</p><ul><li><p>It&#39;s composable</p></li><li><p>It&#39;s declarative (What should be done? Instead of How should it be done?)</p></li><li><p>React works primarily in the View layer</p></li><li><p>React applications run faster than applications written in plain JavaScript</p></li><li><p>Reusable (and clearer) Web Components</p></li></ul><p>React allows you to write maintainable and performant code by using the concept of components. Components allow you to focus on describing the UI you want, rather than focusing on the details of how the UI actually gets inserted in the page</p><h2 id="setting-up-a-react-project" tabindex="-1">Setting up a React Project <a class="header-anchor" href="#setting-up-a-react-project" aria-label="Permalink to “Setting up a React Project”">​</a></h2><p>Before we can begin, we&#39;ll need <a href="https://nodejs.org/en/" target="_blank" rel="noreferrer">Node.js and npm</a></p><p>Make sure <a href="https://nodejs.org/en/" target="_blank" rel="noreferrer">Node.js</a> is installed, if not then install it. It will by default install node package manager - <a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">npm</a>, if not installed then install it. If you prefer <a href="https://classic.yarnpkg.com/lang/en/" target="_blank" rel="noreferrer">Yarn</a> use that</p><ul><li><p>Run the below commands to make sure <code>Node.js</code> and <code>npm</code> or <code>yarn</code> are installed:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -v</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -v</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">yarn</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -v</span></span></code></pre></div></li></ul><p>To create a basic React project we need the <code>React</code> library and <code>ReactDOM</code> library because <em>React</em> only creates views, to render these views we need a library that will handle DOM manipulations. <em>ReactDOM</em> library dose this for us</p><ul><li><strong>React</strong> is the <strong>library for creating views</strong></li><li><strong>ReactDOM</strong> is the <strong>library used to render the UI in the browser</strong></li></ul><p>We write React code using <a href="#javascript-xml-jsx">JSX</a> which is a syntax extension of JavaScript</p><ul><li>As browsers can only parse JavaScript syntax, we need a tool or a library which will transform our JSX code into JavaScript</li><li><a href="#babel">Babel</a> is the library which we will use to do the transformation of JSX to JavaScript</li></ul><h3 id="ways-to-setup-react-project" tabindex="-1">Ways To Setup React Project <a class="header-anchor" href="#ways-to-setup-react-project" aria-label="Permalink to “Ways To Setup React Project”">​</a></h3><p>We can either:</p><ol><li><p>Use CDN links to get the JS files of these two libraries and add them as script tags in <code>index.html</code> file. Add your react code inside a script tag with type attribute set to <code>text/babel</code>:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&lt;!-- ... other HTML ... --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&lt;!-- Load React. --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&lt;!-- Note: when deploying, replace &quot;development.js&quot; with &quot;production.min.js&quot;. --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;">  src</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://unpkg.com/react@18/umd/react.development.js</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;">  crossorigin</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;">  src</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://unpkg.com/react-dom@18/umd/react-dom.development.js</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;">  crossorigin</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://unpkg.com/babel-standalone/babel.min.js</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">text/babel</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // JSX code here. Or link to separate JavaScript file that contains JSX</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span></code></pre></div></li><li><p>Or create a local development environment and install project dependencies. Follow steps mentioned in <a href="#react-project-setup-from-scratch">React Project Setup From Scratch</a></p></li><li><p>Or use boilerplate generators, such as:</p><ul><li><p><a href="https://create-react-app.dev/" target="_blank" rel="noreferrer"><code>create-react-app</code></a> application to generate the boilerplate. It is recommended by the official react guide</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> create-react-app</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> my-app</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> my-app</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> start</span></span></code></pre></div></li><li><p><a href="https://vitejs.dev/guide/" target="_blank" rel="noreferrer">Vite.js</a> is an opinionated built tool, it supports react template</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># npm 6.x</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> vite@latest</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> my-app</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --template</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> react</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># npm 7+, extra double-dash is needed:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> vite@latest</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> my-app</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --template</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> react</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># yarn</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> vite</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> my-app</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --template</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> react</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># pnpm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> vite</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> my-app</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --template</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> react</span></span></code></pre></div></li></ul></li></ol><h3 id="react-project-setup-from-scratch" tabindex="-1">React Project Setup From Scratch <a class="header-anchor" href="#react-project-setup-from-scratch" aria-label="Permalink to “React Project Setup From Scratch”">​</a></h3><p>The most basic development workflow should allow us to:</p><ul><li>Write <em>JSX</em> and transform it into JavaScript on the fly</li><li>Write code in a modular pattern</li><li>Manage dependencies</li><li>Bundle JavaScript files and use source maps for debugging</li><li>Use <em>Sass</em>, <em>less</em> or <em>CSS-in-JS</em></li></ul><p>Steps to create a base React project without using any boilerplate tools:</p><ol><li><p>Create an empty directory and give it the project name like <code>my-app</code>. Move inside this newly create project directory:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> my-app</span></span></code></pre></div></li><li><p>Initialize your project with <code>npm init</code> or <code>yarn init</code> and initialize <em>git</em> as well with <code>git init</code></p></li><li><p>A <code>package.json</code> file will be created after you complete <em>step-3</em></p><ul><li>The <code>package.json</code> is a standard <code>npm</code> manifest file that records important metadata about a project, such a name, description, information about the author, etc. It lets the developer specify dependencies (that should be downloaded and installed) and define script tasks</li><li><code>Yarn</code> also uses the same file</li></ul></li><li><p>Create <code>.gitignore</code> file at the root of the project to exclude all the files and directories that should not be committed, such as <code>/node_modules</code>, <code>/dist</code> directory:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># dependencies</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">/node_modules</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># testing</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">/coverage</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># production</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">/build</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">/dist</span></span></code></pre></div></li><li><p>Create a <code>public</code> directory which will contain all the static assets, such as the main <code>index.html</code> file, images, <code>manifest.json</code>, <code>robots.txt</code> and other static files</p></li><li><p>Create an <code>index.html</code> file inside the <code>public</code> directory. This is an empty HTML page that the browser loads, which react will utilize to render your app. An example of HTML markup of <code>index.html</code> is show below:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&lt;!-- sourced from https://raw.githubusercontent.com/reactjs/reactjs.org/master/static/html/single-file-example.html --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">doctype</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">UTF-8</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">meta</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;">      name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">viewport</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;">      content</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">width=device-width, initial-scale=1, shrink-to-fit=no</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">React Starter</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">root</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">noscript</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> You need to enable JavaScript to run this app. </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">noscript</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">../dist/bundle.js</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span></code></pre></div></li><li><p>Create a source directory called <code>src</code>, which will containing all the user written content such as JavaScript modules, CSS files, Templates etc.</p></li><li><p>Now you need a <strong>module packager or build tool</strong>, which will orchestrate JSX transformation, file minification and concatenation, module/dependency bundling or any other tasks. Tools such as <a href="https://gruntjs.com/" target="_blank" rel="noreferrer">Grunt</a>, <a href="https://gulpjs.com/" target="_blank" rel="noreferrer">gulp.js</a>, <a href="https://webpack.js.org/" target="_blank" rel="noreferrer">webpack</a>, <a href="https://parceljs.org/" target="_blank" rel="noreferrer">PARCEL</a>, <a href="https://rollupjs.org/" target="_blank" rel="noreferrer">rollup.js</a>, <a href="https://www.snowpack.dev/" target="_blank" rel="noreferrer">Snowpack</a> can be used</p></li><li><p>We will use webpack (v5) and for more info on how webpack works check out this <a href="./../Tools/Webpack/Webpack.html">Link</a></p><ul><li><p>Install it as project development dependency:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> webpack</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> webpack-cli</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --save-dev</span></span></code></pre></div></li><li><p>Now create webpack configuration file at the root of the project called <code>webpack.config.js</code></p></li></ul></li><li><p>Install <a href="#babel"><code>babel</code></a> and its dependencies as dev dependency:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> babel-loader</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> @babel/core</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> @babel/preset-env</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> @babel/preset-react</span></span></code></pre></div><ul><li><p>Add the below settings inside <code>webpack.config.js</code> file:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  module</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    rules</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">        test</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> /</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#E6CC77;--shiki-dark-font-weight:inherit;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#C4704F;">m</span><span style="--shiki-light:#D73A49;--shiki-dark:#4C9A91;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#C4704F;">js</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">        exclude</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#C4704F;">node_modules</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">        use</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">          loader</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">babel-loader</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">          options</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">            presets</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">@babel/preset-env</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">          },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    ];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>Create <code>babel.config.json</code> or <code>.babelrc</code> configuration file and add:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">presets</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">@babel/preset-env</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">@babel/preset-react</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li></ul></li><li><p>Install <code>react</code> and <code>react-dom</code> as regular dependencies:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --save</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> react</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> react-dom</span></span></code></pre></div></li><li><p>Now all the basic setup is done and you can proceed with working on the project</p></li></ol><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>If you are using a boilerplate generator such as create-react-app, you don&#39;t need to worry about the initial setup. You can just start working on the project which has been scaffolded</p></div><h3 id="react-project-structure" tabindex="-1">React Project Structure <a class="header-anchor" href="#react-project-structure" aria-label="Permalink to “React Project Structure”">​</a></h3><p>There a several ways to structure a project, here is one structure:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">my-app</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> package.json</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> README.md</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> src</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> components</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    │\xA0\xA0</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> App</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    │\xA0\xA0</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> │\xA0\xA0</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> App.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    │\xA0\xA0</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> │\xA0\xA0</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> index.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    │\xA0\xA0</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> Header</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    │\xA0\xA0</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> │\xA0\xA0</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> Header.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    │\xA0\xA0</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> │\xA0\xA0</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> index.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    │\xA0\xA0</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> Widget</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    │\xA0\xA0</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">     ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> index.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    │\xA0\xA0</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">     ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> use-stuff.hook.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    │\xA0\xA0</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">     ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> WidgetChild.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    │\xA0\xA0</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">     ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> Widget.constants.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    │\xA0\xA0</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">     ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> Widget.helpers.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    │\xA0\xA0</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">     └──</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> Widget.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> constants.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> helpers</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    │\xA0\xA0</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> animation.helpers.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    │\xA0\xA0</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> auth.helpers.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> hooks</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    └──</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> utils.js</span></span></code></pre></div><h3 id="babel" tabindex="-1">Babel <a class="header-anchor" href="#babel" aria-label="Permalink to “Babel”">​</a></h3><p>Babel is a free and open-source JavaScript transpiler that is mainly used to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript that can be run by older JavaScript engines</p><ul><li><p>Babel is required to convert the React <a href="#javascript-xml-jsx">JSX</a> syntax to JavaScript syntax that most of the browsers can interpret</p></li><li><p>Babel looks for the JSX/JavaScript code in the HTML file where the script tag contains <code>type=text/babel</code></p></li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&lt;!-- React Library &amp; React DOM --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://unpkg.com/react/umd/react.development.js</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://unpkg.com/react-dom/umd/react-dom.development.js</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://unpkg.com/@babel/standalone/babel.min.js</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">text/babel</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // JSX code here. Or link to separate JavaScript file that contains JSX</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span></code></pre></div><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to “Introduction”">​</a></h2><p>A simple web page will consist of an HTML file like <code>index.html</code>, this file will contain references to stylesheets or inline-styles and references to JavaScript file files or in-line JavaScript code</p><p>Similarly, a simple React application will have all these three thing. Just that instead of the normal JavaScript code React uses an extended version of JavaScript called <a href="#javascript-xml-jsx">JSX</a>. In the below example inside the script tag with type <code>text/babel</code> is the React code</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">doctype</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">utf-8</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Hello, World!</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">root</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    &lt;!-- React Library &amp; React DOM --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://unpkg.com/react/umd/react.development.js</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://unpkg.com/react-dom/umd/react-dom.development.js</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://unpkg.com/@babel/standalone/babel.min.js</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">text/babel</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">      // JSX code here. Or link to separate JavaScript file that contains JSX</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">      // REACT COMPONENT</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">      function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Welcome</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Hello, World!</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">      // RENDER THE REACT COMPONENT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      ReactDOM</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Welcome</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> document</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">root</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span></code></pre></div><p>In the above example we have used HTML like element <code>&lt;h1&gt;</code> inside a JavaScript function which should cause an error, but you will not get any errors in the browser and the we will see the result in the browser</p><p>This is because React uses an extended version JavaScript called <a href="#javascript-xml-jsx">JSX</a>. This new JSX syntax allows us to use HTML like tags inside JavaScript code</p><h3 id="virtual-dom" tabindex="-1">Virtual DOM <a class="header-anchor" href="#virtual-dom" aria-label="Permalink to “Virtual DOM”">​</a></h3><p>When we use React, we usually don&#39;t deal with DOM elements directly. Instead, we create elements for a <strong>&quot;Virtual DOM&quot;</strong></p><p>Virtual DOM is an <strong>in-memory</strong>, <strong>lightweight representation of the DOM</strong></p><ul><li><p>These elements are really nothing but JSON objects. They represent the underlying DOM structure but don&#39;t carry any of the weight of actual DOM elements</p></li><li><p>React converts these virtual elements into real DOM elements as necessary. This process of finding the minimum number of changes that must be made in order to make the virtual DOM tree and the actual DOM tree identical is called <strong>reconciliation</strong></p></li><li><p>A Diffing algorithm is used to identify these changes</p><ul><li>This algorithm is very fast and efficient</li><li>It makes few assumptions: <ul><li>Two elements of different types will produce different trees</li><li>When we have a list of child elements which often changes, we should provide a unique &quot;key&quot; as a prop</li></ul></li></ul></li><li><p>React uses Virtual DOM, as direct DOM manipulation is a slow and performant task</p></li></ul><h3 id="javascript-xml-jsx" tabindex="-1">JavaScript XML (JSX) <a class="header-anchor" href="#javascript-xml-jsx" aria-label="Permalink to “JavaScript XML (JSX)”">​</a></h3><p>JSX stands for JavaScript XML. It is an <strong>extension to the JavaScript language syntax.</strong></p><ul><li><p><strong>React uses JSX</strong> instead of vanilla JavaScript to provide a concise syntax for creating complex DOM trees with attributes</p></li><li><p>JSX combines JavaScript and XML, to extend JavaScript that allows us to define React elements using a tag-based syntax directly within our JavaScript code. Using HTML inside JavaScript Code</p></li><li><p>JSX allows nested components</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">TodoList</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Todo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Todo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Todo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">TodoList</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span></code></pre></div></li><li><p>Since <code>class</code> is a reserved word in JavaScript, <code>className</code> is used to define the class attribute instead:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">aliens</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Hello, World!</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span></code></pre></div></li><li><p>JavaScript expressions are wrapped in curly braces and indicate where variables will be evaluated and their resulting values returned</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span></code></pre></div></li><li><p>JavaScript code is evaluated inside the curly braces:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;{</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello, </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> title</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">author</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">toUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;{</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span></code></pre></div></li></ul><h2 id="react-element" tabindex="-1">React Element <a class="header-anchor" href="#react-element" aria-label="Permalink to “React Element”">​</a></h2><p>A React elements look similar to the HTML elements and describe how React should render the actual DOM element</p><ul><li><p>Create a React element which represents <code>h1</code> using <code>React.createElement</code>:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">h1</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">recipe-0</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> },</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Baked Salmon</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><ul><li>JSX is used for creating React element which look similar to HTML. This JSX code will be converted into the above mentioned <code>React.createElement</code></li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">recipe-0</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Baked Salmon</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span></code></pre></div></li><li><p>React will create the actual DOM elements based on the above code:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">recipe-0</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Baked Salmon</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span></code></pre></div></li><li><p>This React element has similar properties applied to new DOM elements</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  $$typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">element</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">  &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">type</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">h1</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">  &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">key</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">  &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">ref</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">  &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">props</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">recipe-0</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> children</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Baked Salmon</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">},</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">  &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">_owner</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">  &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">_store</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li></ul><p>In the above piece of code:</p><ul><li><code>type</code>: Which type of HTML or SVG element to create</li><li><code>props</code>: Represents the data and child elements required to construct a DOM element</li><li><code>children</code>: Displaying other nested elements or text</li></ul><h3 id="react-factory" tabindex="-1">React Factory <a class="header-anchor" href="#react-factory" aria-label="Permalink to “React Factory”">​</a></h3><p><code>React.createFactory</code> is just a helper that binds your component class to <code>React.createElement</code> so you can make your own factories</p><ul><li><code>React.DOM</code> gives a bunch of factories for HTML elements</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Greeting</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">GreetingClass</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">DOM</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">greeting-container</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> className</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">container</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">},</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">World</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  document</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">root</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">DEPRECATED</p><p>React components can no longer be called directly like this. Instead use JSX. See <a href="https://reactjs.org/warnings/legacy-factories.html" target="_blank" rel="noreferrer">React Factories</a></p></div><h2 id="react-component" tabindex="-1">React Component <a class="header-anchor" href="#react-component" aria-label="Permalink to “React Component”">​</a></h2><p>React components are reusable chunks of JavaScript that output (via JSX) HTML elements</p><ul><li><p>Components are the building block of React UI</p></li><li><p>At a bare minimum, a React component is simply a JavaScript class (with a render method) or a function that returns (JSX) a description of the component&#39;s UI:</p></li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Class component</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Hello</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Hello, World!</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Functional component</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Hello, World!</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p>Ways to create a React class component:</p><ul><li><p>When React was first made open source in 2013, there was one way to create a component: <code>createClass</code>. The use of <code>React.createClass</code> to create a component looks like this:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> IngredientsList</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createClass</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">  displayName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">IngredientsList</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">      &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">ul</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      {</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> className</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">ingredients</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">items</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">ingredient</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">li</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> },</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> ingredient</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">});</span></span></code></pre></div><p>Components that used <code>createClass</code> would have a <code>render()</code> method that described the React element(s) that should be returned and rendered. The idea of the component was the same: we&#39;d describe a reusable bit of UI to render</p><div class="danger custom-block"><p class="custom-block-title">DEPRECATED</p><p>In React <code>v15.5</code> (April 2017), React started throwing warnings if <code>createClass</code> was used. In <strong>React <code>v16</code> (September 2017), <code>React.createClass</code> was officially deprecated</strong> and was moved to its own package, <code>create-react-class</code></p></div></li><li><p>Using class syntax added to JavaScript with ES2015. React added <code>React.Component</code> API that allowed the use of class syntax to create a new component:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IngredientsList</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">      &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">ul</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      {</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> className</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">ingredients</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">items</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">ingredient</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">li</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> },</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> ingredient</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">HEADS-UP</p><p>This syntax may as well be deprecated in near future</p></div></li><li><p><code>displayName</code>: This string property is used in debugging messages</p></li></ul><h3 id="rendering-react-components" tabindex="-1">Rendering React Components <a class="header-anchor" href="#rendering-react-components" aria-label="Permalink to “Rendering React Components”">​</a></h3><p>Once a React element is created, we need a way to display it in the browser. <strong>ReactDOM</strong> contains the tools necessary to render React elements in the browser</p><p>The <code>ReactDOM.render()</code> method takes two arguments:</p><ol><li><p>The HTML-like elements (aka <strong>JSX</strong>) you want to output</p></li><li><p>The <strong>location in the DOM</strong> where React will render the JSX into</p></li></ol><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">ReactDOM</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Sherlock Holmes</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> document</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">#container</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span></code></pre></div><p>When will React render a component?</p><ol><li><p>State changes</p></li><li><p>Parent component renders</p></li><li><p>Props changes</p></li><li><p><code>shouldComponentUpdate</code> function returns <code>true</code></p></li><li><p><code>component.forceUpdate(callback)</code>: Calling <code>forceUpdate()</code> will cause <code>render()</code> to be called on the component, skipping <code>shouldComponentUpdate()</code></p></li></ol><h2 id="react-fragments" tabindex="-1">React Fragments <a class="header-anchor" href="#react-fragments" aria-label="Permalink to “React Fragments”">​</a></h2><p>Let us create a React component:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Welcome</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> })</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Welcome </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">ReactDOM</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Welcome</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Mort</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> document</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">root</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span></code></pre></div><ul><li>If we add an adjacent element to <code>h1</code> inside the <code>Welcome()</code> function (as shown below), we will get an error, because React expects component to return only one parent element</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Welcome</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">})</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Welcome </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">To the world of React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">ReactDOM</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Welcome</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Mort</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> document</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">root</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span></code></pre></div><ul><li>The above JSX will be converted to standard JavaScript as shown below, here we can see that the function returns 2 items, which is not valid in JavaScript:</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Welcome</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> })</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">h1</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Welcome </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">p</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">To the world of React</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li>To overcome these issue, we should wrap the two elements with a parent element such as a <code>div</code>, so that only one <code>createElement</code> is returned by the function after transpilation:</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Welcome</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> })</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Welcome </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">To the world of React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">ReactDOM</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Welcome</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Mort</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> document</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">root</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span></code></pre></div><ul><li>In cases where parent element such as <code>div</code> tag are unnecessary, React (16.2+) provides an inbuilt element called <code>React.Fragment</code> which mimics the behaviour of a wrapper without actually creating a new tag:</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Welcome</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> })</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">React.Fragment</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Welcome </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">To the world of React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">React.Fragment</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li>An alternate syntax:</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Welcome</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> })</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Welcome </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">To the world of React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li>In the DOM, the fragment is not visible in the resulting tree:</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Welcome Mort</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">To the world of React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span></code></pre></div><h2 id="react-strictmode" tabindex="-1">React <code>StrictMode</code> <a class="header-anchor" href="#react-strictmode" aria-label="Permalink to “React StrictMode”">​</a></h2><p><code>StrictMode</code> is a tool for highlighting potential problems in an application. Like Fragment, <code>StrictMode</code> does not render any visible UI. It activates additional checks and warnings for its descendants</p><ul><li>Strict mode checks are run in development mode only; they do not impact the production build</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> ExampleApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Header</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">React.StrictMode</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">          &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">ComponentOne</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">          &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">ComponentTwo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">React.StrictMode</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Footer</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p><code>StrictMode</code> currently helps with:</p><ul><li>Identifying components with unsafe life-cycles</li><li>Warning about legacy string <code>ref</code> API usage</li><li>Warning about deprecated <code>findDOMNode</code> usage</li><li>Detecting unexpected side effects</li><li>Detecting legacy context API</li><li>Ensuring reusable state</li></ul><h2 id="conditional-rendering" tabindex="-1">Conditional Rendering <a class="header-anchor" href="#conditional-rendering" aria-label="Permalink to “Conditional Rendering”">​</a></h2><p>Conditional rendering in React works the same way conditions work in JavaScript</p><p>Use JavaScript operators like <code>if</code> or the ternary operator to create elements representing the current state, and let React update the UI to match them</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> UserGreeting</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Welcome back!</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> GuestGreeting</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Please sign up.</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> isLoggedIn</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">isLoggedIn</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">isLoggedIn</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">UserGreeting</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">GuestGreeting</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // OR</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> isLoggedIn</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">UserGreeting</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">GuestGreeting</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">ReactDOM</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // Try changing to isLoggedIn={true}:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Greeting</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> isLoggedIn</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  document</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">root</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><ul><li>We can use inline if with logical <code>&amp;&amp;</code> operator, whenever we need to render an expression only when the condition is met</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Mailbox</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> unreadMessages</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">unreadMessages</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Hello!</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">unreadMessages</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> You have </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">unreadMessages</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> unread messages. </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      )}{</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li><p>It works because in JavaScript, <code>true &amp;&amp; expression</code> always evaluates to <code>expression</code>, and <code>false &amp;&amp; expression</code> always evaluates to <code>false</code></p></li><li><p>Note that returning a falsy expression will still cause the element after <code>&amp;&amp;</code> to be skipped but will return the falsy expression. In the example below, <code>&lt;div&gt;0&lt;/div&gt;</code> will be returned by the render method</p></li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Messages: </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// OUTPUT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span></code></pre></div><p>Preventing Component from Rendering by returning <code>null</code>:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> WarningBanner</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">warn</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">warning</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Warning!</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to “Props”">​</a></h2><p>A key factor to make components reusable and composable is the <strong>ability to configure</strong> them, and <strong>React provides properties (props)</strong> for doing so</p><p><strong>Props are the mechanism used in React for passing data from parent to child components</strong></p><ul><li>They <strong>can&#39;t be changed from inside the child component (immutable)</strong>; props are <strong>passed and &quot;owned&quot; by the parent</strong></li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">react</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Parent Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> GroceryList</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">ListItem</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> quantity</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Bread</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">ListItem</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> quantity</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">6</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Eggs</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">ListItem</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> quantity</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">2</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Milk</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Child Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ListItem</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        {</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">quantity</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> × </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">GroceryList</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> document</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">root</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span></code></pre></div><h3 id="children" tabindex="-1">Children <a class="header-anchor" href="#children" aria-label="Permalink to “Children”">​</a></h3><p>React renders child elements using <code>props.children</code></p><p>The content between the opening and closing tags using <code>props.children</code>:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">react</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Parent Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> GroceryList</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">ListItem</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> quantity</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Bread</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">ListItem</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">ListItem</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> quantity</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">6</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Eggs</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">ListItem</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">ListItem</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> quantity</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">2</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Milk</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">ListItem</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Child Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ListItem</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        {</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">quantity</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> × </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">children</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">GroceryList</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> document</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">root</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span></code></pre></div><h3 id="prop-validation" tabindex="-1">Prop Validation <a class="header-anchor" href="#prop-validation" aria-label="Permalink to “Prop Validation”">​</a></h3><p>When creating components, it is a good practice to specify which props can be used, which ones are required, and which types of values they accept</p><p>This can be done by declaring <code>prop-types</code> library (or <code>propTypes</code> old)</p><ul><li><code>PropTypes</code> do type checking at runtime</li><li>Used for development and not production</li><li>They produce errors only during development</li></ul><p>Install <code>prop-types</code>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --save</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> prop-types</span></span></code></pre></div><p><em>Example:</em></p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">react</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> PropTypes</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">prop-types</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Greeter</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">salutation</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Greeter</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">propTypes</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">  salutation</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> PropTypes</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">isRequired</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Greeter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> salutation</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello World</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> document</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">root</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span></code></pre></div><p>The above code is equivalent to:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Greeter</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> salutation</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> salutation</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> !==</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">warn</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">      \`</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Expected type for salutation is a string, but a </span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">\${</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;"> salutation</span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> was passed</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">salutation</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span></code></pre></div><p>Some prop types:</p><table tabindex="0"><thead><tr><th>Type</th><th>Validator</th></tr></thead><tbody><tr><td>Arrays</td><td><code>PropTypes.array</code></td></tr><tr><td>Boolean</td><td><code>PropTypes.bool</code></td></tr><tr><td>Functions</td><td><code>PropTypes.func</code></td></tr><tr><td>Numbers</td><td><code>PropTypes.number</code></td></tr><tr><td>Objects</td><td><code>PropTypes.object</code></td></tr><tr><td>Strings</td><td><code>PropTypes.string</code></td></tr><tr><td>Symbols</td><td><code>PropTypes.symbol</code></td></tr></tbody></table><p>You can combine multiple <code>propTypes</code>:</p><table tabindex="0"><thead><tr><th>Validator</th><th>Description</th></tr></thead><tbody><tr><td><code>PropTypes.oneOfType</code></td><td>Any one of the type: <code>PropTypes.oneOfType([PropTypes.string, PropTypes.number])</code></td></tr><tr><td><code>PropTypes.arrayOf</code></td><td>Array of certain type: <code>PropTypes.arrayOf(PropTypes.string)</code></td></tr><tr><td><code>PropTypes.objectOf</code></td><td>Object with property values of certain type</td></tr><tr><td><code>PropTypes.shape</code></td><td>Object with particular shape <code>PropTypes.shape({color: PropTypes.string, fontSize: PropTypes.number});</code></td></tr><tr><td><code>PropTypes.node</code></td><td>Any value</td></tr><tr><td><code>PropTypes.element</code></td><td>React element</td></tr><tr><td><code>PropTypes.instanceOf</code></td><td>Instance of a given class</td></tr><tr><td><code>PropTypes.oneOf</code></td><td>One of the options in an enum: <code>PropTypes.oneOf([&#39;News&#39;, &#39;Photos&#39;])</code></td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>PropTypes and TypeScript can be used together as type checkers</p><ul><li>PropTypes: Runtime Type Check</li><li>TypeScript: Static Type Check</li></ul></div><h3 id="default-props" tabindex="-1">Default Props <a class="header-anchor" href="#default-props" aria-label="Permalink to “Default Props”">​</a></h3><p>Specify default values for <code>props</code> with <code>defaultProps</code></p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Greeting</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Hi </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;;</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // Hi Guest</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// provide default values</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Greeter</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">defaultProps</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Guest</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span></code></pre></div><ul><li><p>Since ES2022, we can <code>defaultProps</code> as <code>static</code> property within a class component:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Greeting</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  static</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> defaultProps</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">stranger</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Hello, </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>This is used for <code>undefined</code> props, but not for <code>null</code> props</p></li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Greeting</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Hi </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;;</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // Hi null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// provide default values</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Greeter</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">defaultProps</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Guest</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span></code></pre></div><h2 id="application-state" tabindex="-1">Application State <a class="header-anchor" href="#application-state" aria-label="Permalink to “Application State”">​</a></h2><p>In React <strong><code>props</code> are immutable</strong>. This leads to static components</p><h3 id="usestate-hook" tabindex="-1"><code>useState</code> Hook <a class="header-anchor" href="#usestate-hook" aria-label="Permalink to “useState Hook”">​</a></h3><p>The <code>useState</code> <a href="#hooks">hook</a> declares a &quot;state variable&quot;</p><p>This is a way to &quot;preserve&quot; some values between the function calls - <code>useState</code> is a new way to use the exact same capabilities that <a href="#class-based-state"><code>this.state</code></a> provides in a class</p><ul><li><p>Normally, variables &quot;disappear&quot; when the function exits but state variables are preserved by React</p></li><li><p>React will preserve this state between re-renders</p></li><li><p><code>useState</code> returns a pair:</p><ul><li>The current state value and a function that lets you update it</li><li>This function is similar to <code>this.setState</code> in a class</li><li>Except it doesn&#39;t merge the old and new state together</li></ul></li><li><p><code>useState</code> takes only one argument: the initial state</p><ul><li>The initial state is only used during the first render</li></ul></li></ul><p>Sample syntax:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> setState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">initialState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><p><em>Example:</em></p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">react</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Example</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // Declare a new state variable, which we&#39;ll call &quot;count&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">todos</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> setTodos</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">([{</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> text</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Learn Hooks</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">You clicked </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> times</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)}&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Click me</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p><strong>Lazy initial state</strong>: If the initial state is the result of an expensive computation, you may provide a function instead, which will be executed only on the initial render:</p><ul><li><code>useState</code> will always run on renders as well, hence if a callback function is provided. It will only run once</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> setState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> initialState</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> someExpensiveComputation</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> initialState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">});</span></span></code></pre></div><p>React schedules the state changes, hence the state changes can be in any order</p><p>To set a new state based on old state, we need to pass a callback instead of the new state:</p><ul><li>React will pass the previous state to this callback as a parameter</li><li>The value returned by this callback will be used as the new state</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Increment count based on previous value</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">prevCount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> prevCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><p><strong>Multiple states</strong>: A single component can have multiple states managed either by multiple state variables or a single state object with keys refereeing to states</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Preferable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">firstName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> setFirstName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">lastName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> setLastName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">setFirstName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">React</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// or</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">fullName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> setFullName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">  firstName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">  lastName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">setFullName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">prevFullName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">prevFullName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">    firstName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">React</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">});</span></span></code></pre></div><h3 id="class-based-state" tabindex="-1">Class Based State <a class="header-anchor" href="#class-based-state" aria-label="Permalink to “Class Based State”">​</a></h3><p>To have mutable data that represent the state of that component, React provides a private object called <code>this.state</code> whose data can be changed by calling <code>this.setState()</code></p><ul><li>The state object needs to be initialized inside the constructor function else it <strong>will have <code>null</code> value</strong></li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Example</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">      count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">You clicked </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> times</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">setState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> })}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">          Click me</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li><p>To update the state we should always use the React provided function called <code>this.setState({})</code>. It takes the new values of the state</p></li><li><p>This is because React uses <code>this.setState({})</code> method to track the changes happening to the state of the component</p></li><li><p>Whenever <strong>component&#39;s internal state changes</strong> the <strong>component is rendered again</strong>, so to avoid this the state changes need to be kept to minimum</p></li><li><p><code>this.setState({})</code> will only update the state values that are passed as the parameter and the rest remain unchanged</p></li><li><p>You can <strong>access previous state</strong> while setting new state by passing a callback function instead of new object inside <code>this.setState()</code>:</p></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">setState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">prevState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> prevState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">});</span></span></code></pre></div><ul><li>You can access props inside <code>this.setState()</code> by using the second parameter of the callback function:</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">setState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">prevState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> prevState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">});</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>If you want to access <code>this.props</code> inside the constructor, you need to pass props to <code>constructor()</code> and <code>super()</code>. And if you just need <code>props</code> inside the constructor, you need to pass props to <code>constructor()</code>:</p><ol><li><p>Not passing props:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">  super</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// OR</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">  super</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // props object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>Passing props will require us to pass props to <code>super</code> constructor as well:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">  super</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // props object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // props object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li></ol></div><div class="danger custom-block"><p class="custom-block-title">STATE MUTATION</p><ul><li><p>Do not mutate the state directly as it breaks the React&#39;s state management and JavaScript copies objects and arrays by reference, hence causing unexpected behaviours</p></li><li><p>If the state is directly mutate React will not know about the state change and hence it will not render the component with the latest state change</p></li></ul></div><p><strong>React immutability helper</strong>: React provides an add-on to help in changing objects in immutable way</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --save</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> react-addons-update</span></span></code></pre></div><p>Usage:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> student</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">John Caster</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> grades</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">A</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">C</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">B</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> newStudent</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">student</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> grades</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> $push</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">A</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> });</span></span></code></pre></div><h2 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-label="Permalink to “Events”">​</a></h2><p>React implements a <strong>synthetic event system</strong></p><p>JSX makes use of HTML like event handling API, with some small changes in the naming scheme. Like the event names (<code>onclick</code>) are in camel case (<code>onClick</code>)</p><ul><li>Use camel-case for event names</li><li>Cannot <code>return false</code> to prevent default behaviour in React as of in HTML</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">a</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;">  href</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">#</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;">  onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">console.log(&#39;The link was clicked.&#39;);</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">return false</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">  Click me</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span></code></pre></div><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> ActionLink</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> handleClick</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    e</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">The link was clicked.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> href</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">#</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleClick</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      {</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">      Click me</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> handleClick</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">persist</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">setState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">prevState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">    foo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> prevState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">pageX</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>As of <code>v17</code>, <code>e.persist()</code> doesn&#39;t do anything because the SyntheticEvent is no longer pooled</p></div><h2 id="styling" tabindex="-1">Styling <a class="header-anchor" href="#styling" aria-label="Permalink to “Styling”">​</a></h2><p>React supports both inline styling and external <a href="./../../CSS/CSS.html">CSS</a></p><p>React&#39;s component inline styles are specified as a JavaScript object with style names in camel case:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{{</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> width</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> height</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">100%</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> fontSize</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">2em</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }}&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Hello, World!</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span></code></pre></div><p>React inline styles have the following advantages:</p><ul><li>Scoped styles without selectors</li><li>Avoids specificity conflicts</li><li>Source order independence</li></ul><p>It is better to use an external CSS file (or CSS preprocessor such as Sass or Less) for major style definitions and use <strong>inline styling for dynamic, state-based appearance</strong></p><h3 id="css-in-js" tabindex="-1">CSS-In-JS <a class="header-anchor" href="#css-in-js" aria-label="Permalink to “CSS-In-JS”">​</a></h3><p>CSS-in-JS features:</p><ul><li>Co-location of JS, CSS, and HTML (in some cases) in a single file, <strong>painless maintenance</strong></li><li><strong>Scoped CSS</strong>: produce unique CSS class names</li><li>Support SSR (Server-Side Rendering)</li><li>Automatic vendor prefixes</li></ul><p>Styles definition syntax:</p><ol><li><p>Tagged Templates:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// consider &quot;css&quot; being the API of a generic CSS-in-JS library</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> heading</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> css</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">  font-size: 2em;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">  color: </span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">myTheme</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">color</span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div><ul><li>We can easily be migrate existing CSS code without rewriting it</li><li>Syntax highlight and code suggestions require additional editor plugins</li></ul></li><li><p>Object Styles:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// consider &quot;css&quot; being the API of a generic CSS-in-JS library</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> heading</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> css</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">  fontSize</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">2em</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> myTheme</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">color</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">});</span></span></code></pre></div><ul><li>CSS properties are written in camelCase</li><li>JavaScript values can be referenced directly</li><li>Migrating existing CSS would require a rewrite</li></ul></li></ol><p>CSS-in-JS libraries:</p><ul><li><p><a href="https://emotion.sh/" target="_blank" rel="noreferrer">Emotion</a>: Framework agnostic</p></li><li><p><a href="https://styled-components.com/" target="_blank" rel="noreferrer">styled-components</a></p></li><li><p><a href="https://github.com/vercel/styled-jsx" target="_blank" rel="noreferrer">styled-jsx</a>: Build by Vercel</p></li><li><p><a href="https://github.com/andreipfeiffer/css-in-js/blob/main/README.md" target="_blank" rel="noreferrer">Comparing CSS-in-JS libraries</a></p></li><li><p><a href="https://www.youtube.com/watch?v=a31BUlx-EXc" target="_blank" rel="noreferrer">The Past, Present, and Future of CSS-in-JS by Max Stoiber</a></p></li></ul><h2 id="keys" tabindex="-1">Keys <a class="header-anchor" href="#keys" aria-label="Permalink to “Keys”">​</a></h2><p>Keys help React identify which items have changed, are added, or are removed</p><ul><li><p>Keys should be given to the elements inside the array to give the elements a stable identity</p></li><li><p>Keys are unique identifiers that allow for fast loop-ups between trees for the elements</p></li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> todoItems</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> todos</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">todo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">todo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&gt;{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">todo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;);</span></span></code></pre></div><ul><li>Don&#39;t use indexes for keys it the order of items may change. This can negatively impact performance and may cause issues with component state</li></ul><p>Ways to create unique keys:</p><ul><li><p>Transform the array into an object using a transformation function:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> dishes</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Mac and Cheese</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Maggie</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> dishObjects</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> dishes</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">dish</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ({</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> title</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> dish</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> dishItems</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> dishObjects</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">dish</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">dish</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&gt;{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">dish</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span></code></pre></div></li><li><p>If items don&#39;t have ids, we can use <a href="https://github.com/ai/nanoid/" target="_blank" rel="noreferrer">Nano ID</a> to create short non-sequential URL-friendly unique ids</p><ul><li>But don&#39;t use <code>nanoid</code> directly as a <code>key</code></li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> nanoid</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">nanoid</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Right way to use nanoid</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> createNewTodo</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">  completed</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">  id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> nanoid</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">),</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // default is 10 in nanoid</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  text</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">todos</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">todo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">todo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&gt;{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">todo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// don&#39;t do this</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">todos</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">todo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">nanoid</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()}&gt;{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">todo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;);</span></span></code></pre></div></li></ul><p>When all the below conditions are met, you may safely use the index as a key:</p><ol><li>The list and items are static–they are not computed and do not change;</li><li>The items in the list have no ids;</li><li>The list is never reordered or filtered</li></ol><p>Why Keys?</p><p>React makes some assumptions and takes a naive approach in some cases. Also, it is very tricky when dealing with any list of repeating items</p><p>Key can be used on single element:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> App</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> setKey</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">abc</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">SomeComponent</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> setKey</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">())}&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Update</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span></code></pre></div><ul><li>In the above example when the <code>key</code> changes, <code>SomeComponent</code> will be remounted</li></ul><h2 id="refs" tabindex="-1">Refs <a class="header-anchor" href="#refs" aria-label="Permalink to “Refs”">​</a></h2><p>When we use React we directly don&#39;t interact with the actual DOM, instead we deal with the virtual DOM created by React</p><p>Refs provide a way to access DOM nodes or React elements created in the render method</p><p>Use Refs when:</p><ul><li>Managing focus, text selection, or media playback</li><li>Triggering imperative animations</li><li>Integrating with third-party DOM libraries</li></ul><p>Avoid using refs for anything that can be done declaratively</p><ul><li>For example, instead of exposing <code>open()</code> and <code>close()</code> methods on a <code>Dialog</code> component, pass an <code>isOpen</code> prop to it</li></ul><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p><code>ref</code> updates happen before <code>componentDidMount</code> or <code>componentDidUpdate</code> lifecycle methods</p></div><h3 id="useref-hook" tabindex="-1"><code>useRef</code> Hook <a class="header-anchor" href="#useref-hook" aria-label="Permalink to “useRef Hook”">​</a></h3><p><code>useRef</code> returns a mutable ref object whose <code>.current</code> property is initialized to the passed argument (<code>initialValue</code>). The returned object will persist for the full lifetime of the component</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> refContainer</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">initialValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><ul><li>A common use case is to access a child imperatively:</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> TextInputWithFocusButton</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> inputEl</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> onButtonClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // \`current\` points to the mounted text input element</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    inputEl</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">focus</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">inputEl</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">text</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">onButtonClick</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Focus the input</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li><p>One advantage of <code>useRef</code> over <code>useState</code> is that the reference does not trigger a re-render</p></li><li><p>Can be used ref instead of state when we only want to read the value and not manipulate it</p></li></ul><h3 id="creating-refs" tabindex="-1">Creating Refs <a class="header-anchor" href="#creating-refs" aria-label="Permalink to “Creating Refs”">​</a></h3><ol><li><p>We create a class property which will hold the element/component ref using <code>React.createRef()</code> (React <em>v16.3</em>) and attach it to the React element via the <code>ref</code> attribute. Refs are commonly assigned to an instance property when a component is constructed so they can be referenced throughout the component</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> MyComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">myRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">myRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>Using <strong>&quot;callback refs&quot;</strong>, which gives more fine-grain control over when refs are set and unset</p><ul><li>Instead of passing a s<code>ref</code> attribute created by <code>createRef()</code>, you can pass a function</li><li>The function receives the React component instance or HTML DOM element as its argument, which can be stored and accessed elsewhere</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> CustomTextInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">textInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">setTextInputRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">element</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">      // element will be a DOM element or a React component when the component mounts</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">      // element will be null when the component unmounts</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">textInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> element</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">focusTextInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">      // Focus the text input using the raw DOM API</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">textInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">textInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">focus</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  componentDidMount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // autofocus the input on mount</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">focusTextInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Use the \`ref\` callback to store a reference to the text input DOM</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // element in an instance field (for example, this.textInput)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">text</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">setTextInputRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;">          type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">button</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;">          value</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Focus the text input</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;">          onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">focusTextInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">CAVEATS WITH CALLBACK REFS</p><p>If the <code>ref</code> callback is defined as an inline function, it will get called twice during updates, first with <code>null</code> and then again with the DOM element. This is because a new instance of the function is created with each render, so React needs to clear the old ref and set up the new one. You can avoid this by defining the <code>ref</code> callback as a bound method on the class, but note that it shouldn&#39;t matter in most cases</p></div></li><li><p><em>Legacy API</em>: String Refs</p><ul><li>The <code>ref</code> attribute is a string, like <code>myTextInput</code>, and the DOM node is accessed as <code>this.refs.textInput</code></li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> FocusText</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  handleClick</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Explicitly focus the text input using the raw DOM API</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">refs</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">myTextInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">focus</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">text</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">myTextInput</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;">          type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">button</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;">          value</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Focus the text input</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;">          onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleClick</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li></ol><div class="danger custom-block"><p class="custom-block-title">WILL BE DEPRECATED</p><p>Don&#39;t use this way of creating refs, they have <a href="https://github.com/facebook/react/pull/8333#issuecomment-271648615" target="_blank" rel="noreferrer">some issues</a>, will be deprecated in the future</p></div><h3 id="accessing-refs" tabindex="-1">Accessing Refs <a class="header-anchor" href="#accessing-refs" aria-label="Permalink to “Accessing Refs”">​</a></h3><p>When a <code>ref</code> is passed to an element in <code>render</code>, a reference to the node becomes accessible at the <code>current</code> attribute of the ref</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> node</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">myRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div><p>The value of the ref differs depending on the type of the node:</p><ul><li><p>When the <code>ref</code> attribute is used on an HTML element, the <code>ref</code> created in the constructor with <code>React.createRef()</code> receives the underlying DOM element as its <code>current</code> property</p></li><li><p>When the <code>ref</code> attribute is used on a custom class component, the <code>ref</code> object receives the mounted instance of the component as its <code>current</code></p></li><li><p><strong>You may not use the ref attribute on function components</strong> because they don&#39;t have instances</p></li></ul><p><em>Example:</em> Adding a ref to a DOM element</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> CustomTextInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // create a ref to store the textInput DOM element</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">textInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">focusTextInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">focusTextInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  focusTextInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Explicitly focus the text input using the raw DOM API</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Note: we&#39;re accessing &quot;current&quot; to get the DOM node</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">textInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">focus</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // tell React that we want to associate the &lt;input&gt; ref</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // with the \`textInput\` that we created in the constructor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">text</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">textInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;">          type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">button</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;">          value</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Focus the text input</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;">          onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">focusTextInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p><em>Example:</em> Adding a Ref to a Class Component</p><ul><li>If we wanted to wrap the <code>CustomTextInput</code> above to simulate it being clicked immediately after mounting, we could use a ref to get access to the custom input and call its <code>focusTextInput</code> method manually:</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> AutoFocusTextInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">textInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  componentDidMount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">textInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">focusTextInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">CustomTextInput</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">textInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p><em>Example:</em> Refs and Function Components</p><ul><li>By default, <strong>you may not use the ref attribute on function components</strong> because they don&#39;t have instances:</li></ul><p><em>The below code will not work</em>:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> MyFunctionComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Parent</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">textInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // This will *not* work! the ref this.textInput will be null</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">MyFunctionComponent</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">textInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li>You can, however, <strong>use the ref attribute inside a function component</strong> as long as you refer to a DOM element or a class component:</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> CustomTextInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // textInput must be declared here so the ref can refer to it</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> textInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> handleClick</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    textInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">focus</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">text</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">textInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">button</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Focus the text input</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleClick</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="forwarding-refs" tabindex="-1">Forwarding Refs <a class="header-anchor" href="#forwarding-refs" aria-label="Permalink to “Forwarding Refs”">​</a></h3><p>In some cases we need to expose DOM refs to Parent Components. There are few ways to achieve this. It is recommended to use <strong>ref forwarding</strong> in React <em>v16.3</em> or higher</p><div class="danger custom-block"><p class="custom-block-title">ADD NOTES HERE</p><p>Check this <a href="https://reactjs.org/docs/forwarding-refs.html" target="_blank" rel="noreferrer">Link</a></p></div><p>Ref forwarding is a technique for automatically passing a ref through a component to one of its children. Ref forwarding lets components opt into exposing any child component&#39;s ref as their own</p><p>For React <em>v16.2</em> and earlier doesn&#39;t yet support ref forwarding. We can use the below technique:</p><ul><li>Expose a special prop on the child</li><li>This prop can be named anything other than <code>ref</code> (e.g. <code>inputRef</code>)</li><li>The child component can then forward the prop to the DOM node as a ref attribute</li><li>This lets the parent pass its ref to the child&#39;s DOM node through the component in the middle</li><li>This pattern is that it works several components deep</li><li>Check out <a href="https://gist.github.com/gaearon/1a018a023347fe1c2476073330cc5509" target="_blank" rel="noreferrer">DOM ref forwarding alternatives</a></li></ul><p><em>Example:</em></p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> CustomTextInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">inputRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Parent</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">inputElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">CustomTextInput</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> inputRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">inputElement</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">DON&#39;T</p><p>Don&#39;t Overuse Refs</p></div><h2 id="hooks" tabindex="-1">Hooks <a class="header-anchor" href="#hooks" aria-label="Permalink to “Hooks”">​</a></h2><p>Hooks (React <em>v16.8</em>) let you use state and other React features without writing a class</p><p>Hooks are functions that let you <em>&quot;hook into&quot;</em> React state and lifecycle features from function components</p><p>They help in resolving some of the problems caused by class based components:</p><ul><li><p>Wrapper hell</p><ul><li>Higher order components</li><li>Render props</li></ul></li><li><p>Huge components</p></li><li><p>Confusing classes</p></li></ul><p>Hooks provided by React:</p><ol><li><a href="#usestate-hook"><code>useState</code></a></li><li><a href="#useeffect-hook"><code>useEffect</code></a></li><li><a href="#usecontext-hook"><code>useContext</code></a></li><li><a href="#usereducer-hook"><code>useReducer</code></a></li><li><a href="#usecallback-hook"><code>useCallback</code></a></li><li><a href="#usememo-hook"><code>useMemo</code></a></li><li><a href="#useref-hook"><code>useRef</code></a></li><li><a href="#useimperativehandle-hook"><code>useImperativeHandle</code></a></li><li><a href="#uselayouteffect-hook"><code>useLayoutEffect</code></a></li><li><a href="#usedebugvalue-hook"><code>useDebugValue</code></a></li><li><a href="#usedeferredvalue-hook"><code>useDeferredValue</code></a>: <code>v18</code></li><li><a href="#usetransition-hook"><code>useTransition</code></a>: <code>v18</code></li><li><a href="#useid-hook"><code>useId</code></a>: <code>v18</code></li><li><code>usesyncexternalstore</code>: <code>v18</code> (to be used by libraries)</li><li><code>useinsertioneffect</code>: <code>v18</code> (to be used by libraries)</li></ol><h3 id="rules-of-hooks" tabindex="-1">Rules of Hooks <a class="header-anchor" href="#rules-of-hooks" aria-label="Permalink to “Rules of Hooks”">​</a></h3><ul><li><p>Only call Hooks at the Top Level</p><ul><li><strong>Don&#39;t call</strong> Hooks <strong>inside loops, conditions, or nested functions</strong></li></ul></li><li><p>Only call Hooks from React Function components or custom Hook functions</p></li></ul><h3 id="useeffect-hook" tabindex="-1"><code>useEffect</code> Hook <a class="header-anchor" href="#useeffect-hook" aria-label="Permalink to “useEffect Hook”">​</a></h3><p>The Effect Hook lets you <strong>perform side effects</strong> in function components</p><p>Side effects such as:</p><ul><li>Accessing <a href="./../JavaScript.html#local-storage"><code>localStorage</code></a></li><li>Event listeners</li><li>Syncing 2 different internal states together</li><li>Data fetching from API/database interactions</li><li>Subscriptions (e.g. web sockets)</li><li>Manually changing the DOM in React components</li><li>Basically anything that React isn&#39;t in charge of</li></ul><p>Not recommended use case for <code>useEffect</code>:</p><ul><li>Updating state (derive it whenever possible)</li><li>Use <a href="https://tanstack.com/query/v4" target="_blank" rel="noreferrer">react-query</a> for data fetching instead of <code>useEffect</code></li><li>Actions (Bind to user actions)</li></ul><p><em>Example:</em></p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">react</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Example</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // Similar to componentDidMount and componentDidUpdate:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Update the document title using the browser API</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    document</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">title</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> \`</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">You clicked </span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">count</span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> times</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">You clicked </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> times</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)}&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Click me</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li><p>By using this hook, you tell React that your component needs to do something after render</p></li><li><p><strong><code>useEffect</code> runs after every render</strong> until dependency array is provided</p></li><li><p>We can think of <code>useEffect</code> Hook as <code>componentDidMount</code>, <code>componentDidUpdate</code>, and <code>componentWillUnmount</code> combined</p></li></ul><p>There are two common kinds of side effects in React components:</p><ol><li><p>Effects Without Clean-up:</p><ul><li><p>Running some additional code after React has updated the DOM</p></li><li><p>Network requests, manual DOM mutations, and logging are common examples of effects that don&#39;t require a clean-up</p></li></ul></li><li><p>Effects with Clean-up:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">react</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> FriendStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">isOnline</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> setIsOnline</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> handleStatusChange</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">      setIsOnline</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">isOnline</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    ChatAPI</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">subscribeToFriendStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">friend</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> handleStatusChange</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Specify how to clean-up after this effect</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> cleanUp</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      ChatAPI</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">unsubscribeFromFriendStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">friend</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        handleStatusChange</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  },</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> []);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">isOnline</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Loading...</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> isOnline</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Online</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Offline</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li>The first argument it takes is a callback function</li><li>The second argument is called the dependency array, it is optional</li></ul></li></ol><p>The callback function passed on to <strong><code>useEffect</code> must not be made as <code>async</code></strong>, because <code>useEffect</code> returns a callback function which React will run when the <strong>component unmounts or the dependencies change</strong> and the effect hook needs to run again with new values</p><ul><li>If the function is made <code>async</code> the <code>useEffect</code> will return a <code>Promise</code> instead of the callback function that was provided to the <code>return</code> statement</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// don&#39;t do this</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">some url</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> res</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  setMemes</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">},</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> []);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// instead create a async function that will</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// be called from the callback function</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> getMemes</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">some url</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> res</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  setMemes</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  getMemes</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">},</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> []);</span></span></code></pre></div><p>The behaviours without the dependency array, with an empty <code>[]</code> and with dependency array are very different:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // This runs after every render</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // This runs only on mount (when the component appears)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">},</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> []);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // This runs on mount *and also* if either a or b have changed since the last render</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">},</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]);</span></span></code></pre></div><p>Dependencies array dose value comparison, but for object and functions it performs reference comparison</p><p>Tips:</p><ul><li><p>Use Multiple Effects to Separate Concerns</p></li><li><p>Optimizing Performance by Skipping Effects:</p><ul><li>Cleaning up or applying the effect after every render might create a performance problem</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">componentDidUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">prevProps</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> prevState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">prevState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> !==</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    document</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">title</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> \`</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">You clicked </span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">state</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">count</span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> times</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p>Using Hooks:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  document</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">title</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> \`</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">You clicked </span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">count</span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> times</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">},</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]);</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // Only re-run the effect if count changes</span></span></code></pre></div></li></ul><h3 id="usereducer-hook" tabindex="-1"><code>useReducer</code> Hook <a class="header-anchor" href="#usereducer-hook" aria-label="Permalink to “useReducer Hook”">​</a></h3><p>An alternative to <code>useState</code>. It accepts a reducer of type <code>(state, action) =&gt; newState</code>, and returns the current state paired with a <code>dispatch</code> method. (If you&#39;re familiar with Redux, you already know how this works.)</p><ul><li>It takes in the current state and returns a new state</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useReducer</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">reducer</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> initialArg</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><ul><li><code>useReducer</code> is usually preferable to <code>useState</code> when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> initialState</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> reducer</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  switch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    case</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">increment</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> state</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    case</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">decrement</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> state</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">payload</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    default</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useReducer</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">reducer</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> initialState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">      Count: </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">decrement</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> })}&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">increment</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> payload</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> })}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">        +</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li>React guarantees that <code>dispatch</code> function identity is stable and won&#39;t change on re-renders. This is why it&#39;s safe to omit from the <code>useEffect</code> or <code>useCallback</code> dependency list</li></ul><p><code>useEffect</code> vs <code>useReducer</code>:</p><ul><li>When one element of your state relies on the value of another element of your state in order to update use <code>useReducer</code></li></ul><h3 id="usecallback-hook" tabindex="-1"><code>useCallback</code> Hook <a class="header-anchor" href="#usecallback-hook" aria-label="Permalink to “useCallback Hook”">​</a></h3><p>It Returns a memoized callback</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> memoizedCallback</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">},</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]);</span></span></code></pre></div><p>Pass an inline callback and an array of dependencies. <code>useCallback</code> will return a memoized version of the callback that only changes if one of the dependencies has changed</p><ul><li>It is helpful when passing callback props to highly optimized child component (such as memoized child)</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> ParentComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> onHandleClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // this will return the same function</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // instance between re-renders</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">MemoizedSubComponent</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> handleClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">onHandleClick</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li>It <strong>doesn&#39;t memoize the function result</strong>, rather it memoizes the function object itself</li></ul><h3 id="usememo-hook" tabindex="-1"><code>useMemo</code> Hook <a class="header-anchor" href="#usememo-hook" aria-label="Permalink to “useMemo Hook”">​</a></h3><p>It Returns a memoized value</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> memoizedValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useMemo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> computeExpensiveValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">),</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]);</span></span></code></pre></div><p>Pass a &quot;create&quot; function and an array of dependencies. <code>useMemo</code> will only recompute the memoized value when one of the dependencies has changed. This optimization helps to avoid expensive calculations on every render</p><ul><li><p><code>useMemo</code> runs the function passed during rendering. Don&#39;t do anything there that you wouldn&#39;t normally do while rendering (such as side effects, they belong in <code>useEffect</code>)</p></li><li><p>If no array is provided, a new value will be computed on every render</p></li><li><p>Write your code so that it still works without <code>useMemo</code> and then add it to optimize performance</p></li><li><p>Don&#39;t use this hook if the answer is &quot;no&quot; to &quot;dose this component re-render often with the same props?&quot;</p></li><li><p>To benefit from <code>React.memo</code> the component should:</p><ul><li>Be a Pure functional component</li><li>Render <em>often</em></li><li>Usually, re-render with the same props</li><li>Be &quot;medium&quot; to &quot;big&quot; in size</li></ul></li></ul><p>It can be used to memoize child to only re-render if props have changed:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> SubComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> text</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> })</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">SubComponent: </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> MemoizedSubComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">memo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">SubComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><ul><li>The comparison done by <code>useMemo</code> is on <strong>shallow basis</strong>, to have a fine grained control we can pass a custom comparison function as the second argument</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> SubComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> handleClick</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> })</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleClick</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">SubComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> MemoizedSubComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">memo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">SubComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> ParentComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">MemoizedSubComponent</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;">      handleClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // this function is different on each render!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Solution</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> ParentComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> onHandleClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // this will return the same function</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // instance between re-renders</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">MemoizedSubComponent</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> handleClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">onHandleClick</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li>If the child component accepts callback props, then the parent must memoize the callback passed to child</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> moviePropsAreEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">prevMovie</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> nextMovie</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    prevMovie</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">title</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ===</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> nextMovie</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">title</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    prevMovie</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">releaseDate</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ===</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> nextMovie</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">releaseDate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">memo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> moviePropsAreEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><ul><li><p>Memoization can be avoid by using <code>children</code> prop: this technique is known as <strong>&quot;lifting content up&quot;</strong></p><ul><li>When <code>count</code> changes, <code>Parent</code> component will re-render. But it still has the same <code>children</code> prop it got from the <code>App</code> last time, so React doesn&#39;t visit that subtree</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Parent</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ({</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> children</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> })</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">button</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">        Counter </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">children</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Parent</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Child</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Parent</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// &lt;Child /&gt; component is not rerendered</span></span></code></pre></div></li></ul><h3 id="useimperativehandle-hook" tabindex="-1"><code>useImperativeHandle</code> Hook <a class="header-anchor" href="#useimperativehandle-hook" aria-label="Permalink to “useImperativeHandle Hook”">​</a></h3><p><code>useImperativeHandle</code> customizes the instance value that is exposed to parent components when using <code>ref</code></p><ul><li>Lets you customize the handle exposed as a <code>ref</code></li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">useImperativeHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">ref</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> createHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">deps</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]);</span></span></code></pre></div><p><em>Example:</em></p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> FancyInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> inputRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  useImperativeHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">ref</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ({</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    focus</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      inputRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">focus</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">inputRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> ...</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">FancyInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> forwardRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">FancyInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><p>In this example, a parent component that renders <code>&lt;FancyInput ref={inputRef} /&gt;</code> would be able to call <code>inputRef.current.focus()</code></p><h3 id="uselayouteffect-hook" tabindex="-1"><code>useLayoutEffect</code> Hook <a class="header-anchor" href="#uselayouteffect-hook" aria-label="Permalink to “useLayoutEffect Hook”">​</a></h3><p>The signature is identical to <code>useEffect</code>, but it <strong>fires synchronously after all DOM mutations</strong></p><h3 id="usedebugvalue-hook" tabindex="-1"><code>useDebugValue</code> Hook <a class="header-anchor" href="#usedebugvalue-hook" aria-label="Permalink to “useDebugValue Hook”">​</a></h3><p><code>useDebugValue</code> can be used to display a label for custom hooks in React DevTools</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">useDebugValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><p><em>Example:</em></p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useFriendStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">friendID</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">isOnline</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> setIsOnline</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // ..</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // Show a label in DevTools next to this Hook</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // e.g. &quot;FriendStatus: Online&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  useDebugValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">isOnline</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Online</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Offline</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> isOnline</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="usedeferredvalue-hook" tabindex="-1"><code>useDeferredValue</code> Hook <a class="header-anchor" href="#usedeferredvalue-hook" aria-label="Permalink to “useDeferredValue Hook”">​</a></h3><p><code>useDeferredValue</code> accepts a value and returns a new copy of the value that will defer to more urgent updates</p><ul><li><p>Dose same thing as <a href="#usetransition-hook"><code>useTransition</code></a>, making a slow and laggy interface faster</p></li><li><p>Useful when the value comes &quot;from above&quot; and you don&#39;t actually have control over the corresponding <code>setState</code> call</p></li><li><p>This Hook wraps a value affected by the state change</p></li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> deferredValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useDeferredValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><p><em>Example:</em></p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> List</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> LIST_SIZE</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 20000</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> defInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useDeferredValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // expensive task</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> divList</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useMemo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> l</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> LIST_SIZE</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      l</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&gt;{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">defInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> l</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  },</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">defInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> divList</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> DefValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> setInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> handleClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    setInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  },</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> []);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">text</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> onChange</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleClick</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// input:    a</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// defInput:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// input:    ab</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// defInput:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// input:    abc</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// defInput:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// input:    abcd</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// defInput: abcd</span></span></code></pre></div><h3 id="usetransition-hook" tabindex="-1"><code>useTransition</code> Hook <a class="header-anchor" href="#usetransition-hook" aria-label="Permalink to “useTransition Hook”">​</a></h3><p>Returns a stateful value for the pending state of the transition, and a function to start it</p><ul><li>This Hook wraps the state updating code</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">isPending</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> startTransition</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useTransition</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span></code></pre></div><p><em>Example:</em></p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> DelayedApp</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> setInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> setList</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">JSX</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Element</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]&gt;([])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">isPending</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> startTransition</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useTransition</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> LIST_SIZE</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 20000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> handleClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ChangeEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">HTMLInputElement</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    setInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    startTransition</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">      // expensive task</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> l</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> JSX</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Element</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      for</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> LIST_SIZE</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        l</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&gt;{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">      // this state update is de-prioritized</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">      // thus UI is not blocked by this time consuming task</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">      setList</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">l</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">text</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">t</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">t</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> onChange</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleClick</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">isPending</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Loading...</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">isPending</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> startTransition</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useTransition</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> handleClick</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    startTransition</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">      setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">isPending</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Spinner</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleClick</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&gt;{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li><p><code>startTransition</code> lets you mark updates as low priority in the provided callback as transitions</p><ul><li>Lets you explicitly tell React which updates are a lower priority</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> handleChange</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    setHighPriorityInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">startTransition</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">        setLowPrioritySearchTerm</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">}</span></span></code></pre></div><ul><li>Can be used standalone without <code>useTransition</code>, as shown in the above example</li></ul></li><li><p><code>isPending</code> indicates when a transition is active to show a pending state</p></li></ul><h3 id="useid-hook" tabindex="-1"><code>useId</code> Hook <a class="header-anchor" href="#useid-hook" aria-label="Permalink to “useId Hook”">​</a></h3><p><code>useId</code> is a hook for generating unique IDs that are stable across the server and client, while avoiding hydration mismatches</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useId</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span></code></pre></div><ul><li><strong><code>useId</code> is not for generating keys in a list. Keys should be generated from your data.</strong></li></ul><p><em>Example:</em></p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> NameFields</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useId</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">label</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> htmlFor</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">-firstName</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">First Name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">-firstName</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">text</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">label</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> htmlFor</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">-lastName</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Last Name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">-lastName</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">text</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="custom-hooks" tabindex="-1">Custom Hooks <a class="header-anchor" href="#custom-hooks" aria-label="Permalink to “Custom Hooks”">​</a></h3><ul><li><a href="./Hooks.html">Collection of custom Hooks</a></li><li><a href="https://usehooks.com/" target="_blank" rel="noreferrer">useHooks - Know about custom hooks</a></li></ul><h2 id="component-life-cycle-methods" tabindex="-1">Component Life-Cycle Methods <a class="header-anchor" href="#component-life-cycle-methods" aria-label="Permalink to “Component Life-Cycle Methods”">​</a></h2><p>React life cycle methods are methods that are executed at certain occasions throughout the life cycle of the component</p><p>These are <strong>available only in Class based components</strong> and not present in functional components</p><p>A <code>React.Component</code> subclass must define a <code>render()</code> method</p><ul><li><code>render()</code>: Invoked before the component is mounted and then whenever the <a href="#state-management">State</a> or <a href="#props">Props</a> changes <ul><li>It should always return React element</li></ul></li></ul><p><img src="/assets/react_component_life_cycle.nxQafuRb.webp" alt="Component Life-Cycle Methods"></p><h3 id="mounting" tabindex="-1">Mounting <a class="header-anchor" href="#mounting" aria-label="Permalink to “Mounting”">​</a></h3><p><strong>Mounting</strong> is creating new instance of a component and inserting into the DOM</p><p>Order of method calls on mount:</p><ul><li><code>constructor</code></li><li><code>getDerivedStateFromProps</code></li><li><code>render</code></li><li><code>componentDidMount</code></li></ul><p>List of Methods:</p><ol><li><p><code>constructor</code>:</p><ul><li><p><code>super()</code> must be called at the start inside the constructor if class extends another class, in this case the component extends <code>React.Component</code> class</p></li><li><p>Setting up <a href="#state-management">state</a></p></li><li><p>Creating <a href="#refs">refs</a></p></li><li><p>Method binding: <code>this.handleClick = this.handleClick.bind(this)</code></p></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> MyComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">      counter</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li>Writing a constructor is optional, and you can initialize your state like so if your babel setup has support for <strong>class fields</strong>:</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> MyComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">  state</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">    counter</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li><em>Constructor</em> is required to call <code>createRef</code> or method binding</li></ul></li><li><p><code>componentDidMount</code>: <strong>Invoked once, immediately after the initial rendering</strong> occurs. At this point, the component has a DOM representation that can be accessed</p><ul><li><p>This is <strong>not invoked during component re-rendering</strong> after the component has been mounted</p></li><li><p>API calls are made here</p></li><li><p>Add event listeners</p></li></ul></li><li><p><code>getDerivedStateFromProps</code>: <strong>Invoked right before calling the <code>render()</code></strong> method, both on the initial mount and on subsequent updates. It should return an object to update the state, or <code>null</code> to update nothing</p><ul><li>Resetting a video or audio element when the source changes</li><li>Refreshing a UI element with updates from the server</li><li>Closing an accordion element when the contents change</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> getDerivedStateFromProps</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> state</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">blocks</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> blocks</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> createBlocks</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">numberOfBlocks</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li>Check out this link which suggests to use this method only in rare cases <a href="https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html" target="_blank" rel="noreferrer">You probably don&#39;t need derived state</a></li></ul></li></ol><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>Components whose single responsibility is to communicate with the remote API, and passing data and callbacks down as props are called <strong>container component</strong></p></div><div class="danger custom-block"><p class="custom-block-title">DEPRECATED</p><p>This method is deprecated</p><p><code>componentWillMount()</code>: Invoked once, immediately before the initial rendering occurs. Setting state here will not trigger a re-rending</p></div><h3 id="updating" tabindex="-1">Updating <a class="header-anchor" href="#updating" aria-label="Permalink to “Updating”">​</a></h3><p><strong>Updating</strong> is re-rendering the component. Based on changes occurring in component props or state</p><p>Order of method calls based on updates:</p><ul><li><code>getDerivedStateFromProps</code></li><li><code>shouldComponentUpdate</code></li><li><code>render</code></li><li><code>getSnapshotBeforeUpdate</code></li><li><code>componentDidUpdate</code></li></ul><p><strong>Prop Changes</strong> and <strong>State Changes</strong>:</p><ol><li><p><code>shouldComponentUpdate</code>: <strong>Called before the render function</strong> and it gives the opportunity to <strong>define if a re-rendering is needed or can be skipped</strong></p><ul><li>Stop unnecessary re-renders</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">shouldComponentUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">nextProps</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> nextState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // if render is called on props or state change</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // return false if render is not required</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p><code>componentDidUpdate</code>: <strong>Invoked immediately after the component&#39;s updates are flushed to the DOM</strong></p><ul><li><p>This method is <strong>not called for the initial render</strong></p></li><li><p>If <code>getSnapshotBeforeUpdate()</code> is implemented (which is rare), the value it returns will be passed as a third <code>snapshot</code> parameter to <code>componentDidUpdate()</code>. Otherwise, this parameter will be <code>undefined</code></p></li><li><p>This method will <strong>not be invoked if <code>shouldComponentUpdate()</code> returns <code>false</code></strong></p></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">componentDidUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">prevProps</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> prevState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> snapshot</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // Typical usage (don&#39;t forget to compare props):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">userID</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> !==</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> prevProps</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">userID</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">     this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">userID</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p><code>getSnapshotBeforeUpdate</code> (NEW): Invoked right before the most recently rendered output is committed to e.g. the DOM. It enables your component to capture some information from the DOM (e.g. scroll position) before it is potentially changed. Any value returned by this lifecycle method will be passed as a parameter to <code>componentDidUpdate()</code></p><ul><li>A snapshot value (or <code>null</code>) should be returned</li><li>Use case is not common</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">getSnapshotBeforeUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">prevProps</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> prevState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">   return</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">componentDidUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">prevProps</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> prevState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> snapshot</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">   console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">snapshot</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // 100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span></code></pre></div></li></ol><div class="danger custom-block"><p class="custom-block-title">DEPRECATED</p><p>These have be deprecated:</p><ul><li><p><code>componentWillReceiveProps(nextProps)</code>: Invoked when a component is receiving new props. Calling <code>this.setState()</code> will not trigger re-rendering</p></li><li><p><code>componentWillUpdate(nextProps, nextState)</code>: Invoked immediately before rending when new props or state being received. State change via <code>this.setState</code> is not allowed as this function should be strictly used to prepare for upcoming update and not trigger an update itself</p></li></ul></div><h3 id="unmounting" tabindex="-1">Unmounting <a class="header-anchor" href="#unmounting" aria-label="Permalink to “Unmounting”">​</a></h3><p>Unmounting is when a component is being removed from the DOM</p><p>Order of method calls based on updates:</p><ul><li><code>componentWillUnmount</code></li></ul><ol><li><p><code>componentWillUnmount</code>: <strong>Invoked once, immediately before a component is unmounted from the DOM</strong>. Used for clean-up operations like removing any event listener&#39;s timers defined in mounting life cycle</p><ul><li><p>Tear down or clean up tasks or code that will otherwise clutter the app before the component disappears</p></li><li><p>Remove event listeners</p></li><li><p><strong>Should not call <code>setState()</code></strong></p></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">componentWillUnmount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">   // tear down or cleanup</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span></code></pre></div></li></ol><h3 id="error-boundaries-handling" tabindex="-1">Error Boundaries (Handling) <a class="header-anchor" href="#error-boundaries-handling" aria-label="Permalink to “Error Boundaries (Handling)”">​</a></h3><p>These methods are called when there is an error during rendering, in a lifecycle method, or in the constructor of any child component</p><p>Error boundaries are React components that <strong>catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI</strong> instead of the component tree that crashed</p><ul><li>During runtime errors React unmounts the whole React component tree</li><li>Error boundaries catch these runtime errors and display a fallback UI</li></ul><p>Error boundaries <strong>do not catch</strong> errors for:</p><ul><li>Event handlers</li><li>Asynchronous code</li><li>Server side rendering</li><li>Errors thrown in the error boundary itself (rather than its children)</li></ul><p>A class component becomes an error boundary if it defines <strong>either (or both)</strong> of the lifecycle methods <code>static getDerivedStateFromError()</code> or <code>componentDidCatch()</code></p><ul><li><p><code>static getDerivedStateFromError()</code>: This lifecycle is invoked after an error has been thrown by a descendant component</p><ul><li>It receives the error that was thrown as a parameter and should return a value to update state</li></ul></li><li><p><code>componentDidCatch()</code>: This lifecycle is invoked after an error has been thrown by a descendant component</p><ul><li><p>It receives two parameters:</p><ol><li><p><code>error</code>: The error that was thrown</p></li><li><p><code>info</code>: An object with a <code>componentStack</code> key containing information about which component threw the error</p></li></ol></li><li><p>to log error information</p></li></ul></li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ErrorBoundary</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> hasError</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> getDerivedStateFromError</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Update state so the next render will show the fallback UI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> hasError</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  componentDidCatch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> errorInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Example &quot;componentStack&quot;:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    //   in ComponentThatThrows (created by App)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    //   in ErrorBoundary (created by App)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    //   in div (created by App)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    //   in App</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    logComponentStackToMyService</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">errorInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">componentStack</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">hasError</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">      // You can render any custom fallback UI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Something went wrong.</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">children</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Wrap around components that might throw an error</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">ErrorBoundary</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">MyWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">ErrorBoundary</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;;</span></span></code></pre></div><ul><li><a href="https://github.com/bvaughn/react-error-boundary" target="_blank" rel="noreferrer">react-error-boundary library</a></li><li><a href="https://kentcdodds.com/blog/use-react-error-boundary-to-handle-errors-in-react" target="_blank" rel="noreferrer">Using the library</a></li></ul><h2 id="forms" tabindex="-1">Forms <a class="header-anchor" href="#forms" aria-label="Permalink to “Forms”">​</a></h2><p>Handling forms in react is a bit different from how they are in plain HTML:</p><ul><li><p>In HTML, form elements such as <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, and <code>&lt;select&gt;</code> typically maintain their own state and update it based on user input. Form data is usually handled by the DOM</p></li><li><p>In React, we can <strong>use state property of the component to maintain form data and be the &quot;single source of truth&quot;</strong>. This way the component that renders a form also controls what happens in that form on subsequent user input</p></li></ul><p>React form elements share the same HTML semantic element name and its attributes as props, with some exceptions such as:</p><ul><li><p>Instead of <code>for=</code> use <code>htmlFor=</code></p></li><li><p>The <code>textarea</code> tag of HTML is slightly different in React as the inner-text of this will be represented by the <code>value</code> prop:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">// THIS WILL CAUSE AN ERROR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">textarea</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">This is the description.</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">textarea</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">// THIS IS THE CORRECT USAGE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">textarea</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">This is the description.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#666666;--shiki-dark-font-style:italic;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span></code></pre></div></li><li><p>In HTML, you set the selected option using the <code>selected</code> attribute on the option tag. In React, in order to make components easier to manipulate, the following format is adopted instead:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">select</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">B</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">option</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">A</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Mobile</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">option</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">option</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">B</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Work</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">option</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">option</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">C</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Home</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">option</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span></code></pre></div></li></ul><h3 id="controlled-components" tabindex="-1">Controlled Components <a class="header-anchor" href="#controlled-components" aria-label="Permalink to “Controlled Components”">​</a></h3><p>An input form element whose value is controlled by React is called a &quot;controlled input or Controlled Component&quot;</p><ul><li><p>The form data is stored in component&#39;s state property</p></li><li><p>As state is immutable, user won&#39;t be able to provide any input from the form&#39;s user interface</p></li><li><p>To enable user input, we need to implement <code>handleChange</code> method to update the state based on user input</p></li><li><p>As state will contain all the form&#39;s data, on submit this can be passed on to an API call or for further processing</p></li></ul><p>Let&#39;s create a simple input form which takes users first-name. Please find the code below:</p><p><em>Example:</em></p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> UserForm</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">label</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> htmlFor</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">firstName</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">First Name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">firstName</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">text</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">submit</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Submit</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li><p>Here we have an input element whose value is <strong>not tracked by the React. Hence, it is an <a href="#uncontrolled-components">Uncontrolled Component</a></strong></p></li><li><p>To make it a controlled component, we need to track the input value through the component&#39;s state. So we will add a key <code>firstName</code> to the state object:</p></li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> UserForm</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">  state</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">    firstName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">label</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> htmlFor</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">firstName</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">First Name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">firstName</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">text</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">submit</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Submit</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li>Now the state needs to change based on user input. For that we need to implement <code>handleChange</code> method and attach it to <code>onChange</code> event of the input element:</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> UserForm</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    state</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">      firstName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    };</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleChange</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleChange</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  handleChange</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">setState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">      firstName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">label</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> htmlFor</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">firstName</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">First Name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">firstName</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">text</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> onChange</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleChange</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">submit</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Submit</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li><p>The input element&#39;s value is now tracked by React. But, this is still not a controlled component. Because, due to some business logic the <code>this.state.firstName</code> is changed outside of the form&#39;s interface (in code without any user action), this will not be reflected in the user interface. As, the input element&#39;s value is independent of the state, currently it only updates the state</p></li><li><p>To correct this the input element&#39;s value should be bound to the state. This can be done by assigning the state to the input value, such as:</p></li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> UserForm</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    state</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">      firstName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    };</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleChange</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleChange</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleSubmit</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleSubmit</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  handleChange</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">setState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">      firstName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  handleSubmit</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    alert</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">First name was submitted: </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">firstName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> onSubmit</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleSubmit</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">label</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> htmlFor</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">firstName</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">First Name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;">          id</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">firstName</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;">          type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">text</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;">          onChange</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleChange</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;">          value</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">firstName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">submit</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Submit</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li>This form is driven by the state and user actions update the state. <code>handleSubmit</code> method is used to handle the form submit event</li></ul><p><em>Example:</em></p><ul><li>If there are multiple input elements, there is not need to write separate <code>handleChange</code> method. We can modify the code shown in the previous example as:</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> UserForm</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    state</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">      firstName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">      emailId</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    };</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleChange</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleChange</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  handleChange</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">checkbox</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">checked</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">setState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        [</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">firstName</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">text</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> onChange</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleChange</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">firstName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">emailId</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">email</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> onChange</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleChange</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">firstName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li>There only few updates: <ul><li><p>All form elements will require to have the name prop to be set same as the key name used in the state object to track that particular element</p></li><li><p>Ternary operator is used to determine the value as all elements have user data in their value props except checkboxes which have boolean data in the checked prop</p></li><li><p>Using the ES6 computed property name syntax the state key can be updated using the corresponding input name</p></li></ul></li></ul><p>Good to know:</p><ul><li><p>If you hard code the value of any input element such as <code>&lt;input type=&quot;text&quot; value=&quot;Panda&quot; /&gt;</code></p></li><li><p>In the interface the user will see input box with value &quot;Panda&quot;. But the input field will not be editable</p></li><li><p>This is because React has declared the value to be &quot;Panda&quot;. It will override any value user inputs and makes it &quot;Panda&quot;</p></li></ul><p>Advantages of this way is:</p><ul><li><p>The form data is kept out of the interface and is entirely managed by the code. This is the React way of handling components</p></li><li><p>This pattern helps to implement interfaces that respond to or validate user interactions</p></li></ul><div class="warning custom-block"><p class="custom-block-title">NOTE</p><ul><li><p>You can pass an array into the <code>value</code> prop, allowing you to select multiple options in a <code>select</code> tag: <code>&lt;select multiple={true} value={[&#39;B&#39;, &#39;C&#39;]}&gt;</code></p></li><li><p>The <strong>file input</strong> tag&#39;s value is read-only, and hence it is an <strong>uncontrolled</strong> component in React</p></li></ul></div><h3 id="uncontrolled-components" tabindex="-1">Uncontrolled Components <a class="header-anchor" href="#uncontrolled-components" aria-label="Permalink to “Uncontrolled Components”">​</a></h3><p>In a <a href="#controlled-components">controlled component</a>, form data is handled by a React component. The alternative is <strong>uncontrolled components, where form data is handled by the DOM itself</strong></p><p>Controlled components adhere to React&#39;s principles and have their advantages. In most cases, controlled components are recommended</p><p>While uncontrolled components are an anti-pattern for how most other components are constructed in React, sometimes you don&#39;t need to oversee the user input field by field like in simple forms</p><ul><li>To write an uncontrolled component, instead of writing an event handler for every state update, you can use a <code>ref</code> to get form values from the DOM:</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> UserForm</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleChange</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleChange</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">input</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  handleSubmit</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    alert</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">First name was submitted: </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> onSubmit</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleSubmit</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">label</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> htmlFor</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">firstName</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">First Name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">text</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">submit</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Submit</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li><p><strong>Default Values</strong>: In the React rendering lifecycle, the <code>value</code> attribute on form elements will override the value in the DOM. With an uncontrolled component, you often want React to specify the initial value, but leave subsequent updates uncontrolled. To handle this case, you can specify a <code>defaultValue</code> attribute instead of <code>value</code></p></li><li><p>Likewise, <code>&lt;input type=&quot;checkbox&quot;&gt;</code> and <code>&lt;input type=&quot;radio&quot;&gt;</code> support <code>defaultChecked</code>, and <code>&lt;select&gt;</code> and <code>&lt;textarea&gt;</code> supports <code>defaultValue</code></p></li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> onSubmit</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleSubmit</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">        Name:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;">          defaultValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Bob</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;">          type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">text</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;">          ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">submit</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Submit</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h4 id="form-data" tabindex="-1">Form Data <a class="header-anchor" href="#form-data" aria-label="Permalink to “Form Data”">​</a></h4><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Form</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> handleSubmit</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    e</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> FormData</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">fromEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">entries</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> onSubmit</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleSubmit</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">text</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">userName</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">text</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">email</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">password</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">password</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span></code></pre></div><h4 id="file-input-tag" tabindex="-1">File Input Tag <a class="header-anchor" href="#file-input-tag" aria-label="Permalink to “File Input Tag”">​</a></h4><ul><li><p>In HTML, an <code>&lt;input type=&quot;file&quot;&gt;</code> lets the user choose one or more files from their device storage to be uploaded to a server or manipulated by JavaScript via the File API</p></li><li><p>In React, a file input element is always an uncontrolled component because its value can only be set by a user, and not programmatically</p></li><li><p>We need to use the File API to interact with the files</p></li></ul><p><em>Example:</em> Using ref to the DOM node to access file(s) in submit handle:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> FileInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleSubmit</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleSubmit</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">fileInput</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  handleSubmit</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    alert</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Selected file - </span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">fileInput</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">current</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">files</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">].</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> onSubmit</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">handleSubmit</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">          Upload file:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">          &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">file</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">fileInput</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">br</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">submit</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Submit</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li>Check out <a href="./Formik.html">Formik</a></li></ul><h3 id="form-validation" tabindex="-1">Form Validation <a class="header-anchor" href="#form-validation" aria-label="Permalink to “Form Validation”">​</a></h3><p>Using built-in browser validation with JavaScript to control how error messages are rendered</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> setError</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> onBlur</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">validity</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">valid</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    setError</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> else</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    setError</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">validationMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> noValidate</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> minLength</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> onBlur</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">onBlur</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;;</span></span></code></pre></div><h2 id="state-management" tabindex="-1">State Management <a class="header-anchor" href="#state-management" aria-label="Permalink to “State Management”">​</a></h2><p>Sometimes, we want the share state across different components or want the state of two components to always change together</p><ul><li><p>To do it, remove state from both of them, move it to their closest common parent, and then pass it down to them via props</p></li><li><p>This is known as <strong>&quot;lifting state up&quot;</strong></p></li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> App</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">todos</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> setTodos</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">([]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Todo List</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">TodoInput</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> onChange</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">setTodos</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">TodoList</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> todos</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">todos</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span></code></pre></div><ul><li><p>If the shared state is being consumed by a child component nested very deep, can cause unnecessary prop passing, which is referred to as prop drilling</p></li><li><p><em>Prop drilling</em> refers to the process of sending props from a higher-level component to a lower-level component</p></li><li><p>To overcome Prop drilling we can either use the <a href="#context-api">Context API</a> or a state management system</p></li></ul><p>Types of state:</p><ul><li><p><strong>UI State</strong>: State used for controlling interactive parts of our application (e.g. dark mode toggle, modals)</p><ul><li><p>State that&#39;s only useful in the UI for controlling the interactive parts of our app (like modal <code>isOpen</code> state)</p></li><li><p><a href="./Redux.html">Redux</a></p></li><li><p><a href="https://github.com/pmndrs/jotai" target="_blank" rel="noreferrer">jotai</a>: Atomic State</p></li><li><p><a href="https://github.com/pmndrs/zustand" target="_blank" rel="noreferrer">zustand</a></p></li><li><p><a href="https://recoiljs.org/" target="_blank" rel="noreferrer">recoiljs</a></p></li><li><p><a href="https://xstate.js.org/" target="_blank" rel="noreferrer">XState</a>: State machine</p></li><li><p><a href="https://immerjs.github.io/immer/" target="_blank" rel="noreferrer">Immer</a>: Write mutable code and execute it immutably</p></li><li><p><a href="https://mobx.js.org/" target="_blank" rel="noreferrer">MobX</a></p></li></ul></li><li><p><strong>Server Cache State</strong>: State from the server, which we cache on the client-side for quick access (e.g. call an API, store the result, use it in multiple places)</p><ul><li><p>State that&#39;s actually stored on the server and we store in the client for quick-access</p></li><li><p><a href="https://react-query.tanstack.com/" target="_blank" rel="noreferrer"><code>react-query</code></a></p></li><li><p><a href="https://swr.vercel.app/" target="_blank" rel="noreferrer"><code>SWR</code></a>: <em>stale-while-revalidate</em></p></li></ul></li><li><p><em>Form State</em>: The many different states of a form (e.g. loading, submitting, disabled, validation, retrying)</p></li><li><p><em>URL State</em>: State managed by the browser (e.g. filter products, saving to query parameters, and refreshing the page to see the same products filtered)</p></li><li><p><em>State Machine</em>: An explicit model of your state over time (e.g. a stop-light goes from green -&gt; yellow -&gt; red, but never green -&gt; red)</p></li></ul><h3 id="context-api" tabindex="-1">Context API <a class="header-anchor" href="#context-api" aria-label="Permalink to “Context API”">​</a></h3><p>Context API (React <em>v16.3</em>) enable us to define the context Object which stores some data and will make it available throughout the hierarchy without passing the data as props</p><ul><li><p>Initialize Context:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// src/currency/currency-context.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">react</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> CurrencyContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createContext</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span></code></pre></div></li><li><p>The Context object exposes a <code>Provider</code> component, which is most often used at the top-level component to provide its context to all child components:</p><ul><li><code>value</code> is the current value</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> CurrencyContext</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">./currency-context</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> App</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">CurrencyContext.Provider</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">€</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Books</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> list</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">dataItems</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">CurrencyContext.Provider</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span></code></pre></div></li><li><p>The Context object also exposes a <code>Consumer</code> component, which can be used in all child components which need to access the context:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> CurrencyContext</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">./currency-context</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Book</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ({</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> item</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> })</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">CurrencyContext.Consumer</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      {(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">currency</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">          {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> - </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">price</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">currency</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      )}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">CurrencyContext.Consumer</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span></code></pre></div></li></ul><h4 id="usecontext-hook" tabindex="-1"><code>useContext</code> Hook <a class="header-anchor" href="#usecontext-hook" aria-label="Permalink to “useContext Hook”">​</a></h4><p>This hook is used to create common data that can be accessed throughout the component hierarchy without passing the props down manually to each level (hence avoiding prop drilling)</p><ul><li>The context can be consumed by using the <strong><code>useContext</code></strong> hook:</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> CurrencyContext</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">./currency-context</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> useContext</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">react</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Book</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ({</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> item</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> })</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // const value = useContext(MyContext);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> currency</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useContext</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">CurrencyContext</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> - </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">price</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">currency</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span></code></pre></div><p><em>Example:</em></p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// src/count/count-context.jsx</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">react</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> CountContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createContext</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // create context</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> context</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">useContext</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">CountContext</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">useCount must be used within a CountProvider</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> CountProvider</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // manage state of the context</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">useState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">useMemo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">],</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">CountContext.Provider</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> CountProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> useCount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> };</span></span></code></pre></div><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// src/count/page.jsx</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">react</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> CountProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> useCount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">./count-context</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Counter</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useCount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> increment</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">increment</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&gt;{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> CountDisplay</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> useCount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">The current counter count is </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> CountPage</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">CountProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">CountDisplay</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">CountProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><p>We can provide an initial value while creating a context:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> CurrencyContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createContext</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> currency</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">USD</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> currency</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">useContext</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">CurrencyContext</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><ul><li>As the context consumers are usually rendered within a provider which can provide a useful value, we can remove default value</li></ul><h4 id="limitations-of-context" tabindex="-1">Limitations Of Context <a class="header-anchor" href="#limitations-of-context" aria-label="Permalink to “Limitations Of Context”">​</a></h4><ul><li><p><strong>Not optimized for high frequency changes</strong></p></li><li><p>React Context also <strong>shouldn&#39;t be used to replace all</strong> component communications and props</p></li><li><p>Component should be configurable via props and shot prop chains might not need any replacement</p></li></ul><table tabindex="0"><thead><tr><th>Context API</th><th>Redux</th></tr></thead><tbody><tr><td>Built-in tool</td><td>External, increased bundle size</td></tr><tr><td>Minimal setup</td><td>Extensive setup</td></tr><tr><td>Specifically designed for static data, that is not often refreshed or update</td><td>Good for both static and dynamic data</td></tr><tr><td>Debugging can be hard in highly nested component structure</td><td>Powerful Redux Dev Tools to ease debugging</td></tr></tbody></table><ul><li>When a component consumes certain part of data from Context, it will be re-rendered even if the rest of the data in the Context changes</li></ul><h2 id="portals" tabindex="-1">Portals <a class="header-anchor" href="#portals" aria-label="Permalink to “Portals”">​</a></h2><p>Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">ReactDOM</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createPortal</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">child</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> container</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><ul><li>It&#39;s useful to insert a child into a different location in the DOM:</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // React does *not* create a new div. It renders the children into \`domNode\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // \`domNode\` is any valid DOM node, regardless of its location in the DOM</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> ReactDOM</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createPortal</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">children</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    domNode</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p>Typical use case for portals is when a parent component has an <code>overflow: hidden</code> or <code>z-index</code> style, but you need the child to visually &quot;break out&quot; of its container. For example, <strong>dialogs, hover-cards, and tooltips</strong></p><h2 id="other-apis" tabindex="-1">Other APIs <a class="header-anchor" href="#other-apis" aria-label="Permalink to “Other APIs”">​</a></h2><ol><li><p><code>flushSync</code>: Lets you force React to flush any updates inside the provided callback synchronously. This ensures that the DOM is updated immediately</p><ul><li>Using <code>flushSync</code> is uncommon and <strong>can hurt the performance</strong> of your app</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> flushSync</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">react-dom</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">socket</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">onMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  flushSync</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    setMessages</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">prevMessages</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">prevMessages</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  scrollToLastMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">});</span></span></code></pre></div></li><li><p><code>findDOMNode</code></p></li></ol><h2 id="client-side-routing" tabindex="-1">Client-Side Routing <a class="header-anchor" href="#client-side-routing" aria-label="Permalink to “Client-Side Routing”">​</a></h2><p>There are many libraries available:</p><ul><li><a href="./React_Router.html">React Router</a></li></ul><h2 id="concurrent-features" tabindex="-1">Concurrent Features <a class="header-anchor" href="#concurrent-features" aria-label="Permalink to “Concurrent Features”">​</a></h2><p>Concurrent React can work on multiple tasks at a time, and switch between them according to priority</p><ul><li>Can partially render a tree without committing the result</li><li>Does not block the main thread</li></ul><p>Name transitions: <code>async rendering</code> to <code>concurrent React</code> to <code>Concurrent mode</code> to <code>Concurrent features</code></p><ul><li>We need to use <code>ReactDOM.createRoot</code> instead of <code>ReactDOM.render</code> (deprecated in <code>v18</code>) to enable current mode</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">react</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> ReactDOM</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">react-dom/client</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> root</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> ReactDOM</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createRoot</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">document</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">root</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">React.StrictMode</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">React.StrictMode</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><h3 id="suspense" tabindex="-1">Suspense <a class="header-anchor" href="#suspense" aria-label="Permalink to “Suspense”">​</a></h3><p><code>Suspense</code> suspends things until they are ready</p><p><code>&lt;Suspense&gt;</code> lets you display a fallback until its children have finished loading</p><ul><li><p>Initially was used for lazy loading</p></li><li><p>The lazy component should then be rendered inside a <code>Suspense</code> component, which allows us to show some fallback content (such as a loading indicator) while we&#39;re waiting for the lazy component to load</p></li></ul><p><em>Example:</em></p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Suspense</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">react</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> OtherComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">lazy</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">./OtherComponent</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Suspense</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> fallback</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Loading...</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">OtherComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Suspense</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p>Displaying a fallback while content is loading:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Suspense</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> use</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">react</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Albums</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> artistId</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> })</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // fetchData is a function that fetches data from an API and returns a promise</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> albums</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> use</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">artistId</span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">/albums</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">albums</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">album</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">album</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&gt;{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">album</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      ))}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> ArtistPage</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> artist</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> })</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">artist</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Suspense</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> fallback</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Loading albums...</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Albums</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> artistId</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">artist</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Suspense</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p>::: note NOTE</p><p>By default, the whole tree inside Suspense is treated as a single unit. For example, even if only one of these components suspends waiting for some data, all of them together will be replaced by the loading indicator:</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Suspense</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> fallback</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Loading</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Biography</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Panel</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Albums</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Panel</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Suspense</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span></code></pre></div><ul><li>All components inside the Suspense boundary will be hidden until all of them are ready</li></ul><p>:::</p><h3 id="code-splitting" tabindex="-1">Code-Splitting <a class="header-anchor" href="#code-splitting" aria-label="Permalink to “Code-Splitting”">​</a></h3><p>Code-splitting is a technique to split your code into various bundles which can then be loaded on demand or in parallel</p><ul><li>Only load the code that is needed for that particular page or feature</li><li>This can significantly improve the performance of your app by reducing the bundle size that the user needs to download before they can start using your app</li></ul><h4 id="dynamic-import-syntax" tabindex="-1">Dynamic <code>import()</code> Syntax <a class="header-anchor" href="#dynamic-import-syntax" aria-label="Permalink to “Dynamic import() Syntax”">​</a></h4><p>Dynamic <code>import()</code> syntax is supported by Webpack:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">./math</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 26</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span></code></pre></div><p><strong>After:</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">./math</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">math</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">math</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 26</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">});</span></span></code></pre></div><ul><li>When Webpack comes across this syntax, it automatically starts code-splitting your app</li></ul><h4 id="react-lazy-loading" tabindex="-1">React Lazy Loading <a class="header-anchor" href="#react-lazy-loading" aria-label="Permalink to “React Lazy Loading”">​</a></h4><p><code>React.lazy</code> (React <em>v16.6</em>) function lets you render a dynamic import as a regular component</p><ul><li><code>React.lazy</code> takes a function that must call a dynamic <code>import()</code>. This must return a <code>Promise</code> which resolves to a module with a <strong><code>default</code> export containing a React component.</strong></li></ul><p><strong>Before:</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> OtherComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">./OtherComponent</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div><p><strong>After:</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> OtherComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">lazy</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">./OtherComponent</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span></code></pre></div><ul><li>Lazy loading named exports:</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> DetailPage</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">lazy</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">./OtherComponent</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">    default</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">NamedComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  })),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><ul><li>Before React <em>v16.6</em> we used <a href="https://github.com/jamiebuilds/react-loadable" target="_blank" rel="noreferrer"><code>react-loadable</code></a>: Recommended for server rendered apps</li></ul><div class="tip custom-block"><p class="custom-block-title">NAMED EXPORTS</p><p><code>React.lazy</code> currently <strong>only supports default exports</strong></p></div><h4 id="route-based-code-splitting" tabindex="-1">Route Based Code-Splitting <a class="header-anchor" href="#route-based-code-splitting" aria-label="Permalink to “Route Based Code-Splitting”">​</a></h4><p>Code splitting based on the routes the user visits:</p><p><em>Example:</em> Using <a href="./React_Router.html">React Router</a></p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Suspense</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> lazy</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">react</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> BrowserRouter</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Router</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Routes</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Route</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">react-router-dom</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> Home</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> lazy</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">./routes/Home</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> About</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> lazy</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">./routes/About</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> App</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Router</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Suspense</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> fallback</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Loading...</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Routes</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Route</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> element</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Home</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Route</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">/about</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> element</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">About</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Routes</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Suspense</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Router</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><h2 id="react-server-components" tabindex="-1">React Server Components <a class="header-anchor" href="#react-server-components" aria-label="Permalink to “React Server Components”">​</a></h2><p>Server components are completely rendered on the server and do not require client-side JavaScript to render. In addition, server components allow developers to keep some logic on the server and only send the result of that logic to the client. This reduces the bundle size sent to the client and improves client-side rendering performance</p><p><a href="https://beta.reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components" target="_blank" rel="noreferrer">Introducing Zero-Bundle-Size React Server Components</a></p><h2 id="deploying-react-app" tabindex="-1">Deploying React App <a class="header-anchor" href="#deploying-react-app" aria-label="Permalink to “Deploying React App”">​</a></h2><p>Run the <code>build</code> script:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> build</span></span></code></pre></div><p>The source code will be bundled for production, minified and stored by default in:</p><ul><li><code>build</code> if you are using CRA</li><li><code>dist</code> if you are using <code>vite.js</code></li></ul><h2 id="security" tabindex="-1">Security <a class="header-anchor" href="#security" aria-label="Permalink to “Security”">​</a></h2><p>React provides the <code>dangerouslySetInnerHTML</code> property to skip XSS protection and render anything directly</p><ul><li><p>Avoid using it as it may cause <a href="./../../../Concepts/Application_Security/Cross_Site_Scripting.html">XSS</a></p></li><li><p>Add a layer of security with <a href="https://github.com/cure53/DOMPurify" target="_blank" rel="noreferrer">DOMPurify</a></p></li><li><p>To convert Markdown to HTML use <a href="https://github.com/markedjs/marked" target="_blank" rel="noreferrer">markedjs/marked</a></p></li></ul><p><em>Example:</em></p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> DOMPurify</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">dompurify</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> App</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">lorem &lt;b&gt;ipsum&lt;/b&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;{</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> dangerouslySetInnerHTML</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{{</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> __html</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> dangerouslySetInnerHTML</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{{</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> __html</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> DOMPurify</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">sanitize</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    &lt;/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// lorem &lt;b&gt;ipsum&lt;/b&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// lorem ipsum</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// lorem ipsum</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div><h2 id="versions" tabindex="-1">Versions <a class="header-anchor" href="#versions" aria-label="Permalink to “Versions”">​</a></h2><ol><li><p>React <code>v18</code>:</p><ul><li><p>March 29, 2022</p></li><li><p><code>ReactDOM.render</code> is deprecated</p></li><li><p>Automatic batching</p></li><li><p>New Hooks:</p><ul><li><a href="#usedeferredvalue-hook"><code>useDeferredValue</code></a></li><li><a href="#usetransition-hook"><code>useTransition</code></a></li><li><a href="#useid-hook"><code>useId</code></a></li><li><code>usesyncexternalstore</code></li><li><code>useinsertioneffect</code></li></ul></li><li><p>Streaming SSR with <a href="#suspense">Suspense</a></p></li><li><p>Concurrent rendering: A behind-the-scenes</p></li></ul></li><li><p>React <code>v17</code>:</p><ul><li><p>October 20, 2020</p></li><li><p>React import is not required</p></li><li><p>New JSX transform:</p><ul><li><p>Old transformation</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">react</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Hello World!</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Transformed code</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">react</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">h1</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello World!</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>New transformation</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Hello World!</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Transformed code</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> jsx</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> _jsx</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">react/jsx-runtime</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> _jsx</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">h1</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> children</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello World!</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li></ul></li><li><p>React will no longer attach event handlers at the <code>document</code> level. Instead, it will attach them to the root DOM container into which your React tree is rendered</p></li></ul></li><li><p>React <code>v16</code>:</p><ul><li>Fibre</li><li>React <code>16.3</code>: <ul><li><p>Marked for depreciation <code>UNSAFE_componentWillMount</code>, <code>UNSAFE_componentWillReceiveProps</code>, <code>UNSAFE_componentWillUpdate</code></p></li><li><p><a href="#context-api"><code>React.createContext</code></a></p></li><li><p><a href="#creating-refs"><code>React.createRef</code></a></p></li></ul></li></ul></li><li><p>React <code>v15</code></p></li><li><p>React <code>v0.14</code></p></li><li><p>React <code>v0.13</code></p></li><li><p>React <code>v0.12</code></p><ul><li>Mixins (deprecated)</li></ul></li></ol><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to “References”">​</a></h2><ul><li><p><a href="https://overreacted.io/react-as-a-ui-runtime/" target="_blank" rel="noreferrer">React as a UI Runtime</a></p></li><li><p><a href="https://overreacted.io/writing-resilient-components/#writing-resilient-components" target="_blank" rel="noreferrer">Writing Resilient Components</a></p></li><li><p><a href="https://overreacted.io/a-complete-guide-to-useeffect/" target="_blank" rel="noreferrer">A Complete Guide to useEffect</a></p></li><li><p><a href="https://overreacted.io/how-are-function-components-different-from-classes/" target="_blank" rel="noreferrer">How Are Function Components Different from Classes?</a></p></li><li><p><a href="https://www.reactiflux.com/" target="_blank" rel="noreferrer">Reactiflux - React community</a></p></li><li><p><a href="https://github.com/enaqx/awesome-react" target="_blank" rel="noreferrer">Awesome React</a></p></li><li><p><a href="https://github.com/brillout/awesome-react-components" target="_blank" rel="noreferrer">Awesome React Components Collection</a></p></li><li><p><a href="https://reactpatterns.com/" target="_blank" rel="noreferrer">React patterns</a></p></li><li><p><a href="https://devhints.io/react" target="_blank" rel="noreferrer">React cheat-sheet</a></p></li><li><p><a href="https://github.com/typescript-cheatsheets/react" target="_blank" rel="noreferrer">React+TypeScript Cheatsheets</a></p></li><li><p><a href="https://wattenberger.com/blog/react-hooks" target="_blank" rel="noreferrer">React hooks explained</a></p></li><li><p><a href="https://hero35.com/topic/react" target="_blank" rel="noreferrer">Hero35</a></p></li><li><p><a href="https://github.com/tiaanduplessis/awesome-react-talks" target="_blank" rel="noreferrer">awesome-react-talks</a></p></li><li><p><a href="https://github.com/markerikson/react-redux-links" target="_blank" rel="noreferrer">react-redux-links</a></p></li><li><p><a href="https://zapier.com/engineering/react-js-tutorial-guide-gotchas/" target="_blank" rel="noreferrer">Very old React tutorial</a></p></li></ul><h2 id="libraries" tabindex="-1">Libraries <a class="header-anchor" href="#libraries" aria-label="Permalink to “Libraries”">​</a></h2><ol><li><p>Icons:</p><ul><li><a href="https://react-icons.netlify.com" target="_blank" rel="noreferrer">react-icons</a>: collection of different SVG icons</li></ul></li><li><p>CSS Animations</p><ul><li><p><a href="https://github.com/reactjs/react-transition-group/tree/v1-stable" target="_blank" rel="noreferrer">react-transition-group</a></p><ul><li>Basic animation</li><li>14.7kb (mini)</li></ul></li><li><p><a href="https://github.com/pmndrs/react-spring" target="_blank" rel="noreferrer">react-spring</a></p><ul><li>Ease of use</li><li>27kb (mini)</li></ul></li><li><p><a href="https://github.com/chenglou/react-motion" target="_blank" rel="noreferrer">react-motion</a></p><ul><li>Ease of use</li><li>90kb (mini)</li></ul></li><li><p><a href="https://github.com/framer/motion" target="_blank" rel="noreferrer">framer-motion</a></p><ul><li>Ease of use</li><li>20kb (mini)</li></ul></li><li><p><a href="https://github.com/sghall/react-move" target="_blank" rel="noreferrer">react-move</a></p><ul><li>Ease of use</li><li>12.7kb</li></ul></li></ul></li><li><p>Multi Select Input:</p><ul><li><a href="https://github.com/jedwatson/react-select" target="_blank" rel="noreferrer">react-select</a></li></ul></li><li><p>Performance:</p><ul><li><p><a href="https://github.com/welldone-software/why-did-you-render" target="_blank" rel="noreferrer">why-did-you-render</a></p></li><li><p><a href="https://engineering.musefind.com/how-to-benchmark-react-components-the-quick-and-dirty-guide-f595baf1014c" target="_blank" rel="noreferrer">Benchmark React Components</a></p></li></ul></li></ol>`,507)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
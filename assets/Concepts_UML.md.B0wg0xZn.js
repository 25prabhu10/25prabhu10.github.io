import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"Unified Modelling Language (UML)","description":"Unified Modelling Language (UML) is a general-purpose, developmental modelling language","frontmatter":{"title":"Unified Modelling Language (UML)","description":"Unified Modelling Language (UML) is a general-purpose, developmental modelling language"},"headers":[],"relativePath":"Concepts/UML.md","filePath":"Concepts/UML.md","lastUpdated":1756574703000}`);var a={name:`Concepts/UML.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="unified-modelling-language-uml" tabindex="-1">Unified Modelling Language (UML) <a class="header-anchor" href="#unified-modelling-language-uml" aria-label="Permalink to “Unified Modelling Language (UML)”">​</a></h1><p>Standardized notation for diagrams to visualize object-oriented systems</p><ul><li>UML is a way to visualize a software program using diagrams</li></ul><p>Below are the types of UML diagrams:</p><ol><li><p><a href="#class-diagram">Class Diagram</a>: Describes the structure of a system by showing the system&#39;s classes, their attributes, and the relationships between the classes</p><ul><li>Name</li><li>Attributes</li><li>behaviours</li></ul></li><li><p>Structural diagrams:</p><ul><li>Class diagram</li><li>Component diagram</li><li>Deployment diagram</li><li>Object diagram</li><li>Package diagram</li><li>Profile diagram</li></ul></li><li><p>Behavioural diagrams:</p><ul><li>Use case diagram</li><li>Activity diagram</li><li>State machine diagram</li><li>Sequence diagram</li><li>Communication diagram</li><li>Interaction overview diagram</li><li>Timing diagram</li></ul></li></ol><h3 id="class-diagram" tabindex="-1">Class Diagram <a class="header-anchor" href="#class-diagram" aria-label="Permalink to “Class Diagram”">​</a></h3><p><a href="https://developer.ibm.com/articles/the-class-diagram/" target="_blank" rel="noreferrer">Class diagrams</a> are the most common type of UML diagram</p><p>To represent class members, such as attributes and methods, and additional information about them like constructors</p><ol><li><p><strong>Class Name</strong>: At the top of the box</p></li><li><p><strong>Attributes</strong>: Below the class name</p><ul><li>Attribute type is after the colon <code>:</code> (e.g., <code>name: string</code>)</li></ul></li><li><p><strong>Operations</strong>: Below the attributes</p><ul><li>Return type is after the colon <code>:</code> (e.g., <code>void</code>)</li><li>If method returns a pointer to another object, <code>*</code> is used after the return type (e.g., <code>-op1(in int) : Class5*</code>)</li></ul></li><li><p><strong>Access Modifiers</strong>: Before the attribute or method name</p></li></ol><p><em>Example:</em> A Dog class:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  private</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  private</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> age</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Bark</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Woof Woof!</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Act</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> command</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // Code to act based on command</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li>Class Name: Dog</li><li>Attributes: name, age</li><li>Methods: Bark, Act</li></ul><p>UML Diagram:</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>+--------------------------+</span></span>
<span class="line"><span>| Dog                      | &lt;--- Class Name</span></span>
<span class="line"><span>+--------------------------+</span></span>
<span class="line"><span>| - name: string           | &lt;--- Attributes</span></span>
<span class="line"><span>| - age: int               |</span></span>
<span class="line"><span>+--------------------------+</span></span>
<span class="line"><span>| + Bark() : void          | &lt;--- Operations</span></span>
<span class="line"><span>| + Act(c : string) : bool |</span></span>
<span class="line"><span>+--------------------------+</span></span></code></pre></div><p>Class can be represented with or without signatures (data types)</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>+----------------+</span></span>
<span class="line"><span>| Dog            |</span></span>
<span class="line"><span>+----------------+</span></span>
<span class="line"><span>| - name         | &lt;-- Class without signatures</span></span>
<span class="line"><span>| - age          |</span></span>
<span class="line"><span>+----------------+</span></span>
<span class="line"><span>| + Bark()       |</span></span>
<span class="line"><span>| + Act()        |</span></span>
<span class="line"><span>+----------------+</span></span></code></pre></div><ul><li><p><strong>Visibility</strong>: Access modifiers (visibility) of a class member</p><table tabindex="0"><thead><tr><th>Mark</th><th>Visibility type</th></tr></thead><tbody><tr><td><code>+</code></td><td>Public</td></tr><tr><td><code>-</code></td><td>Private</td></tr><tr><td><code>#</code></td><td>Protected</td></tr><tr><td><code>~</code></td><td>Package</td></tr></tbody></table></li><li><p><strong>Attributes</strong>: Properties of a class</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>name : attributeType = defaultValue</span></span>
<span class="line"><span></span></span>
<span class="line"><span>balance : double = 0.0</span></span></code></pre></div><ul><li><strong>Derived property</strong>: A property that is calculated from other properties</li><li>Name is prefixed by a forward slash (<code>/</code>) (e.g., <code>/fullName</code>)</li></ul></li><li><p><strong>Operations</strong>: Behaviours of a class</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>name(parameterList) : returnType</span></span>
<span class="line"><span></span></span>
<span class="line"><span>deposit(amount : double) : void</span></span></code></pre></div><p>Parameter direction (not necessary):</p><ul><li><p><strong>In parameter</strong>: Input parameter</p><ul><li>Parameter is passed into the method</li></ul></li><li><p><strong>Out parameter</strong>: Output parameter</p><ul><li>Parameter is returned from the method</li></ul></li><li><p><strong>InOut parameter</strong>: Input/output parameter</p><ul><li>Parameter is passed into the method and possibly modified and is returned back</li></ul></li></ul><p><em>Example:</em></p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>+-------------------------------------+</span></span>
<span class="line"><span>| Calculator                          |</span></span>
<span class="line"><span>+-------------------------------------+</span></span>
<span class="line"><span>| + Add(in a : int, in b : int) : int |</span></span>
<span class="line"><span>| + Subtract(inout a : int) : int     |</span></span>
<span class="line"><span>| + Total(out total) : int            |</span></span>
<span class="line"><span>+-------------------------------------+</span></span></code></pre></div></li></ul><h4 id="perspectives-of-class-diagram" tabindex="-1">Perspectives of Class Diagram <a class="header-anchor" href="#perspectives-of-class-diagram" aria-label="Permalink to “Perspectives of Class Diagram”">​</a></h4><p>The class diagram can be viewed from three different perspectives:</p><ol><li><p><strong>Conceptual Perspective</strong>: Describes the concepts in the system</p><ul><li>Focuses on the concepts in the system and their relationships</li><li>Designing Domain Model</li></ul></li><li><p><strong>Specification Perspective</strong>: Describes the specifications of the system</p><ul><li>Focuses on the specifications of the system and the constraints on the system</li><li>Analysing the requirements</li></ul></li><li><p><strong>Implementation Perspective</strong>: Describes the implementation of the system</p><ul><li>Focuses on the implementation of the system and the details of the system</li><li>Designing the system</li></ul></li></ol><p>The choice of perspective depends how far along the development process is</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>+-------------------------+</span></span>
<span class="line"><span>| Class Name              | &lt;--- Conceptual Perspective</span></span>
<span class="line"><span>+-------------------------+</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>+-------------------------+</span></span>
<span class="line"><span>| Class Name              | &lt;--- Specification Perspective</span></span>
<span class="line"><span>|-------------------------|</span></span>
<span class="line"><span>| + attribute : type      |</span></span>
<span class="line"><span>|-------------------------|</span></span>
<span class="line"><span>| + operation() : type    |</span></span>
<span class="line"><span>+-------------------------+</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>+-----------------------------+</span></span>
<span class="line"><span>| Class Name                  | &lt;--- Implementation Perspective</span></span>
<span class="line"><span>|-----------------------------|</span></span>
<span class="line"><span>| - ex : Expression = null    |</span></span>
<span class="line"><span>|-----------------------------|</span></span>
<span class="line"><span>| + operation() : type        |</span></span>
<span class="line"><span>| + getFormula() : Expression |</span></span>
<span class="line"><span>+-----------------------------+</span></span></code></pre></div><h4 id="relationships" tabindex="-1">Relationships <a class="header-anchor" href="#relationships" aria-label="Permalink to “Relationships”">​</a></h4><p>A relationship between classes</p><h5 id="multiplicity" tabindex="-1">Multiplicity <a class="header-anchor" href="#multiplicity" aria-label="Permalink to “Multiplicity”">​</a></h5><p>The number of instances of one class related to one instance of the other class</p><table tabindex="0"><thead><tr><th>Indicator</th><th>Meaning</th></tr></thead><tbody><tr><td><code>0..1</code></td><td>Zero or one</td></tr><tr><td><code>1</code></td><td>One only</td></tr><tr><td><code>0..</code></td><td>Zero or more</td></tr><tr><td></td><td>Zero or more</td></tr><tr><td><code>1..*</code></td><td>One or more</td></tr><tr><td><code>3</code></td><td>Three only</td></tr><tr><td><code>0..5</code></td><td>Zero to five</td></tr></tbody></table><h5 id="association" tabindex="-1">Association <a class="header-anchor" href="#association" aria-label="Permalink to “Association”">​</a></h5><p>When you model a system, certain objects will be related to each other, and these relationships themselves need to be modelled for clarity</p><p>There are five types of associations:</p><ol><li><p><strong>Bi-directional Association</strong>: Represented by a solid line connecting two classes</p><ul><li><strong>Association Name</strong>: Describes the relationship between the classes</li><li><strong>Association <a href="#multiplicity">Multiplicity</a></strong>: The number of instances of one class related to one instance of the other class</li></ul><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>       0..*                 assignedPlane</span></span>
<span class="line"><span>Flight ---------------------------------- Plane</span></span>
<span class="line"><span>       assignedFlights               0..1</span></span></code></pre></div><ul><li>Flight has 0 or more assigned planes</li><li>Plane has 0 or 1 assigned flights</li></ul></li><li><p><strong>Uni-directional Association</strong>: Two classes are related, but only once class knows that the relationship exists</p><ul><li><a href="#dependency">Dependency</a> between two classes</li></ul><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>                               overdrawnAccounts</span></span>
<span class="line"><span>OverdrawnAccountsReport -----------------------&gt; BankAccount</span></span>
<span class="line"><span>                                            0..*</span></span></code></pre></div><ul><li><code>OverdrawnAccountsReport</code> knows about <code>BankAccount</code>, but <code>BankAccount</code> does not know about <code>OverdrawnAccountsReport</code></li><li><code>OverdrawnAccountsReport</code> is dependent on <code>BankAccount</code></li></ul></li><li><p><strong>Reflexive Association</strong>: When a class is related to itself (a binary association between a class and itself)</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>+-------------------------+</span></span>
<span class="line"><span>| Employee                |</span></span>
<span class="line"><span>|-------------------------| 1</span></span>
<span class="line"><span>| firstName : string      |------------+</span></span>
<span class="line"><span>| lastName : string       | - manager  |</span></span>
<span class="line"><span>|-------------------------|            |</span></span>
<span class="line"><span>+-------------------------+            |</span></span>
<span class="line"><span>                    | 0..*             |</span></span>
<span class="line"><span>          - manages |                  |</span></span>
<span class="line"><span>                    +------------------+</span></span></code></pre></div><ul><li>Employee can be a manager of other employees</li><li>Because the relationship role of &quot;manages&quot; has a multiplicity of <code>0..*</code>, an employee might not have any other employees to manage</li></ul></li><li><p><strong>Binary and Ternary Association</strong>: When a class is related to two or three classes</p><ul><li>Represented as a diamond connected with a solid line to each of the associated classes</li></ul></li><li><p><strong>N-ary Association</strong>: When a class is related to multiple classes</p></li></ol><ul><li>An association can be named, and the ends of an association can be adorned with role names, aggregation indicators, multiplicity, visibility, navigability, and other properties</li><li>Bi-directional relationship between classes</li></ul><p>Types of Associations:</p><ol><li><p><strong>Simple Association</strong>:</p></li><li><p><strong>Shared Association</strong>:</p></li><li><p><strong>Composite Association</strong>:</p><ul><li>A stronger form of aggregation where the part cannot exist without the whole</li></ul></li></ol><p><em>Example:</em></p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>A ------ B</span></span>
<span class="line"><span></span></span>
<span class="line"><span>A is associated with B and B is associated with A</span></span></code></pre></div><h5 id="dependency" tabindex="-1">Dependency <a class="header-anchor" href="#dependency" aria-label="Permalink to “Dependency”">​</a></h5><p>A relationship where one class depends on another class</p><ul><li>Unidirectional relationship</li><li>A dashed line with an open arrow pointing to the class it depends on <code>A -----&gt; B</code> (A depends on B)</li></ul><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>A ----&gt; B</span></span>
<span class="line"><span></span></span>
<span class="line"><span>A depends on B</span></span></code></pre></div><h5 id="aggregation" tabindex="-1">Aggregation <a class="header-anchor" href="#aggregation" aria-label="Permalink to “Aggregation”">​</a></h5><p>A special form of association where one class is a part of another class</p><ul><li>A variation of the &quot;has-a&quot; relationship</li><li>Aggregation is more specific than <a href="#association">association</a></li><li>An aggregation may not involve more than two class (it must be a binary association)</li></ul><p>It is an association that represents a part-whole or part-of relationship</p><ul><li>Represented by a hollow diamond at the class containing the part <code>A &lt;&gt;---- B</code> (A has a B)</li></ul><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>A professor &#39;has a&#39; class to teach</span></span>
<span class="line"><span></span></span>
<span class="line"><span>+-------------------------+                  +-------------------------+</span></span>
<span class="line"><span>| Professor               |                  | Class                   |</span></span>
<span class="line"><span>|-------------------------|   1         1..* |-------------------------|</span></span>
<span class="line"><span>| + listOfStudents : list | &lt;&gt;-------------- | + Stidents : list       |</span></span>
<span class="line"><span>|-------------------------|                  |-------------------------|</span></span>
<span class="line"><span>|                         |                  |                         |</span></span>
<span class="line"><span>+-------------------------+                  +-------------------------+</span></span></code></pre></div><h5 id="composition" tabindex="-1">Composition <a class="header-anchor" href="#composition" aria-label="Permalink to “Composition”">​</a></h5><p>A composite aggregation (composition) is a strong form of <a href="#aggregation">aggregation</a> where the aggregate controls the life-cycle of the elements it aggregates</p><ul><li>A <em>filled</em> diamond at the class containing the part <code>A &lt;*&gt;---- B</code> (A has a B)</li></ul><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>Composition: A Car has exactly one Carburetor, and a Carburetor is part of one Car</span></span>
<span class="line"><span>- Carburetor cannot exist as a separate parts</span></span>
<span class="line"><span>+-------------------------+                  +-------------------------+</span></span>
<span class="line"><span>| Car                     | &lt;*&gt;------------&gt; | Carburetor              |</span></span>
<span class="line"><span>+-------------------------+   1..1     1..1  +-------------------------+</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Aggregation: A Pond has zero or more Ducks, and a Duck has at most one Pond (at a time)</span></span>
<span class="line"><span>- Ducks can exist separately from the Pond</span></span>
<span class="line"><span>- When we destroy a Pond, we usually don&#39;t destroy the Ducks</span></span>
<span class="line"><span>+-------------------------+                  +-------------------------+</span></span>
<span class="line"><span>| Pond                    | &lt;&gt;-------------&gt; | Duck                    |</span></span>
<span class="line"><span>+-------------------------+   0..1     0..*  +-------------------------+</span></span></code></pre></div><h5 id="inheritance" tabindex="-1">Inheritance <a class="header-anchor" href="#inheritance" aria-label="Permalink to “Inheritance”">​</a></h5><p>A relationship between a superclass and a subclass</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>(subclass) ----|&gt; (superclass)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&quot;an oak is a type of tree&quot;</span></span>
<span class="line"><span>oak ----|&gt; tree</span></span></code></pre></div><p><em>Example</em>:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  private</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Bark</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Woof Woof!</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>+-------------------------+</span></span>
<span class="line"><span>| Animal                  |</span></span>
<span class="line"><span>+-------------------------+</span></span>
<span class="line"><span>            ^</span></span>
<span class="line"><span>            |</span></span>
<span class="line"><span>            |</span></span>
<span class="line"><span>+-------------------------+</span></span>
<span class="line"><span>| Dog                     |</span></span>
<span class="line"><span>|-------------------------|</span></span>
<span class="line"><span>| - name : string         |</span></span>
<span class="line"><span>|-------------------------|</span></span>
<span class="line"><span>| + Bark() : void         |</span></span>
<span class="line"><span>+-------------------------+</span></span></code></pre></div><h5 id="interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#interfaces" aria-label="Permalink to “Interfaces”">​</a></h5><p>A contract that specifies the behaviour of a class</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>                    +-------------------------+</span></span>
<span class="line"><span>                    |       &lt;&lt;interface&gt;&gt;     |</span></span>
<span class="line"><span>                    |         Person          |</span></span>
<span class="line"><span>                    |-------------------------|</span></span>
<span class="line"><span>                    | + name : string         |</span></span>
<span class="line"><span>                    | + age : int             |</span></span>
<span class="line"><span>                    |-------------------------|</span></span>
<span class="line"><span>                    | + walk() : void         |</span></span>
<span class="line"><span>                    +-------------------------+</span></span>
<span class="line"><span>                      ^                  ^</span></span>
<span class="line"><span>                      |                  |</span></span>
<span class="line"><span>                      |                  |</span></span>
<span class="line"><span>+-------------------------+             +-------------------------+</span></span>
<span class="line"><span>| Professor               |             | Student                 |</span></span>
<span class="line"><span>|-------------------------|             |-------------------------|</span></span>
<span class="line"><span>| + salary : double       |             | + major : string        |</span></span>
<span class="line"><span>|-------------------------|             |-------------------------|</span></span>
<span class="line"><span>+-------------------------+             +-------------------------+</span></span></code></pre></div><h4 id="packages" tabindex="-1">Packages <a class="header-anchor" href="#packages" aria-label="Permalink to “Packages”">​</a></h4><p>A package is a collection of logically related UML elements</p><h3 id="designing-with-uml" tabindex="-1">Designing with UML <a class="header-anchor" href="#designing-with-uml" aria-label="Permalink to “Designing with UML”">​</a></h3><p>5-Step approach:</p><ol><li>Gathering requirements to figure out what our application needs to do</li><li>Describe the application. Build a narrative in plain, conversational language for how people will use it</li><li>Identifying the most important objects, which is the starting point for identifying actual classes</li><li>Describe the interactions between them, understanding each object&#39;s responsibilities, the behaviours they need to have, and when they interact with other objects</li><li>And finally, create a class diagram, which serves as the main output from the five-step process</li></ol><h3 id="uml-tools" tabindex="-1">UML Tools <a class="header-anchor" href="#uml-tools" aria-label="Permalink to “UML Tools”">​</a></h3><p>Things to consider:</p><ul><li>Commercial or open source</li><li>Support platforms</li><li>Diagram drawing capabilities</li><li>Code generation capabilities</li><li>Collaboration features</li></ul><p>Popular UML tools:</p><ul><li><a href="https://www.lucidchart.com/" target="_blank" rel="noreferrer">Lucidchart</a></li><li><a href="https://creately.com/" target="_blank" rel="noreferrer">Creately</a></li><li><a href="https://www.visual-paradigm.com/" target="_blank" rel="noreferrer">Visual Paradigm</a></li><li><a href="https://staruml.io/" target="_blank" rel="noreferrer">StarUML</a></li><li><a href="https://app.diagrams.net/" target="_blank" rel="noreferrer">Draw.io</a></li><li><a href="https://www.gliffy.com/" target="_blank" rel="noreferrer">Gliffy</a></li><li>Microsoft Visio</li></ul><h2 id="unified-modelling-language-uml-1" tabindex="-1">Unified Modelling Language (UML) <a class="header-anchor" href="#unified-modelling-language-uml-1" aria-label="Permalink to “Unified Modelling Language (UML)”">​</a></h2><p>UML is a general-purpose, developmental modelling language that is intended to provide a standard way to visualize the design of a system</p><h2 id="model" tabindex="-1">Model <a class="header-anchor" href="#model" aria-label="Permalink to “Model”">​</a></h2><p>Model is a partial abstract representation of a real-world system</p><ul><li>An inexpensive way to analyse, communicate, test, and document our understanding of the system</li></ul><p>Types of Models:</p><ol><li><p>Computational</p><ul><li>Computer simulations representing time-varying behaviour of a system</li></ul></li><li><p>Analytical:</p><ul><li>Mathematical models of relationships among variables in a system</li></ul></li><li><p>Non-Analytical/descriptive:</p><ul><li><p>Describe components and their relationships in a system</p></li><li><p>Models in Software can be categorized into 2 groups:</p><ol><li><p>Data Models: like Entity Relationship models, etc.</p></li><li><p>Application Models: UML models, SysML models, BPMN models, etc.</p></li></ol></li></ul></li></ol><h2 id="types-of-uml" tabindex="-1">Types of UML <a class="header-anchor" href="#types-of-uml" aria-label="Permalink to “Types of UML”">​</a></h2><ol><li><p><em>Structure</em>: Represents static view of the system and its components</p><ol><li>Class diagram</li><li>Component diagram</li><li>Object diagram</li><li>Composite structure diagram</li><li>Package diagram</li><li>Deployment diagram</li></ol></li><li><p><em>Behaviour</em>: Represents dynamic view of the system and its components</p><ol><li><p>Use case diagram:</p><ul><li><p>Capture high-level functionality of a system using notations for actors, use cases, and relationships among them</p></li><li><p>Often drawn by business analysts to depict the summary all use cases in a system</p></li><li><p>Key elements:</p><ul><li><p>Use cases:</p><ul><li>Notation is a bubble that carries use case title</li></ul></li><li><p>Systems</p></li><li><p>Actors:</p><ul><li><p>A user&#39;s role with respect to the system</p></li><li><p>Maybe a human or another system</p></li><li><p><em>Primary actor</em>: whose goal is fulfilled by the use case</p></li><li><p><em>Secondary actor</em>: who is involved in the use case</p><ul><li>Often an external system</li></ul></li></ul></li><li><p>Associations</p></li></ul></li></ul></li><li><p>Activity diagram</p></li><li><p>State machine diagram</p></li><li><p>Interaction</p></li></ol></li><li><p><em>Interaction</em> (part of <em>behaviour</em>): Represents interaction, among components of the system and between system and external actors</p><ol><li>Sequence diagram</li><li>Communication diagram</li><li>Timing diagram</li><li>interaction overview diagram</li></ol></li></ol><h2 id="class-diagram-1" tabindex="-1">Class Diagram <a class="header-anchor" href="#class-diagram-1" aria-label="Permalink to “Class Diagram”">​</a></h2><ul><li>Class Name</li><li>Attributes</li><li>behaviours</li></ul><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to “References”">​</a></h2><ul><li><p><a href="https://www.omg.org/spec/UML/" target="_blank" rel="noreferrer">Unified Modelling Language (UML) specification 2.5</a></p><ul><li>Controlled by Object Management Group (OMG)</li><li>Releases: UML-1 (1997), UML-2 (2005), UML-2.5 (2015)</li></ul></li><li><p>UML Distilled by Martin Fowler</p></li><li><p>Applying UML and Patterns by Craig Larman</p></li></ul>`,82)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
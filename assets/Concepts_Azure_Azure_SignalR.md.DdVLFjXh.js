import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"Azure SignalR Service","description":"Azure SignalR Service is a fully managed real-time messaging service that allows you to add real-time functionality to your application","frontmatter":{"title":"Azure SignalR Service","description":"Azure SignalR Service is a fully managed real-time messaging service that allows you to add real-time functionality to your application","date":"2024-10-05T00:00:00.000Z","lastmod":"2024-10-09T00:00:00.000Z"},"headers":[],"relativePath":"Concepts/Azure/Azure_SignalR.md","filePath":"Concepts/Azure/Azure_SignalR.md","lastUpdated":1739650350000}`);var a={name:`Concepts/Azure/Azure_SignalR.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="azure-signalr" tabindex="-1">Azure SignalR <a class="header-anchor" href="#azure-signalr" aria-label="Permalink to “Azure SignalR”">​</a></h1><p>Azure SignalR Service is a fully managed real-time messaging service that allows you to add real-time functionality to your application</p><ul><li>It is built on ASP.NET Core SignalR</li><li>Azure SignalR Service is a fully managed service (serverless)</li><li>It is a great choice for building real-time web applications, such as chat applications, real-time dashboards, and live data visualizations</li></ul><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to “Features”">​</a></h2><ul><li><strong>Real-time messaging</strong>: Send messages to all connected clients in real-time</li><li><strong>Broadcast</strong>: Send messages to all connected clients</li><li><strong>Group messaging</strong>: Send messages to specific groups of clients</li><li><strong>Connection management</strong>: Manage client connections</li><li><strong>Authentication</strong>: Authenticate clients</li><li><strong>Authorization</strong>: Authorize clients</li><li><strong>Serverless</strong>: No need to manage servers</li></ul><p>Standard based, Native ASP.NET Core support, Broad client support, Handle large-scale client connections, and Remove the burden to self-host SignalR</p><h2 id="use-cases" tabindex="-1">Use Cases <a class="header-anchor" href="#use-cases" aria-label="Permalink to “Use Cases”">​</a></h2><ul><li><strong>Chat applications</strong>: live chat room, chat bot, on-line customer support</li><li><strong>Real-time dashboards</strong>: company dashboards, financial market data, sales update, and IoT monitoring</li><li><strong>High-frequency data updates</strong>: games, voting, auctions</li><li><strong>Real-time location on maps</strong>: logistics tracking, delivery tracking, and ride-sharing apps</li></ul><h2 id="asp-net-core-signalr" tabindex="-1">ASP.NET Core SignalR <a class="header-anchor" href="#asp-net-core-signalr" aria-label="Permalink to “ASP.NET Core SignalR”">​</a></h2><p>ASP.NET Core SignalR is an open-source library that simplifies adding real-time web functionality to your applications</p><ul><li>It provides an API for creating server-to-client remote procedure calls (RPCs)</li><li>RPCs invoke functions on clients from the server-side .NET Core code</li></ul><h3 id="transports" tabindex="-1">Transports <a class="header-anchor" href="#transports" aria-label="Permalink to “Transports”">​</a></h3><p>SignalR supports multiple transports (technologies) for communication between the client and the server:</p><ul><li><strong>WebSockets</strong>: The most efficient transport for real-time web communication</li><li><strong>Server-Sent Events (SSE)</strong>: A one-way messaging channel from the server to the client</li><li><strong>Long Polling</strong>: A request-response mechanism where the client sends a request to the server and waits for a response</li></ul><p>The order of preference for the transports is WebSockets, Server-Sent Events, and Long Polling</p><ul><li>The order in which the transports are listed here signifies their graceful fallback order</li></ul><h3 id="server" tabindex="-1">Server <a class="header-anchor" href="#server" aria-label="Permalink to “Server”">​</a></h3><p>The server is responsible for exposing a SignalR endpoint and managing client connections</p><ul><li>The endpoints map to a <a href="#hub">SignalR hub</a></li><li>Expose hub methods that clients can call, and also events that clients can subscribe to (these are called <a href="./.html">RPC</a>)</li></ul><h4 id="hub" tabindex="-1">Hub <a class="header-anchor" href="#hub" aria-label="Permalink to “Hub”">​</a></h4><p>A hub is a high-level pipeline that allows clients and servers to call methods on each other</p><ul><li>Communication between clients and servers is done through the hub</li><li>Think of a hub as a proxy between all connected clients and the server</li></ul><h4 id="protocol" tabindex="-1">Protocol <a class="header-anchor" href="#protocol" aria-label="Permalink to “Protocol”">​</a></h4><p>SignalR Protocol is a protocol for a two-way communication between the client and the server</p><p>SignalR provides two built-in hub protocols:</p><ul><li><strong>JSON</strong>: A text-based protocol that uses JSON to serialize data</li><li><strong>MessagePack</strong>: A binary protocol that uses <em>MessagePack</em> to serialize data (more efficient than JSON)</li></ul><h4 id="user" tabindex="-1">User <a class="header-anchor" href="#user" aria-label="Permalink to “User”">​</a></h4><p>SignalR allows you to associate a user with a connection</p><ul><li>User can act as an individual user or be part of a group</li><li>Messages can be sent to a specific user or a group of users</li><li>A single user can connect from multiple devices</li></ul><h4 id="group" tabindex="-1">Group <a class="header-anchor" href="#group" aria-label="Permalink to “Group”">​</a></h4><p>A group is a collection of connections that can be managed as a single unit</p><ul><li>Group has a specified name, which acts as its unique identifier</li></ul><h3 id="client" tabindex="-1">Client <a class="header-anchor" href="#client" aria-label="Permalink to “Client”">​</a></h3><p>The client is responsible for establishing a connection with the server and sending and receiving messages</p><ul><li>Use <code>HubConnection</code> to establish a connection with the server</li></ul><h2 id="azure-web-pubsub" tabindex="-1">Azure Web PubSub <a class="header-anchor" href="#azure-web-pubsub" aria-label="Permalink to “Azure Web PubSub”">​</a></h2><p>Azure Web PubSub is a fully managed service that enables you to build real-time web applications with WebSockets and the publish-subscribe pattern</p><ul><li>Build real-time applications using WebSockets and the publish-subscribe pattern</li><li>Publish updates between server and all connected clients (broadcast)</li><li>Messaging between server and a group of clients</li><li>Messaging between clients that belong to a group</li></ul><p>Unit measures the capability of the service</p><ul><li>1 unit = 1000 concurrent connections</li><li>PubSub Service can have 1, 2, 5, 10, 20, 50, or 100 units</li></ul><p>Free, Standard, and Premium tiers</p><ul><li>Outbound traffic from service billed for usage beyond the free quota (2 GB/day/unit)</li><li>Plan for Max. 80% unit utilization before scaling up for optimal performance</li></ul>`,42)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
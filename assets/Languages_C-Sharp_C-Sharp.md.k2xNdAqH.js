import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"C Sharp","description":"C Sharp is a general-purpose, multi-paradigm programming language","frontmatter":{"title":"C Sharp","description":"C Sharp is a general-purpose, multi-paradigm programming language"},"headers":[],"relativePath":"Languages/C-Sharp/C-Sharp.md","filePath":"Languages/C-Sharp/C-Sharp.md","lastUpdated":1756574703000}`);var a={name:`Languages/C-Sharp/C-Sharp.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="c-sharp" tabindex="-1">C Sharp <a class="header-anchor" href="#c-sharp" aria-label="Permalink to “C Sharp”">​</a></h1><p>C# (C Sharp) is a general-purpose, multi-paradigm programming language encompassing:</p><ul><li>static typing (strongly-typed): variable types are explicitly declared</li><li>type-safe</li><li>lexically scoped</li><li>imperative</li><li>declarative</li><li>functional</li><li>generic</li><li>object-oriented</li><li>and component-oriented programming disciplines.</li></ul><p>C# is primarily a type-safe language, meaning that instances of types can interact only through protocols they define, thereby ensuring each type&#39;s internal consistency. For instance, C# prevents you from interacting with a string type as though it were an integer type</p><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>C# also allows parts of your code to be dynamically typed via the <a href="#dynamic-type">dynamic</a> keyword. However, C# remains a predominantly statically typed language</p></div><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to “Introduction”">​</a></h2><ul><li>Developed by <strong>Microsoft</strong></li><li><strong>Anders Hejlsberg</strong> is the lead architect of C#</li><li><strong><a href="./Dotnet_CLI.html">.NET</a></strong> is a software framework developed by Microsoft that runs primarily on Microsoft Windows</li></ul><p>Source code for a simple console application:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> HelloWorld</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Program</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> args</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello World!</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p>In C# 9 or later we can just write:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello World!</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><h3 id="compilation" tabindex="-1">Compilation <a class="header-anchor" href="#compilation" aria-label="Permalink to “Compilation”">​</a></h3><p>C# has 2-step compilation process:</p><ol><li><p>C# source code is compiled into managed code, which is represented in <strong>Intermediate Language (IL)</strong> and is stored in an <strong>assembly</strong> (a DLL or EXE file)</p><ul><li><strong>Roslyn compiler</strong> is used by <code>dotnet</code> CLI tool</li><li><em>IL</em> code statements are like assembly language instructions, which are executed by <strong>.NET&#39;s virtual machine</strong>, known as <strong>CLR (Common Language Runtime)</strong></li></ul></li><li><p>At runtime, CoreCLR (core version) loads the IL code from the assembly, the <strong>just-in-time (JIT)</strong> compiler compiles it into native CPU instructions, and then it is executed by the CPU.</p><ul><li>Benefit of this 2-step process is that the same <em>IL</em> code can run everywhere (Windows, Linux or macOS)</li><li>To create the <em>IL</em> we can use any language as source code for example, C#, F#, or Visual Basic.</li></ul></li></ol><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>You can examine and disassemble the contents of an IL assembly with Microsoft&#39;s <em>ildasm</em> tool. And with tools such as <em>ILSpy</em>, <em>dotPeek</em> (JetBrains), or <em>Reflector</em> (Red Gate), you can go further and decompile the IL to C#. Because IL is higher-level than native machine code, the decompiler can do quite a good job of reconstructing the original C#</p></div><h3 id="syntax" tabindex="-1">Syntax <a class="header-anchor" href="#syntax" aria-label="Permalink to “Syntax”">​</a></h3><ul><li>Identifiers: <code>Main</code>, <code>name</code>, ...</li><li>Keywords: <code>using</code>, <code>namespace</code>, <code>class</code>, ...</li><li>Statements: <code>int i = 10</code>, <code>if (i &gt; 5)</code>, ...</li><li>Literals (data): <code>52</code>, ...</li><li>Punctuators: <code>{,};</code>, ...</li><li>Operators: <code>+</code>, <code>*</code>, <code>==</code>, ...</li><li>Comments: <code>//</code>, <code>/* ... */</code></li></ul><h2 id="namespaces" tabindex="-1">Namespaces <a class="header-anchor" href="#namespaces" aria-label="Permalink to “Namespaces”">​</a></h2><p>Namespaces are used:</p><ul><li>To organize many classes</li><li>To declare your own namespaces, this helps you control the scope of class and method names in larger programming projects. Avoiding name clashes</li><li>In C# 10, you can use a file-scoped namespace declaration. This means that you can declare a namespace at the top of a file without enclosing the entire file in a namespace block</li></ul><p><em>Example:</em> Using namespaces</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> SampleNamespace</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> SampleClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> SampleMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">            System</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">                &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">SampleMethod inside SampleNamespace</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// In C# 10, you can use a file-scoped namespace declaration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> SampleNamespace</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> AnotherSampleClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> AnotherSampleMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">            &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">SampleMethod inside SampleNamespace</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p><em>Example:</em></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Linq</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Reflection</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> HelloCS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Program</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">        static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">            Assembly</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> assembly</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Assembly</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">GetEntryAssembly</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">assembly</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">            // loop through the assemblies that this app references</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">            foreach</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">AssemblyName</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> assembly</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">GetReferencedAssemblies</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">            {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">              // load the assembly so we can read its details</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">              Assembly</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Assembly</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Load</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">              // declare a variable to count the number of methods</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">              int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> methodCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">              // loop through all the types in the assembly</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">              foreach</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">TypeInfo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> t</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">DefinedTypes</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">              {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">                // add up the counts of methods</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">                methodCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +=</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> t</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">GetMethods</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">              }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">              // output the count of types and their methods</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">              Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">                &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">{0:N0} types with {1:N0} methods in {2} assembly.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">                arg0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">DefinedTypes</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">                arg1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> methodCount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> arg2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Output on Windows</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> types</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> with</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> methods</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Runtime</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> assembly</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">103</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> types</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> with</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">094</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> methods</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Linq</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> assembly</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">46</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> types</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> with</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 660</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> methods</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> assembly</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">.</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p><code>System.Runtime</code> assembly contains 0 types as it is special because it only contains <strong>type-forwarders</strong> rather than actual types</p></div><h3 id="top-level-statements" tabindex="-1">Top-Level Statements <a class="header-anchor" href="#top-level-statements" aria-label="Permalink to “Top-Level Statements”">​</a></h3><p>Top-level statements (C# 9.0) enable you to avoid the extra ceremony required by placing your program&#39;s entry point in a static method in a class</p><ul><li>You can write a simple console application with just a single file and a single line of code</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Program.cs</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Before</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Program</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> args</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">The answer is </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> UltimateAnswer</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> UltimateAnswer</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// C# 9.0: Top-level statement</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// No need to define a \`Program\` class or a \`Main\` method</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">The answer is </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> UltimateAnswer</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> UltimateAnswer</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li>Top-level statements are executed in the order they appear in the file</li><li>The compiler will generate the necessary boilerplate code for you</li><li>All code in a top-level statement file is considered to be inside the <code>Main</code> method</li><li>Top-level statements can <strong>only be used in one source file</strong> in your application</li><li>The compiler generates an error if you use them in more than one file</li></ul><h3 id="implicit-using-directives" tabindex="-1">Implicit <code>using</code> Directives <a class="header-anchor" href="#implicit-using-directives" aria-label="Permalink to “Implicit using Directives”">​</a></h3><p>The .NET 6 SDK also adds a set of implicit <code>global using</code> directives:</p><ul><li>A <em>global <code>using</code> directive</em> imports a namespace for your whole application instead of a single file</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// C# 10.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello World!</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><ul><li>Add <code>&lt;ImplicitUsings&gt;disable&lt;/ImplicitUsings&gt;</code> in the project file to <strong>disable app implicit used</strong> namespaces</li></ul><p>Remove an implicit imported namespace:</p><ul><li>We can remove a specific implicit <code>using</code> directive</li><li>The following entry in the project file removes <code>System</code></li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">ImplicitUsings</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">enable</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">ImplicitUsings</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">ItemGroup</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Remove</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">System.Collections</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">ItemGroup</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">&gt;</span></span></code></pre></div><h2 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-label="Permalink to “Types”">​</a></h2><ul><li>A <em>type</em> defines the structure and behaviour of any data</li><li>A <em>variable</em> is a label that refers to an instance of a specific type</li><li>A <em>literal</em> is a notation that represents a <em>fixed value</em></li></ul><p>There are 2 kinds of types in C#:</p><ol><li><p>Value Types: They store data directly</p><ul><li>Built-in Value types: <ul><li>Simple types: types such as numeric, floats, <code>bool</code>, and <code>char</code></li><li><code>enum</code> type</li><li><code>struct</code> type</li><li><code>nullable</code> value type</li><li><code>tuple</code> value type</li></ul></li></ul></li><li><p>Reference Types: They store references to their data</p><ul><li>They are also known as <em>objects</em></li><li>Built-in Reference Types: <ul><li><code>string</code> type</li><li><code>class</code>, <code>object</code> type</li><li><code>interface</code> type</li><li><code>array</code> type</li><li><code>delegate</code> type</li><li><code>dynamic</code> type</li></ul></li></ul></li></ol><p><em>Unified Type System</em>:</p><p>The fundamental building block in C# is an encapsulated unit of data and methods called a type. C# has a unified type system, where all types ultimately share a common base type and can be treated as an <code>object</code>. This means that all types, whether they represent business objects or are primitive types such as <code>numbers</code>, share the same basic functionality. For example, an instance of any type can be converted to a string by calling its <code>ToString</code> method</p><p>Naming conventions:</p><table tabindex="0"><thead><tr><th>Naming convention</th><th>Examples</th><th>Used for</th></tr></thead><tbody><tr><td>Camel case</td><td><code>cost</code>, <code>orderDetail</code></td><td>Local variables, private fields</td></tr><tr><td>Pascal case</td><td><code>String</code>, <code>Cost</code>, <code>Int32</code></td><td>Types, non-private fields, and other members like methods</td></tr></tbody></table><p>Get name of the variable using <code>nameof</code>:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 30</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">nameof</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>Reserved keywords can be used as variable name but they have to be prefixed with <code>@</code>: <code>int @int;</code>, <code>string @return;</code></p></div><h3 id="character" tabindex="-1">Character <a class="header-anchor" href="#character" aria-label="Permalink to “Character”">​</a></h3><p><code>char</code>: Used to store single character.</p><ul><li><p>Simple type</p></li><li><p>Single quotes is used</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">char</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> letter</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;"> &#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">A</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">char</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> digit</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;"> &#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div></li><li><p>Default value:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">default(string) = </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">default</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">char</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">)}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div></li><li><p>Primitive data-type</p></li></ul><h3 id="strings" tabindex="-1">Strings <a class="header-anchor" href="#strings" aria-label="Permalink to “Strings”">​</a></h3><p><code>string</code>: Used to store multiple character.</p><ul><li><p><strong>Strings are immutable</strong>. Use <code>StringBuilder</code> for mutable strings.</p></li><li><p>Not a primitive data-type</p></li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Double quotes</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> firstName</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Bob</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Escape sequences can be used while storing text in a \`string\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> fullNameWithTabSeparator</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Bob</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Smith</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// To store file paths or other verbatim strings prefix \`@\` symbol:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> filePath</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> @&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">C:\\televisions\\sony\\bravia.txt</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Concatenate</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">world</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> welcome</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello, </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div><ul><li><p>Empty string:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> emptyString</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Empty</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div></li><li><p>Default value:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">default(string) = </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">default</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">)}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div></li></ul><h4 id="mutable-string" tabindex="-1">Mutable String <a class="header-anchor" href="#mutable-string" aria-label="Permalink to “Mutable String”">​</a></h4><p>Using <code>System.Text.StringBuilder</code> we can create mutable strings. The string value can be modified.</p><ul><li>It is memory efficient</li><li>They offer better performance than string objects of type <code>System.String</code>, when heavy string manipulation is involved</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Create a StringBuilder with max string capacity of 200</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">StringBuilder</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> sb</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Optional Initial String</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Capacity: </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">sb</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">Capacity</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">; Length: </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">sb</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">Length</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// String can be modified</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">sb</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;"> &#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">P</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div><ul><li><p>Strings can be appended:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">sb</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Append</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">The quick brown fox </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">sb</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Append</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">jumps over the lazy dog.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Append line ending</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">sb</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">AppendLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Append formatted strings</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">sb</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">AppendFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">He did this {0} times.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> jumpCount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Append a set of values</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> animals</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">goats</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">cats</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">pigs</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">sb</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">AppendJoin</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> animals</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div></li><li><p>Convert to a single string:</p><ul><li><code>Convert.ToString()</code> handles <code>null</code>, while <code>object.ToString()</code> doesn&#39;t, and throws a NULL Reference exception</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">sb</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">ToString</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Convert</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">ToString</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">sb</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div></li></ul><h4 id="string-formatting" tabindex="-1">String Formatting <a class="header-anchor" href="#string-formatting" aria-label="Permalink to “String Formatting”">​</a></h4><ul><li><p>Basic formatting</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello, {0} -  {1}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> firstName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> secondName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div></li><li><p>Specifying numerical formatting and other formatting specifiers:</p><ul><li>General format: <code>{index[, alignment]:[format]}</code></li><li>Common types: N (Number), G (General), F (Fixed-point), E (Exponential), D (Decimal), P (Percent), X (Hexadecimal), C (Currency in local format)</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> val1</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1234</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">decimal</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> val2</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1234.5678m</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">{0:D}, {0:N}, {0:F}, {0:G}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> val1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">{0:E}, {0:N}, {0:F}, {0:G}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> val2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// output:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 1234, 1,234.00, 1234.00, 1234</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 1.234568E+003, 1,234.57, 1234.57, 1234,5678</span></span></code></pre></div></li><li><p>Specify precision:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Add a number after the format to specify precision</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">{0:D6}, {0:N3}, {0:F1}, {0:G3}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> val1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// output:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 001234, 1,234.000, 1234.0, 1.12E+03</span></span></code></pre></div></li><li><p>Formatting with alignment and spacing:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Format in a column of 5 chars width</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> quarters</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">{0,5} {1,5} {2,5} {3,5}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> quarters</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">],</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> quarters</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">],</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> quarters</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">],</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> quarters</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// ....1....2....3....4</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Use local to show currency</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> sales</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 100000</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 150000</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 200000</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 225000</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">{0,12:C0} {1,12:C1} {2,12:C2} {3,12:C0}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> sales</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">],</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> sales</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">],</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> sales</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">],</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> sales</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// $100,000   $150,000.0  $200,000.00   $225,000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Use international percentage</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> intlMixPct</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> .386</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> .413</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> .421</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> .457</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">{0,12:P0} {1,12:P0} {2,12:P1} {3,12:P2}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> intlMixPct</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">],</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> intlMixPct</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">],</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> intlMixPct</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">],</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> intlMixPct</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 39%  41%   42.1%   45.70%</span></span></code></pre></div></li><li><p><strong>String interpolation</strong> using <code>$</code></p></li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> welcome</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> $&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello, </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">firstName</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">This car costs </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">price</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">C2</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">, Age: </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">25</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 30</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> with {{</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">odometer</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">}} KMs</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// This car costs ₹400.00, Age: 55 with {10} KMs</span></span></code></pre></div><h4 id="string-operations" tabindex="-1">String Operations <a class="header-anchor" href="#string-operations" aria-label="Permalink to “String Operations”">​</a></h4><p><a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings" target="_blank" rel="noreferrer">Stings best practices</a>:</p><ul><li><p>Use <code>StringComparison.Ordinal</code> or <code>StringComparison.OrdinalIgnoreCase</code> for comparisons as your safe default for culture-agnostic string matching.</p></li><li><p>Use string operations that are based on <code>StringComparison.CurrentCulture</code> when you display output to the user.</p></li><li><p>Use the <code>String.Compare</code> and <code>String.CompareTo</code> methods to sort strings, not to check for equality.</p></li><li><p>Use the <code>String.ToUpperInvariant</code> method instead of the <code>String.ToLowerInvariant</code> method when you normalize strings for comparison.</p></li></ul><p>All these methods do not modify the original string, some of them return a new modified string:</p><ul><li><p><code>string.Compare(str1, str2)</code>: Compare will perform an ordinal comparison and return:</p><ul><li><code>&lt; 0</code>: if first string comes before second in sort order</li><li><code>0</code>: if first and second strings are same position in sort order</li><li><code>&gt; 0</code>: if first string comes after second in sort order</li></ul></li><li><p><code>str1.Equals(str2)</code>: returns <code>true</code> if strings are equal</p></li><li><p><code>str1.Replace(oldChars, newChars)</code>: returns a new string with characters replaced</p></li><li><p><code>Remove(int startIndex)</code>: removes characters from the string from the <code>startIndex</code> position to the end of the string and returns that new string.</p></li><li><p><code>Remove(int startIndex, int count)</code>: removes a specified number of characters from the string from the starting index position. With the count parameter we decide how many characters we want to delete</p></li><li><p><code>Insert(int startIndex, string value)</code>: inserts the value into the string from the <code>startIndex</code> position and returns a modified string</p></li><li><p><code>SubString(2)</code>: is used to get the substring from the string, starting from the specified index</p></li><li><p><code>ToLower()</code>: convert the string to lowercase</p></li><li><p><code>ToUpper()</code>: convert the string to uppercase</p></li><li><p><code>Trim()</code>: trim all leading and trailing white space from the string</p></li><li><p><code>IndexOf(&quot;Ab&quot;)</code>: get the first occurrence of the string or character inside the string else return <code>-1</code></p></li><li><p><code>LastIndexOf(&quot;Ab&quot;)</code>: get the last occurrence of the string or character inside the string else return <code>-1</code></p></li><li><p><code>Contains(&quot;for&quot;)</code>: returns true if a string contains the value, otherwise, it returns false</p></li><li><p><code>StartsWith(&quot;bad&quot;)</code>: returns true if a string starts with the value, otherwise, it returns false</p></li><li><p><code>EndsWith(&quot;bad&quot;)</code>: returns true if a string ends with the value, otherwise, it returns false</p></li><li><p><code>string.Concat(str1, str2, ...)</code>: concatenate strings</p></li><li><p><code>string.Join(delimiter, str)</code>: concatenate strings separated by a delimiter</p></li><li><p><code>string.IsNullOrWhiteSpace</code>: returns true if the string is either null or is blank or contain just white space else returns false</p></li><li><p><code>string.Format(&quot;My name is {0}&quot;, name)</code>: insert object or variable value inside any string</p></li></ul><h3 id="numbers" tabindex="-1">Numbers <a class="header-anchor" href="#numbers" aria-label="Permalink to “Numbers”">​</a></h3><p>Numbers can be Natural / Whole number (+ve), Integers (-ve), and Real numbers (floats):</p><ul><li><p><code>byte</code>, <code>sbyte</code>, <code>short</code>, <code>ushort</code>, <code>int</code>, <code>uint</code>, <code>long</code>, <code>ulong</code></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// numbers from 0 to 127</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">byte</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> bits</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// unsigned integer means positive whole number or 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">uint</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> naturalNumber</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 23</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// integer means negative or positive whole number or 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> integerNumber</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">23</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div></li><li><p><code>float</code>:</p><ul><li><p>It is mostly used in graphics libraries (high demands for processing power)</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// float means single-precision floating point</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// f/F suffix makes it a float literal</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// if f/F is missing compiler will throw error</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 7-digit precision</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">float</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> realNumber</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2.3F</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div></li></ul></li><li><p><code>double</code>:</p><ul><li><p>It is mostly used for real world values (expect money calculations)</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// double means double-precision floating point</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// it dose not need any suffix</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 15-digit precision</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> anotherRealNumber</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2.3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // double literal</span></span></code></pre></div></li></ul></li><li><p><code>decimal</code>:</p><ul><li><p>It is mostly used in financial applications (high level of accuracy)</p></li><li><p>No (less) round-off errors</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// more precision floating point</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// m/M suffix makes it a decimal literal</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 28-29 decimal digits</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> anotherRealNumber</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2.3M</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // decimal literal</span></span></code></pre></div></li></ul></li><li><p>Default value:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 0 for all number data-types</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span></code></pre></div></li><li><p>Binary literals can be specified with the <code>0b</code> prefix:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> binaryNotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0b1010</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div></li><li><p>Hexadecimal literals can be specified with the <code>0x</code> prefix:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> hexadecimalNotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0x001E</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div></li><li><p><code>_</code> (underscore) can be used as digit separator (C# 7.0)</p></li><li><p>These are called digit separators and are ignored by the compiler</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> decimalNotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2_000_000</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> binaryNotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0b_0001_1110_1000_0100_1000_0000</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> hexadecimalNotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> 0x_001E_8480</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// All have the same value</span></span></code></pre></div></li></ul><table tabindex="0"><thead><tr><th>C#</th><th>CLR</th><th>Singed</th><th>Size in bits</th><th>Inclusive Range</th><th>Suffix</th></tr></thead><tbody><tr><td><code>byte</code></td><td><code>System.Byte</code></td><td>No</td><td>8</td><td>0 to 255</td><td></td></tr><tr><td><code>sbyte</code></td><td><code>System.SByte</code></td><td>Yes</td><td>8</td><td>−128 to 127</td><td></td></tr><tr><td><code>ushort</code></td><td><code>System.UInt16</code></td><td>No</td><td>16</td><td>0 to 65,535</td><td></td></tr><tr><td><code>short</code></td><td><code>System.Int16</code></td><td>Yes</td><td>16</td><td>−32,768 to 32,767</td><td></td></tr><tr><td><code>uint</code></td><td><code>System.UInt32</code></td><td>No</td><td>32</td><td>0 to 4,294,967,295</td><td>1U</td></tr><tr><td><code>int</code></td><td><code>System.Int32</code></td><td>Yes</td><td>32</td><td>−2,147,483,648 to 2,147,483,647</td><td></td></tr><tr><td><code>ulong</code></td><td><code>System.UInt64</code></td><td>No</td><td>64</td><td>0 to 18,446,744,073,709,551,615</td><td>1UL</td></tr><tr><td><code>long</code></td><td><code>System.Int64</code></td><td>Yes</td><td>64</td><td>−9,223,372,036,854,775,808 to 9,223,372,036,854,775,807</td><td>1L</td></tr><tr><td><code>float</code></td><td><code>System.Single</code></td><td>32</td><td>23 bits (~7 decimal digits)</td><td>1.5×10^45 to 3.4×1038</td><td>1F</td></tr><tr><td><code>double</code></td><td><code>System.Double</code></td><td>64</td><td>52 bits (~15 decimal digits)</td><td>5.0×10^324 to 1.7×10308</td><td>1D</td></tr><tr><td><code>decimal</code></td><td><code>System.Decimal</code></td><td>128</td><td>96 bits (~28-29 decimal digits)</td><td>1.0 x 10^28 to 7.9228 x 1028</td><td>1M</td></tr></tbody></table><ul><li><p>If numbers in different types are added then C# will perform implicit type casting</p></li><li><p>Use <code>checked</code> block to raise exceptions when overflow happens during any arithmetic operation.</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> checked</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">checked</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> r1</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> r2</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> r1</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p><code>unchecked</code> can be used to ignore any statement in a <code>checked</code> block</p></li><li><p>The compiler can put all the operations of that project under <code>checked</code> without explicitly using the keyword in the source code by adding through Visual Studio or to the below settings under <code>&lt;PropertyGroup&gt;</code> inside <code>.csproj</code> file:</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">CheckForOverflowUnderflow</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">CheckForOverflowUnderflow</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span></code></pre></div></li><li><p>All numbers are primitive data-types</p></li></ul><div class="danger custom-block"><p class="custom-block-title">NOTE</p><p><strong>Do not use equality comparator with double variables</strong> they will not be equal</p></div><h3 id="booleans" tabindex="-1">Booleans <a class="header-anchor" href="#booleans" aria-label="Permalink to “Booleans”">​</a></h3><p>Storing <code>true</code> or <code>false</code>:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> happy</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> sad</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// False</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span></code></pre></div><p>In C# numbers are not considered as Booleans, like <code>0</code> as <code>false</code> and reset as <code>true</code></p><p>So, the below code will not work:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Will throw error: Cannot implicitly convert to bool</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">something</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// This will work</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">something</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span></code></pre></div><ul><li>Primitive data-type</li></ul><h3 id="object-type" tabindex="-1">Object Type <a class="header-anchor" href="#object-type" aria-label="Permalink to “Object Type”">​</a></h3><p>Special type named <code>object</code> that can store any data.</p><p>Every type in C# directly or indirectly derives from the <code>object</code> class type, and <code>object</code> is the ultimate base class of all types.</p><ul><li>The code will be messier</li><li>Possibly poor performance due to <a href="#boxing-and-unboxing-operations">boxing and unboxing operations</a></li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// storing a double in an object</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> height</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1.88</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// storing a string in an object</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Amir</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// gives compile error!</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> length1</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Length</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// tell compiler it is a string (unboxing)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> length2</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ((</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">).</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Length</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// store different data later</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// previously it was string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// now it is int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 25</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div><ul><li><p>Base class of all C# types</p></li><li><p>Generics are used instead of object</p></li><li><p>Not a primitive data-type</p></li></ul><h3 id="dynamic-type" tabindex="-1">Dynamic Type <a class="header-anchor" href="#dynamic-type" aria-label="Permalink to “Dynamic Type”">​</a></h3><p>Special type named <code>dynamic</code> (C# 4.0) can store any data, even more than <code>object</code></p><ul><li>Poor performance</li><li>It dose implicit type conversion when using the methods of the stored value.</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// storing a string in a dynamic object</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// string has a Length property</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">dynamic</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> something</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Ahmed</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// it has Length property</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">something</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Length</span></span></code></pre></div><ul><li><p>The data type can be changed after definition</p></li><li><p>It is not present in CLR and hence will be converted to <code>object</code> during runtime</p></li><li><p>Run time errors, no compile time errors</p></li></ul><h3 id="anonymous-types" tabindex="-1">Anonymous Types <a class="header-anchor" href="#anonymous-types" aria-label="Permalink to “Anonymous Types”">​</a></h3><p>Anonymous types provide a convenient way to encapsulate a set of read-only properties into a single object without having to explicitly define a type first.</p><ul><li><p>The type name is generated by the compiler and is not available at the source code level</p></li><li><p>The type of each property is inferred by the compiler</p></li><li><p>Use the <code>new</code> operator, but don&#39;t specify a typename</p></li><li><p>Use <code>{}</code> to initialize properties</p></li><li><p>Use name-value pair within initializers to declare the property name</p></li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> temp</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Color</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Red</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Price</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 40M</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> };</span></span></code></pre></div><h3 id="constants" tabindex="-1">Constants <a class="header-anchor" href="#constants" aria-label="Permalink to “Constants”">​</a></h3><p>Constants are immutable values which are known at compile time and do not change during runtime</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> PI</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 3.14159265359</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> WeekDays</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 7</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> HomePlanet</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Earth</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div><h3 id="inferring-type" tabindex="-1">Inferring Type <a class="header-anchor" href="#inferring-type" aria-label="Permalink to “Inferring Type”">​</a></h3><p>Using <code>var</code> we can declare local variables whose data-type is determined later.</p><p>For inferring it checks if the literal is suffice with:</p><ul><li><code>L</code>: infers <code>long</code></li><li><code>UL</code>: infers <code>ulong</code></li><li><code>M</code>: infers <code>decimal</code></li><li><code>D</code>: infers <code>double</code></li><li><code>F</code>: infers <code>float</code></li></ul><p>It will have the same properties of the inferred data-type</p><ul><li>Data-type cannot be changed after definition</li></ul><h3 id="type-casting" tabindex="-1">Type Casting <a class="header-anchor" href="#type-casting" aria-label="Permalink to “Type Casting”">​</a></h3><ul><li><p>Changing an expression from one data type to another.</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// it will not round up or down, just discards the decimal places</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">decimal</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> myDecimal</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 123.987M</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> myInt</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">myDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 123</span></span></code></pre></div></li><li><p>When a big value is cast into smaller one, C# will automatically wrap the value around</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> myDecimal</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 365</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">byte</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> myInt</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">myDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// myInt will become 109 instead of 365, as byte can only hold up to 256</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// it rolls over from 256 to 109</span></span></code></pre></div></li></ul><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>To get wrapped value. Open calculator, switch to Scientific mode, and calculate 365 <em>Mod</em> 256</p></div><ul><li><strong>+</strong> (plus) operator when used between a <em>string</em> and any <em>other type</em>, it converts the <strong>other type</strong> to <strong>string</strong></li></ul><h3 id="parsing" tabindex="-1">Parsing <a class="header-anchor" href="#parsing" aria-label="Permalink to “Parsing”">​</a></h3><p>For parsing <code>int</code> data from <code>string</code> use <code>int.TryParse()</code>:</p><ul><li><p><code>int.TryParse(&quot;A&quot;, out int age)</code>: will assign 0 if anything but digits are passed</p></li><li><p>It is more efficient</p></li><li><p>It returns <code>true</code> if parsing was successful</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Int32</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">TryParse</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">numStr1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> out</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> targetNum</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">))</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">targetNum</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p><code>int.Parse(&quot;A&quot;)</code>: will throw <code>FormatException</code> if anything but digits are passed, <code>try-catch</code> block is required to catch any exceptions</p></li><li><p><code>Convert.ToInt32(&quot;A&quot;)</code>: will throw <code>FormatException</code> and <code>OverflowException</code> if anything but digits are passed</p></li><li><p>Other parsing options:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> numStr2</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">2.00</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> numStr3</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">3,000</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> numStr4</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">3,000.00</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Use Parse to try a floating point number</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// This only works if the decimal value is 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">targetNum</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Parse</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">numStr2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> NumberStyles</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Float</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">targetNum</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Use Parse to try a number with thousands marker</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">targetNum</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Parse</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">numStr3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> NumberStyles</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">AllowThousands</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">targetNum</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Use Parse to try a number with thousands marker AND decimal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">targetNum</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Parse</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">numStr4</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> NumberStyles</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">AllowThousands</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> NumberStyles</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Float</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">targetNum</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Output:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 3000</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 3000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// This works with other types too, like bool</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">bool</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Parse</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">True</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">)}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Or floating point numbers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">float</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Parse</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">1.235</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">F2</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Output:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// True</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 1.24</span></span></code></pre></div></li></ul><h3 id="boxing-and-unboxing-operations" tabindex="-1">Boxing and Unboxing Operations <a class="header-anchor" href="#boxing-and-unboxing-operations" aria-label="Permalink to “Boxing and Unboxing Operations”">​</a></h3><p>Values of value types are treated as objects by performing <em>boxing</em> and <em>unboxing operations</em>.</p><ul><li><p>Boxing is the process of converting a value type to the type <code>object</code> or to any interface type implemented by this value type.</p></li><li><p>Unboxing extracts the value type from the object</p></li><li><p>Boxing is implicit; unboxing is explicit.</p></li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> o</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Boxing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> j</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">o</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // Unboxing</span></span></code></pre></div><ul><li><p>When a value of a value type is assigned to an <code>object</code> reference, a &quot;box&quot; is allocated to hold the value. That box is an instance of a reference type, and the value is copied into that box.</p></li><li><p>When an <code>object</code> reference is cast to a value type, a check is made that the referenced object is a box of the correct value type. If the check succeeds, the value in the box is copied to the value type.</p></li></ul><h3 id="default-value" tabindex="-1">Default Value <a class="header-anchor" href="#default-value" aria-label="Permalink to “Default Value”">​</a></h3><p>All primitive types except <code>string</code> are <strong>value types</strong>.</p><ul><li><p>Default value can be set:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">float</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> digit</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div></li></ul><h3 id="nullable-types" tabindex="-1">Nullable Types <a class="header-anchor" href="#nullable-types" aria-label="Permalink to “Nullable Types”">​</a></h3><p>By default value types are non nullable. To make them nullable use <code>?</code></p><ul><li><p><code>int a = 0</code>: <code>a</code> is not nullable, so <code>a</code> cannot set to <code>null</code>, <code>a = null</code> will generate compiler error</p></li><li><p><code>int? b = 0</code>: <code>b</code> is nullable <code>int</code>, so <code>b = null</code> is valid</p></li></ul><p>A <em>nullable value type</em> <code>T?</code> represents all values of its underlying value type <code>T</code> and an additional <code>null</code> value. For example, you can assign any of the following three values to a <code>bool?</code> variable: <code>true</code>, <code>false</code>, or <code>null</code>.</p><ul><li><p>Nullable types bridge the differences between C# types and Database types</p></li><li><p>For example, in a database table the <code>age</code> column can contain numeric values or can be empty (null), if this column is mapped to a non-nullable value type it will throw error</p></li></ul><p>Nullable reference types are available beginning with C# 8.0:</p><ul><li>Reference types are nullable by default</li></ul><h4 id="null-coalescing-operator-and" tabindex="-1">Null-Coalescing operator <code>??</code> and <code>??=</code> <a class="header-anchor" href="#null-coalescing-operator-and" aria-label="Permalink to “Null-Coalescing operator ?? and ??=”">​</a></h4><p>If you want to assign a value of a nullable value type to a non-nullable value type variable, you might need to specify the value to be assigned in place of <code>null</code>.</p><p>The null-coalescing operator <code>??</code> returns the value of its left-hand operand if it isn&#39;t <code>null</code>; otherwise, it evaluates the right-hand operand and returns its result.</p><ul><li>The <code>??</code> operator doesn&#39;t evaluate its right-hand operand if the left-hand operand evaluates to non-null.</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> TicketsOnSale</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> AvailableTickets</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">TicketsOnSale</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    AvailableTickets</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Will throw error as nullable type cannot be implicitly converted to non-nullable</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // AvailableTickets = TicketsOnSale;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Returns a non-nullable value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    AvailableTickets</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> TicketsOnSale</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Or explicitly cast it</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    AvailableTickets</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">TicketsOnSale</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// The above can be written as</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">AvailableTickets</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> TicketsOnSale</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ??</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div><p>The null-coalescing assignment operator <code>??=</code> (C# 8.0) assigns the value of its right-hand operand to its left-hand operand only if the left-hand operand evaluates to <code>null</code>.</p><ul><li>The <code>??=</code> operator doesn&#39;t evaluate its right-hand operand if the left-hand operand evaluates to non-null.</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">variable</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> is</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    variable</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> expression</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// The above can be written as</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">variable</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ??=</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> expression</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div><p><em>Example:</em></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> numbers</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// create a new list is numbers is null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">numbers</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ??=</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Join</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> numbers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // output: 5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// if a is null, it returns 0 and it also assigns 0 to a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">numbers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ??=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Join</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> numbers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // output: 5 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // output: 0</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>The operators <code>??</code> and <code>??=</code> cannot be overloaded.</p></div><h4 id="null-conditional-operator" tabindex="-1">Null-Conditional Operator <code>?.</code> <a class="header-anchor" href="#null-conditional-operator" aria-label="Permalink to “Null-Conditional Operator ?.”">​</a></h4><p>The null-conditional operator <code>?.</code> (C# 6.0) is used to check for <code>null</code> before accessing a member or a method of a variable</p><ul><li>It is used to avoid <code>NullReferenceException</code> when accessing members of a <code>null</code> object</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> names</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">names</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Ahmed</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Without null-conditional operator</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> length</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">names</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> names</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">].</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Length</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// With null-conditional operator</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> length</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> names</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Length</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ??</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div><h4 id="null-forgiving-operator" tabindex="-1">Null-Forgiving Operator <code>!</code> <a class="header-anchor" href="#null-forgiving-operator" aria-label="Permalink to “Null-Forgiving Operator !”">​</a></h4><p>The null-forgiving, or null-suppression operator <code>!</code> (C# 8.0) suppresses warnings about nullable value types</p><ul><li>It tells the compiler that you are sure that the expression will not be <code>null</code></li><li>It is used to suppress warnings about nullable value types</li><li>At runtime, expression <code>x!</code> is equivalent to <code>x</code></li><li>At runtime, if the expression is <code>null</code>, a <code>NullReferenceException</code> will be thrown</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Suppresses warning</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div><h3 id="tuples" tabindex="-1">Tuples <a class="header-anchor" href="#tuples" aria-label="Permalink to “Tuples”">​</a></h3><p>The tuple (C# 7.0) feature provides concise syntax to group multiple data elements in a lightweight data structure.</p><ul><li>Tuple values are <strong>mutable</strong></li><li>They are the recommended way to return multiple values from a method</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// &lt;type&gt; &lt;variable name&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> X</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> point</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">X: </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">point</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">X</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">, Y: </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">point</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">Y</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Mutable</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">point</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">X</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 500</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Using var we can specific names in the initializer</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> point</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">X</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Tuple members from variables</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> point</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">point</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div><ul><li><p>Tuple member names can be ignored, and the default names such as <code>Item1</code>, <code>Item2</code> ... can be used:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> point</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">X: </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">point</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">Item1</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">, Y: </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">point</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">Item2</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div></li><li><p>Deconstructing tuples:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> point1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// x and y already exist</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> point2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div></li><li><p>Method returning a Tuple (multiple values):</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> PlusTimes</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> multiple</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> PlusTimes</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div></li></ul><h3 id="arrays" tabindex="-1">Arrays <a class="header-anchor" href="#arrays" aria-label="Permalink to “Arrays”">​</a></h3><p>Multiple variables of the same type can be stored in an array data structure.</p><ul><li>To store elements of any type in an array, we can specify <code>object</code> as its type.</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> arrayName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> TestArraysClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // Declare a single-dimensional array of 5 integers.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> array1</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // Declare and set array element values.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> array2</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 7</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 9</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // Alternative syntax.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> array3</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // Declare a two dimensional array.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[,]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> multiDimensionalArray1</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // Declare and set array element values.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[,]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> multiDimensionalArray2</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> },</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // Declare a jagged array.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[][]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> jaggedArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">][];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // Set the values of the first array in the jagged array structure.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        jaggedArray</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="enum" tabindex="-1">Enum <a class="header-anchor" href="#enum" aria-label="Permalink to “Enum”">​</a></h3><p>An enumeration type (or <code>enum</code> type) is a value type defined by a set of named constants of the underlying integral numeric type.</p><p>If a program uses set of integral numbers, consider replacing them with enums, which makes the program more:</p><ul><li><p>Readable</p></li><li><p>Maintainable</p></li><li><p>The member names must be distinct</p></li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Season</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // names of enum members</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    Spring</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    Summer</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    Autumn</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    Winter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li><p>By default, the associated constant values of enum members are of type <code>int</code></p></li><li><p>They start with 0 and increase by 1 following the definition text order.</p></li><li><p>We can explicitly specify any integral numeric type as an underlying type of an enum type.</p></li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ErrorCode</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> ushort</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    None</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    Unknown</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    ConnectionLost</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    OutlierReading</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 200</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li>Methods cannot be defined inside an enum, but we can create extension methods</li></ul><h4 id="enumeration-types-as-bit-flags" tabindex="-1">Enumeration types as bit flags <a class="header-anchor" href="#enumeration-types-as-bit-flags" aria-label="Permalink to “Enumeration types as bit flags”">​</a></h4><p>If you want an enumeration type to represent a combination of choices, define enum members for those choices such that an individual choice is a bit field (associated values are of the powers of two)</p><ul><li>To indicate that an enumeration type declares bit fields, apply the <code>Flags</code> attribute to it</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Flags</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Days</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    None</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">      =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0b_0000_0000</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    Monday</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">    =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0b_0000_0001</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    Tuesday</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">   =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0b_0000_0010</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    Wednesday</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0b_0000_0100</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // 4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    Thursday</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">  =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0b_0000_1000</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // 8</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    Friday</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">    =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0b_0001_0000</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // 16</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    Saturday</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">  =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0b_0010_0000</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // 32</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    Sunday</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">    =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0b_0100_0000</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // 64</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    Weekend</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">   =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Saturday</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Sunday</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> FlagsEnumExample</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">        Days</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> meetingDays</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Days</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Monday</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Days</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Wednesday</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Days</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Friday</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">meetingDays</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // Output:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // Monday, Wednesday, Friday</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">        Days</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> workingFromHomeDays</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Days</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Thursday</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Days</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Friday</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Join a meeting by phone on </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">meetingDays</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;"> workingFromHomeDays</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // Output:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // Join a meeting by phone on Friday</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> isMeetingOnTuesday</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">meetingDays</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Days</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Tuesday</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Days</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Tuesday</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Is there a meeting on Tuesday: </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">isMeetingOnTuesday</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // Output:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // Is there a meeting on Tuesday: False</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">        var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Days</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">37</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // Output:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // Monday, Wednesday, Saturday</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="delegate" tabindex="-1">Delegate <a class="header-anchor" href="#delegate" aria-label="Permalink to “Delegate”">​</a></h3><p>A Delegate is a type safe function pointer</p><ul><li><p>A delegate type represents references to methods with a particular parameter list and return type.</p></li><li><p>The <code>delegate</code> keyword is used to define a delegate</p></li><li><p>Delegate can be associated with any method with a compatible signature and return type.</p></li><li><p>Methods don&#39;t have to match the delegate type exactly. Variance (Covariance and Contravariance) can provide flexibility for matching a delegate type with a method signature.</p></li><li><p>Delegates allow methods to be passed as parameters</p></li><li><p>Delegates can be used to define callback methods</p></li><li><p>Lambda expressions are a more concise way of writing inline code blocks. Lambda expressions (in certain contexts) are compiled to delegate types</p></li><li><p>Delegates are analogous to function types provided by functional languages.</p></li></ul><p>They&#39;re also similar to the concept of function pointers found in some other languages. Unlike function pointers, delegates are object-oriented and type-safe.</p><p><em>Example:</em></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Create a delegate</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> delegate</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Delg</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Create a method for a delegate.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> strMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">strMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Using delegate</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Create an instance of the delegate and pass the name of the function</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // that needs to be referenced</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">    Delg</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Delg</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // OR</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Instantiate the delegate</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">    Delg</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Call the delegate</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    handler</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello from the other side</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h4 id="multicast-delegate" tabindex="-1">Multicast Delegate <a class="header-anchor" href="#multicast-delegate" aria-label="Permalink to “Multicast Delegate”">​</a></h4><p>A multicast delegate is a delegate that has reference to more than one function. When you invoke a multicast delegate, all the functions the delegate is pointing to, are invoked</p><p>There are 2 approaches to create a multicast delegate:</p><ol><li><code>+</code> or <code>+=</code> to register a method with the delegate</li><li><code>-</code> or <code>-=</code> to un-register a method with the delegate</li></ol><p>A multicast delegate, invokes the methods in the invocation list, in the same order in which they are added.</p><ul><li><strong>Multicast delegate makes implementation of observer design pattern (publish/subscribe pattern)</strong> very simple.</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> MethodClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Method1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Method2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> MethodClass</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Del</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> d1</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> obj</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Method1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Del</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> d2</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> obj</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Method2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Del</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> d3</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> DelegateMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Both types of assignment are valid.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Del</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> allMethodsDelegate</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> d1</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> d2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">allMethodsDelegate</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +=</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> d3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// remove Method1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">allMethodsDelegate</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> -=</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> d1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// copy AllMethodsDelegate while removing d2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Del</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> oneMethodDelegate</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> allMethodsDelegate</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> d2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Get the invocation list</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> invocationCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> d1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">GetInvocationList</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">GetLength</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><ul><li>If the delegate has a return type other than void and if the delegate is a multicast delegate, only the value of the last invoked method will be returned.</li></ul><h3 id="records" tabindex="-1">Records <a class="header-anchor" href="#records" aria-label="Permalink to “Records”">​</a></h3><p>Records (C# 9) are a reference type that provides built-in functionality for encapsulating data</p><ul><li>Records are distinct from classes in that record types <strong>use value-based equality</strong></li><li>Create record types with <strong>immutable properties</strong> by using positional parameters or standard property syntax</li><li>Positional properties are <strong>immutable</strong> in a <code>record class</code> and a <code>readonly record struct</code>. They&#39;re <em>mutable</em> in a <code>record struct</code></li><li>Records (C# 9) as a reference type (instead of classes)</li><li>Record structs (C# 10) as value types</li></ul><p><em>Example:</em></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// reference type (\`class\` keyword is optional)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// public record class Person(string FirstName, string LastName);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> record</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> FirstName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> LastName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// same as above</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> record</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Person</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> FirstName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> default!</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> LastName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> default!</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// add other properties</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> record</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> DailyTemperature</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> HighTemp</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> LowTemp</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Mean</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">HighTemp</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> LowTemp</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// value type (record struct)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> readonly</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> record</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> X</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Z</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Person</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> person</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Nancy</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Davolio</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">person</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// output: Person { FirstName = Nancy, LastName = Davolio }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Person</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> newPerson</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Nancy</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Davolio</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">person</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> newPerson</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">ReferenceEquals</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">person</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> newPerson</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // false</span></span></code></pre></div><p>When declaring a record the compiler also produces support for:</p><ul><li>Cloning via <code>with</code> expression</li><li>A default implementation of <code>ToString</code> that prints the value of each member</li><li>A new <code>EqualityContract</code> property that allows you to specify which members should be used in equality comparisons</li><li>A <code>Deconstruct</code> method that allows you to deconstruct a record into its individual members</li></ul><h3 id="with-expression" tabindex="-1"><code>with</code> Expression <a class="header-anchor" href="#with-expression" aria-label="Permalink to “with Expression”">​</a></h3><p>A <code>with</code> expression (C# 9) produces a copy of its operand with the specified properties and fields modified:</p><ul><li>A left-hand operand of a <code>with</code> expression (C# 9) must be of a <a href="#records">record type</a></li><li>From C# 10, it can also be of a <a href="#structure">structure type</a> or an <a href="#anonymous-types">anonymous type</a></li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> record</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> X</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> record</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> NamedPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> X</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">X</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">    Point</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> p1</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> NamedPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">A</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">    Point</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> p2</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> p1</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> with</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> X</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Y</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">p2</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> is</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> NamedPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // output: True</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">p2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // output: NamedPoint { X = 5, Y = 3, Name = A }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h2 id="conditional" tabindex="-1">Conditional <a class="header-anchor" href="#conditional" aria-label="Permalink to “Conditional”">​</a></h2><p>Run a set of statements only if certain condition is met</p><ul><li>They create branches</li></ul><h3 id="if-else" tabindex="-1">If-Else <a class="header-anchor" href="#if-else" aria-label="Permalink to “If-Else”">​</a></h3><p>It is used to execute certain statements only when the <strong>conditions</strong> that are set up <strong>true</strong></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// if \`someValue\` is 24 then execute statement-1 else execute statement-2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">someValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 24</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // statement-1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">someValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // statement-2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // statement-3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="ternary-operator-conditional-expression" tabindex="-1">Ternary Operator (Conditional expression) <a class="header-anchor" href="#ternary-operator-conditional-expression" aria-label="Permalink to “Ternary Operator (Conditional expression)”">​</a></h3><p>Can be used as a concise way to write if else statement:</p><ul><li>Conditional operator cannot be overloaded</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // condition ? true_statement : false_statement</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 18</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">old</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">new</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // The expression --&gt; a ? b : c ? d : e</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // is evaluated   --&gt; a ? b : (c ? d : e)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // not as         --&gt; (a ? b : c) ? d : e</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p>Rules about type conversion:</p><ul><li>If both types are the same no problem or if one side supports an implicit conversion to the other but not vice-versa then that is used</li><li>If neither of these cases were true you had to specify the desired type such as by casting the second argument</li></ul><p>Target-typed conditional expression (C# 9.0) (relaxed about type conversion rules):</p><ul><li>The type of the conditional expression is inferred from the type of the variables that are assigned to</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Before</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Inferring from declared variable type</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">IList</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> list</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> capacity</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ?</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">capacity</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">IList</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;)</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Empty</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Inferring from return type</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">IList</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> GetList</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> capacity</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> capacity</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ?</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">capacity</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">IList</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;)</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Empty</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// C# 9.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">IList</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> list</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> capacity</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ?</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">capacity</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Empty</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Inferring from return type</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">IList</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> GetList</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> capacity</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> capacity</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ?</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">capacity</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Empty</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="switch" tabindex="-1">Switch <a class="header-anchor" href="#switch" aria-label="Permalink to “Switch”">​</a></h3><p>It is used to execute one statement from multiple conditions</p><ul><li><code>default:</code> case is optional</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">switch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">someValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  case</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello, {0}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      break</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  case</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello, {0}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      break</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  default</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      break</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li><p>Control cannot fall through from one case label (&#39;case 2:&#39;) (Error CS0163)</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">switch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">someValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // This will throw error as case 1 is missing break;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  case</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello, {0}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  case</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello, {0}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  default</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      break</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>This is valid:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">switch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">someValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // If case 1 or case 2 is matched the statement will execute</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  case</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  case</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello, {0}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      break</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  default</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      break</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p><code>switch</code> statement can be used with <code>when</code> keyword to add additional conditions</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">switch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">someValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  case</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> someValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello, {0}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      break</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  case</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello, {0}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      break</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  default</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      break</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p><code>switch</code> statement can be used with <code>goto</code> keyword to jump to a specific case</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">switch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">someValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  case</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello, {0}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      goto</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> case</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  case</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello, {0}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      break</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  default</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      break</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li></ul><h4 id="switch-expression" tabindex="-1">Switch Expression <a class="header-anchor" href="#switch-expression" aria-label="Permalink to “Switch Expression”">​</a></h4><p>Switch expressions (C# 8.0) are a more concise way to write switch statements</p><ul><li>The final <code>_</code> case is a <em>discard pattern</em> that matches all values</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> GetDayNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> day</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> day</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> switch</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">      &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Sunday</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">      &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Monday</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">      &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Tuesday</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">      &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Wednesday</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">      &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Thursday</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">      &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Friday</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">      &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Saturday</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 7</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">      _</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li><p>Use <em>relational patterns</em> to match a range of values</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> WaterState</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> tempInFahrenheit</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  tempInFahrenheit</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> switch</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      (</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 32</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 212</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">liquid</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 32</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">solid</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">      &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 212</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">gas</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">      32</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">solid/liquid transition</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">      212</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">liquid / gas transition</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  };</span></span></code></pre></div></li><li><p>Compare multiple properties of an object</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> record</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Order</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Items</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> decimal</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Cost</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> decimal</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> CalculateDiscount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Order</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> order</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  order</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> switch</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Items</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Cost</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1000.00m</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0.10m</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Items</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Cost</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 500.00m</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0.05m</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Cost</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 250.00m</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0.02m</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;">      null</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ArgumentNullException</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">nameof</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">order</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">),</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Can&#39;t calculate discount on null order</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">      var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> someObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0m</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  };</span></span></code></pre></div></li></ul><h2 id="loops" tabindex="-1">Loops <a class="header-anchor" href="#loops" aria-label="Permalink to “Loops”">​</a></h2><p>They help to run a set of statements repeatedly based on some conditions</p><table tabindex="0"><thead><tr><th>Use Case</th><th>Loop Type</th></tr></thead><tbody><tr><td>Known number of iterations</td><td><code>for</code> loop</td></tr><tr><td>Unknown number of iterations</td><td><code>while</code> loop</td></tr><tr><td>Execute at least once</td><td><code>do-while</code> loop</td></tr><tr><td>Iterate through an enumerable</td><td><code>foreach</code> loop</td></tr></tbody></table><h3 id="for" tabindex="-1"><code>for</code> <a class="header-anchor" href="#for" aria-label="Permalink to “for”">​</a></h3><p><code>for</code> loop is used when the number of <strong>iterations</strong> are <strong>known</strong></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// initialization; condition; iteration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // statements</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="while" tabindex="-1"><code>while</code> <a class="header-anchor" href="#while" aria-label="Permalink to “while”">​</a></h3><p><code>while</code> loop is used when the number of <strong>iterations</strong> are <strong>unknown</strong></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// check the condition first</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // statements</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="do-while" tabindex="-1"><code>do-while</code> <a class="header-anchor" href="#do-while" aria-label="Permalink to “do-while”">​</a></h3><p><code>do-while</code> executes statements <strong>at least once</strong> and afterwards it behaves like <em>while</em> loop</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// execute at least once</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // statements</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> while</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // now check condition</span></span></code></pre></div><h3 id="foreach" tabindex="-1"><code>foreach</code> <a class="header-anchor" href="#foreach" aria-label="Permalink to “foreach”">​</a></h3><p>Iterate through an array</p><ul><li>Runs as long as there is content in the array</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> collection</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">foreach</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> item</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> collection</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="break-and-continue" tabindex="-1">Break And Continue <a class="header-anchor" href="#break-and-continue" aria-label="Permalink to “Break And Continue”">​</a></h3><p><code>break</code> statement is used to exit the loop</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // statements</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    break</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p><code>continue</code> statement is used to skip the current iteration and move to the next iteration</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // statements</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    continue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // some statements</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h2 id="class" tabindex="-1">Class <a class="header-anchor" href="#class" aria-label="Permalink to “Class”">​</a></h2><p>A <code>class</code> type defines a data structure that contains data members (fields) and function members (methods, properties, and others)</p><ul><li>A class is a blue print of an Object</li></ul><p>It has code and data:</p><ul><li>Properties (data): member variables</li><li>It has actions/abilities: member methods</li></ul><p>C# class types support <strong>single inheritance</strong> and <strong>polymorphism</strong>, mechanisms whereby derived classes can extend and specialize base classes</p><p><em>Example:</em></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// &lt;Access Specifier&gt; class &lt;Class Name&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Counter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  private</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> _count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> GetNextValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    _count</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> _count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p>The <code>new</code> operator is used to create new instances of a class:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // Syntax: new &lt;Class Name&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // &lt;reference type&gt; &lt;variable name&gt; = new &lt;type&gt;();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">  Counter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> c1</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">  Counter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> c2</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Write</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">c1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">GetNextValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Write</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">c1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">GetNextValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Write</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">c1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">GetNextValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Write</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">c2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">GetNextValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Write</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">c1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">GetNextValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// OUTPUT:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 1 2 3 1 4</span></span></code></pre></div><ul><li><p>In C#, every class implicitly inherits from the base <code>Object</code> class. Because of this inheritance, every class, both built-in and the user created inherit the <code>ToString</code> method from the <code>Object</code> class</p><ul><li><code>ToString</code> should return a string representation of the object that is suitable for display</li><li>It&#39;s good idea to override this method and generate your own string representation of your class</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Car</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> ToString</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> $&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">Name</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> is name property of class Car</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li></ul><p>New way to instantiate objects (C# 9: Target-Typed <code>new</code> Expressions):</p><ul><li>The type of the variable is inferred from the type of the object being created</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// old way</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">XmlDocument</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> xml3</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> XmlDocument</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// new way</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">XmlDocument</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> xml3</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span></code></pre></div><h3 id="reference-types" tabindex="-1">Reference Types <a class="header-anchor" href="#reference-types" aria-label="Permalink to “Reference Types”">​</a></h3><p>Any type defined with the <code>class</code> keyword will be a <em>reference type</em>, meaning that a variable of that type will not contain the data that makes up an instance of the type; instead, it can contain a <em>reference</em> to an instance of the type</p><ul><li>In C# classes are all reference-types</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Counter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> c1</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Counter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> c2</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> c1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Write</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">c1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">GetNextValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Write</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">c1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">GetNextValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Write</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">c1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">GetNextValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Write</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">c2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">GetNextValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Write</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">c1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">GetNextValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// OUTPUT</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 1 2 3 4 5</span></span></code></pre></div><ul><li><p>Only one instance is created here and both <code>c1</code> and <code>c2</code> refer to this same instance</p></li><li><p><code>object.ReferenceEquals(instance1, instance2)</code> or <code>==</code> operator: can be used to check if both objects refer the same instance</p></li></ul><p>Reference types can contain <code>null</code>, makes it hard to know whether it&#39;s safe to attempt to perform an action with that variable</p><ul><li>C# 8.0 added <em>nullable references</em> to make a distinction between references that may be null, and ones that must not be</li><li>This feature is disabled by default</li><li><code>#nullable</code>: allows fine-grained control of the nullable annotation context</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> mayBeNull</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">mayBeNull</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Allowed because we can only get here if mayBeNull is not null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">mayBeNull</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Length</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Allowed because it checks for null and handles it</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">mayBeNull</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Length</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ??</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// The compiler will warn about this in an enabled nullable warning context</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">mayBeNull</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Length</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><h3 id="access-modifiers-accessibility" tabindex="-1">Access Modifiers (Accessibility) <a class="header-anchor" href="#access-modifiers-accessibility" aria-label="Permalink to “Access Modifiers (Accessibility)”">​</a></h3><p>Classes offer a mechanism for <em>encapsulation</em> through access modifiers</p><ul><li>The accessibility level controls whether they can be used from other code in your assembly or other assemblies.</li></ul><p>There are 4 types and 2 combined types:</p><ol><li><p><code>public</code>: The type or member can be accessed by any other code in the same assembly or another assembly that references it. The accessibility level of public members of a type is controlled by the accessibility level of the type itself</p><ul><li>Method or class member can be accessed by any other code within your program</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Car</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Jeep</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> seats</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Program</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> args</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">    Car</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> myCar</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Car</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">myCar</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // This is Ok.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p><code>private</code>: Types or members that implement private access modifiers are accessible only inside the same <code>class</code> or <code>struct</code>. As a result, we can&#39;t access them outside the <code>class</code> or <code>struct</code> they are created</p><ul><li>Method or class member can be accessed by any other code within your program</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Car</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Jeep</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  private</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> seats</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Program</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> args</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">    Car</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> myCar</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Car</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">myCar</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // Error. We can&#39;t access the number variable because</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // it has the private access modifier and its only accessible in the Car class</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p><code>protected</code>: The type or member can be accessed only by code in the same <code>class</code>, or in a <code>class</code> that is derived from that <code>class</code>.</p><ul><li>Method or class member can only be accessed by code within the class definition itself</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Car</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> seats</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Jeep</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Car</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Print</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">seats</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Program</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> args</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">    Car</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> myCar</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Car</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">myCar</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">seats</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // Error. The number variable is inaccessible due to its protection level.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // The Program class doesn&#39;t derive from the Car</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p><code>internal</code>: The type or member can be accessed by any code in the same assembly, but not from another assembly. In other words, <code>internal</code> types or members can be accessed from code that is part of the same compilation</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// First project (ASSEMBLY)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Car</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    internal</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> seats</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Jeep</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Print</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">      Car</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> myCar</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Car</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">myCar</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">seats</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">myCar</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Second project (ASSEMBLY)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Program</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> args</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">    Car</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> myCar</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Car</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">myCar</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">seats</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // Error. The number variable is inaccessible due to its protection level.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // The Program class in second project can&#39;t access the internal members from another project</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p><code>protected internal</code>: The type or member can be accessed by any code in the assembly in which it&#39;s declared, or from within a derived <code>class</code> in another assembly.</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//First Project (ASSEMBLY)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> NumberClassInFirstProject</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> internal</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> //we can access this variable inside this class</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ProgramInFirstProject</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Print</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">        NumberClassInFirstProject</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> num</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> NumberClassInFirstProject</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">num</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // This is OK. Anywhere in this project (assembly) we can access the number variable.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//Second project (ASSEMBLY)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Program</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> NumberClassInFirstProject</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> //Inheritance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Print</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> //This is OK as well. The class Program derives from the NumberClassInFirstProject clas.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p><code>private protected</code>: The type or member can be accessed by types derived from the class that are declared within its containing assembly.</p></li></ol><p>Summary:</p><table tabindex="0"><thead><tr><th>Caller&#39;s location</th><th style="text-align:center;"><code>public</code></th><th style="text-align:center;"><code>protected internal</code></th><th style="text-align:center;"><code>protected</code></th><th style="text-align:center;"><code>internal</code></th><th style="text-align:center;"><code>private protected</code></th><th style="text-align:center;"><code>private</code></th></tr></thead><tbody><tr><td>Within the class</td><td style="text-align:center;">yes</td><td style="text-align:center;">yes</td><td style="text-align:center;">yes</td><td style="text-align:center;">yes</td><td style="text-align:center;">yes</td><td style="text-align:center;">yes</td></tr><tr><td>Derived class (same assembly)</td><td style="text-align:center;">yes</td><td style="text-align:center;">yes</td><td style="text-align:center;">yes</td><td style="text-align:center;">yes</td><td style="text-align:center;">yes</td><td style="text-align:center;">-</td></tr><tr><td>Non-Derived class (same assembly)</td><td style="text-align:center;">yes</td><td style="text-align:center;">yes</td><td style="text-align:center;">-</td><td style="text-align:center;">yes</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td></tr><tr><td>Derived class (different assembly)</td><td style="text-align:center;">yes</td><td style="text-align:center;">yes</td><td style="text-align:center;">yes</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td></tr><tr><td>Non-Derived class (different assembly)</td><td style="text-align:center;">yes</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td></tr></tbody></table><p>Defaults:</p><ul><li><p>By default classes, interfaces, records, and structs declared directly within a namespace can be either <code>public</code> or <code>internal</code>. <strong><code>internal</code> is default</strong> if no access modifier is specified.</p></li><li><p>Class and struct members, including nested classes and structs, have <code>private</code> access by default.</p></li><li><p>Interface members are <code>public</code> by default.</p></li><li><p>Struct members, including nested classes and structs, can be declared <code>public</code>, <code>internal</code>, or <code>private</code>.</p></li><li><p>Class members, including nested classes and structs, can be <code>public</code>, <code>protected internal</code>, <code>protected</code>, <code>internal</code>, <code>private protected</code>, or <code>private</code>.</p></li></ul><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>Types or members with <code>internal</code> access specifier can be made available to other assemblies using <code>[assembly: InternalsVisibleTo(&quot;name&quot;)]</code></p></div><h3 id="static" tabindex="-1">Static <a class="header-anchor" href="#static" aria-label="Permalink to “Static”">​</a></h3><p>The <code>static</code> modifier keyword lets us declare that a member is not associated with any particular instance of the <code>class</code> this member is known as static member.</p><ul><li>The static member belongs to the itself rather than to a specific object.</li></ul><p>Non-static class can contain static:</p><ul><li>Methods</li><li>Fields</li><li>Properties</li><li>Events</li></ul><p><em>Example:</em></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Counter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> _count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> _totalCount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> GetNextValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        _count</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        _totalCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> _count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> TotalCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> _totalCount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">TotalCount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><ul><li><p><code>_totalCount</code> keeps track of count across all the class instances</p></li><li><p>The code that is declared static can only access other static members</p></li><li><p>Static methods can be overloaded but not overridden, because they belong to the class, and not to any instance of the class.</p></li><li><p>A <code>const</code> field behaves like <code>static</code>, as it belongs to the type, not to instances of the type</p><ul><li>Because of this we cannot use <code>static const</code></li><li>A <code>const</code> field can be accessed the same way <code>static</code> fields are accessed: <code>ClassName.MemberName</code></li></ul></li><li><p>C# does not support static local variables (that is, variables that are declared in method scope).</p></li></ul><p>Class defined as <code>static</code> can only contain static members. You cannot create instances of static classes</p><p>The following list provides the main features of a static class:</p><ul><li><p>Contains only static members</p></li><li><p>Cannot be instantiated</p></li><li><p>Is sealed (cannot be inherited)</p></li><li><p>Cannot contain Instance Constructors</p></li></ul><h3 id="members" tabindex="-1">Members <a class="header-anchor" href="#members" aria-label="Permalink to “Members”">​</a></h3><p>A class, struct or record can declare various kinds of members such as:</p><ul><li>Fields</li><li>Constants</li><li>Properties</li><li>Methods</li><li>Constructors</li><li>Events</li><li>Finalizers</li><li>Indexers</li><li>Operators</li><li>Nested Types</li></ul><h3 id="fields" tabindex="-1">Fields <a class="header-anchor" href="#fields" aria-label="Permalink to “Fields”">​</a></h3><p>Fields are a kind of variable, but unlike local variable, whose scope and lifetime is determined by its containing method, a field is tied to its containing type.</p><ul><li>Use fields only for variables that have private or protected accessibility.</li></ul><table tabindex="0"><thead><tr><th><code>readonly</code></th><th><code>const</code></th></tr></thead><tbody><tr><td>Runtime constant</td><td>Compile time constant</td></tr><tr><td>Value of <code>readonly</code> field can be changed</td><td>Value of the <code>const</code> field can not be changed</td></tr><tr><td>Value can be assigned in declaration and constructor part</td><td>Value can be only assigned in declaration part</td></tr><tr><td>Can be used with <code>static</code> modifiers</td><td>Cannot be used with <code>static</code> modifiers</td></tr><tr><td>Value can be different for different objects</td><td>Value is same for all objects</td></tr></tbody></table><h3 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to “Properties”">​</a></h3><p>A property is a member that provides a flexible mechanism to read, write, or compute the value of a private field</p><ul><li>Properties can be used as if they are public data members, but they are actually special methods called accessors</li><li>Marking class fields public and exposing to the external world is bad, as we will not have control over what gets assigned and returned. Properties help us to over come this issue</li></ul><p>Property accessors:</p><ul><li><code>get</code>: property accessor is used to return the property value</li><li><code>set</code>: property accessor is used to assign a new value</li><li><code>init</code>: (C# 9) property accessor is used to assign a new value only during object construction</li></ul><p>The <code>value</code> keyword is used to define the value being assigned by the <code>set</code> or <code>init</code> accessor</p><p>Properties can be:</p><ul><li><em>Read-write</em>: if they have both <code>get</code> and <code>set</code> accessor</li><li><em>Read-only</em>: if they have a <code>get</code> accessor but no <code>set</code> accessor. The value of the Property can be set in the constructor</li><li><em>Write-only</em>: if they have a <code>set</code> accessor, but no <code>get</code> accessor</li></ul><p><em>Example:</em></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Car</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  private</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> _name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // This is called a Property with a &quot;backing field&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    get</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> _name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    set</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      _name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // Without a &quot;backing field&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    get</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    set</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      Name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li><p>A shorthand way to write a Property is using <code>=&gt;</code> operator to create &quot;expression-bodied&quot; properties:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> _name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  get</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> _name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  set</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> _name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>Auto (properties) setter and getter: The above code can be written as (syntactic sugar provided by C# 3.0 compiler)</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Car</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>Create a &quot;computed property&quot; from other fields (setter is not needed):</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Car</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Description</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    get</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> $&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">Name</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> made by </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">CompanyName</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p><code>required</code> modifier (C# 11) indicates that the field or property it&#39;s applied to must be initialized by an object initializer</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Car</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> required</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> car</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Car</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Jeep</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> };</span></span></code></pre></div></li></ul><p><em>Example:</em></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Car</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">IsNullOrEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">))</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ArgumentException</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Name cannot be empty</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      Name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="indexers" tabindex="-1">Indexers <a class="header-anchor" href="#indexers" aria-label="Permalink to “Indexers”">​</a></h3><p>Indexers allow instances of a class or struct to be indexed just like arrays</p><ul><li><p>The indexed value can be set or retrieved without explicitly specifying a type or instance member</p></li><li><p>Indexers resemble properties except that their accessors take parameters</p></li><li><p>The <code>this</code> keyword is used to define the indexer</p></li><li><p>The <code>value</code> keyword is used to define the value being assigned by the set accessor</p></li><li><p>Indexers do not have to be indexed by an integer value; it is up to you how to define the specific look-up mechanism</p></li><li><p>Indexers can be overloaded</p></li><li><p>Indexers can have more than one formal parameter</p></li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Indexer declaration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // get and set accessors</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> SampleCollection</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">   // Declare an array to store the data elements.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">   private</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">   // Define the indexer to allow client code to use [] notation.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">   public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> T</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">      get</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">];</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">      set</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> arr</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Program</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">   static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">      var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> stringCollection</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> SampleCollection</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      stringCollection</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello, World</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">stringCollection</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// The example displays the following output:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//       Hello, World</span></span></code></pre></div><h3 id="constructor-and-destructor-finalizers" tabindex="-1">Constructor and Destructor (Finalizers) <a class="header-anchor" href="#constructor-and-destructor-finalizers" aria-label="Permalink to “Constructor and Destructor (Finalizers)”">​</a></h3><p>A constructor is a special method of the class or struct which gets automatically invoked whenever a class or struct is created</p><ul><li><p>A class or struct may have multiple constructors that take different arguments</p></li><li><p>Constructors enable the programmer to set default values, limit instantiation, and other instructions</p></li><li><p>Constructor of a class must have the <strong>same name as the class name</strong> in which it resides</p></li><li><p>A constructor doesn&#39;t have any return type, not even void</p></li></ul><h4 id="types-of-constructors" tabindex="-1">Types of Constructors <a class="header-anchor" href="#types-of-constructors" aria-label="Permalink to “Types of Constructors”">​</a></h4><ul><li><p>Default Constructor: It is a parameterless constructor</p><ul><li>Unless the class is static, classes without constructors are given a public parameterless constructor by the C# compiler in order to enable class instantiation.</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Geek</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> num</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // this would be invoked while the</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // object of that class created.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Geek</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Constructor Called</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> geek</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Geek</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// OUTPUT:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// &quot;Constructor Called&quot;</span></span></code></pre></div></li><li><p>Parametrized Constructor: A constructor having at least one parameter</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Geek</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> num</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Geek</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> num</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">num</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> num</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>Copy Constructor: This constructor creates an object by copying variables from another object.</p><ul><li>Its main use is to initialize a new instance to the values of an existing instance.</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Geek</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> num</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // Instance constructor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Geek</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> num</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">num</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> num</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // Copy constructor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Geek</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Geek</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> g</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">num</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> g</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">num</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Create a new Geeks object.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">    Geeks</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> g1</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Geeks</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">2018</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // here is g1 details is copied to g2.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">    Geeks</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> g2</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Geeks</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">g1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>Private Constructor: A constructor with private access modifier</p><ul><li>It is generally used in classes that contain static members only</li><li>If the class only contains private constructors, then instances of this class cannot be created</li><li>It is the implementation of a singleton class pattern</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> NLog</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Private Constructor:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // The declaration of the empty constructor prevents the automatic generation of a parameterless constructor.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> NLog</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> e</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  //2.71828...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>Static Constructor: A static constructor is used to initialize any static data, or to perform a particular action that needs to be performed only once</p><ul><li><p>It is called automatically before the first instance is created or any static members are referenced.</p></li><li><p>There can be <strong>only one static constructor</strong></p></li><li><p><strong>Cannot be a parameterized</strong> constructor</p></li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> SimpleClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Static variable that must be initialized at run time.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> readonly</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> long</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> baseline</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Static constructor is called at most one time, before any</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // instance constructor is invoked or member is accessed.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> SimpleClass</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        baseline</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> DateTime</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Now</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Ticks</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li></ul><p>Constructor <strong>Execution order for Parent-Child</strong>:</p><ol><li>Child Initializers (includes Static Constructors, fields)</li><li>Parent Initializers (includes Static Constructors, fields)</li><li>Parent Constructors</li><li>Child Constructors</li></ol><h4 id="destructor-finalizers" tabindex="-1">Destructor (Finalizers) <a class="header-anchor" href="#destructor-finalizers" aria-label="Permalink to “Destructor (Finalizers)”">​</a></h4><p>Destructors (Finalizers) are used to perform any necessary final clean-up when a class instance is being collected by the garbage collector.</p><ul><li>Finalizers cannot be defined in structs. They are only used with classes.</li><li>A class can only have one finalizer.</li><li>Finalizers cannot be inherited or overloaded.</li><li>Finalizers cannot be called. They are invoked automatically.</li><li>A finalizer does not take modifiers or have parameters.</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Car</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    ~</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Car</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // finalizer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // cleanup statements...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to “Methods”">​</a></h3><p>Functions are known as <em>methods</em> in context of OOP</p><ul><li><p>A method is a code block that contains a series of statements. A program causes the statements to be executed by calling the method and specifying any required method arguments</p></li><li><p>In C#, every executed instruction is performed in the context of a method</p></li><li><p>The <code>Main</code> method is the entry point for every C# application and it is called by the CLR when the program is started</p></li></ul><p><em>Syntax:</em></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// &lt;Access Specifier&gt; &lt;Return Type&gt; &lt;Method Name&gt;(Parameter List)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> args</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // Method Body</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello, World</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li><p>Access Specifier: It determines the visibility of a variable or a method from another class</p></li><li><p>Return Type: A method may return a value. The return type is the data type of that value. If the method is not returning any values, then the return type is <code>void</code></p></li><li><p>Method Name: It is a unique identifier and it is case sensitive. It cannot be same as any other identifier declared in the class</p></li><li><p>Parameter List (optional): Enclosed between parentheses, the parameters are used to pass and receive data from a method. The parameter list refers to the type, order, and number of parameters of a method. Parameters are optional.</p></li><li><p>Method Body: This contains the set of instructions needed to be complete the required activity</p></li></ul><p>A method signature is a unique identification of a method for the C# compiler:</p><ul><li>Method name</li><li>The type and kind (value, reference, or output) of each of its formal parameters</li><li>Method signature does not include the return type</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">DoSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span></code></pre></div><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to “Parameters”">​</a></h4><p>Methods can have two types of parameters: required and optional</p><ul><li><p>Method call will fail if required arguments are not passed during method call</p></li><li><p>Optional parameters have a default value. The method that has optional parameters could be called without those arguments. If we provide the values as arguments for optional parameters then the default values will be overridden.</p></li><li><p><strong>Optional parameters must appear after all required parameters</strong> (Error CS1737):</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Print</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">SUM</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p><code>OptionalAttribute</code> can also be used to specify a parameter as optional</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Print</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Optional</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>Call with named argument (C# 4.0), arguments can be passed out of order</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Print</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">ADD</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 230</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// error CS8323: Named argument &#39;name&#39; is used out-of-position but is followed by an unnamed argument</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Print</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">ADD</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 230</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div></li><li><p><code>params</code>: a method parameter that takes a variable number of arguments. The parameter type must be a single dimensional array</p><ul><li>It makes the parameter optional</li><li>It must be the last parameter</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Algebra</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Sum</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">params</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> numbers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> total</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    foreach</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> num</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> numbers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      total</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +=</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> num</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> total</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> args</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">  Algebra</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> alg</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Algebra</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  alg</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Sum</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li></ul><h4 id="pass-by-reference" tabindex="-1">Pass By Reference <a class="header-anchor" href="#pass-by-reference" aria-label="Permalink to “Pass By Reference”">​</a></h4><p>When primitive data-types are passed as arguments to a method, the argument value gets copied. So changes made to the value inside the method will not reflect in the original variable.</p><ul><li>If the argument needs to be modified in the method, it needs to be passed by reference</li></ul><p>Arguments can be passed by reference using parameter modifiers:</p><ul><li><p><code>ref</code>: Keyword indicates that a value is passed by reference.</p><ul><li>Variables passed as <code>ref</code> arguments must be initialized before being passed in a method call.</li><li><strong>Arguments can be modified</strong></li></ul></li><li><p><code>out</code>: Keyword causes arguments to be passed by reference.</p><ul><li>Variables passed as <code>out</code> arguments don&#39;t have to be initialized before being passed in a method call.</li><li><strong>Arguments must be modified</strong>: Value must be assigned before the method returns</li><li>Enables a method to return multiple values (old way). <a href="#tuples">Tuples</a> are recommended for this.</li><li>Cannot be used on the first argument of an extension method</li></ul></li><li><p><code>in</code>: Keyword causes arguments to be passed by reference but ensures the argument is not modified.</p><ul><li>Variables passed as <code>in</code> arguments must be initialized before being passed in a method call.</li><li><strong>Arguments cannot be modified</strong></li><li>C# 7.2+</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> ChangeRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> numberRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    numberRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 25</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Inside the ChangeRef method the numberRef is </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">numberRef</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> ChangeOut</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">out</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> numberOut</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // numberOut must be assigned with a value before the method returns</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    numberOut</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 60</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Inside the ChangeOut method the numberOut is </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">numberOut</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> args</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> numberRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 15</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Before calling the ChangeRef method the numberRef is </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">numberRef</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    ChangeRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">ref</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> numberRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">After calling the ChangeRef method the numberRef is </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">numberRef</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // No need to declare numberOut before calling the method</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Before calling the ChangeOut method the numberOut is unassigned</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    ChangeOut</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">out</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> numberOut</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">After calling the ChangeOut method the numberOut is </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">numberOut</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li></ul><p>Function overloading:</p><ul><li><p>The <code>in</code>, <code>ref</code>, <code>out</code>, and <code>params</code> keywords are not considered part of the method signature for the purpose of overload resolution:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> CS0663_Example</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Compiler error CS0663: &quot;Cannot define overloaded</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // methods that differ only on ref and out&quot;.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> SampleMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">out</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> SampleMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li></ul><p>For reference types <code>ref</code> can be used:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> ChangeColor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Pen</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> pen</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    pen</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Color</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Green</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Inside the ChangeColor method the color is </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">pen</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">Color</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> CreateNewObjectWithoutRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Pen</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> pen</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    pen</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Pen</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Color</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Red</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Inside the CreateNewObjectWithoutRef method the color of new pen object is </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">pen</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">Color</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> CreateNewObjectWithRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">ref</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Pen</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> pen</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    pen</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Pen</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Color</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Yellow</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Inside the CreateNewObjectWithRef method the color of new pen object is </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">pen</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">Color</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> args</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">    Pen</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> pen</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Pen</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Color</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Blue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Before ChangeColor method: </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">pen</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">Color</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    ChangeColor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">pen</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">After the ChangeColor method: </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">pen</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">Color</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Before CreateNewObjectWithoutRef method: </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">pen</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">Color</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    CreateNewObjectWithoutRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">pen</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">After CreateNewObjectWithoutRef method: </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">pen</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">Color</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Before CreateNewObjectWithRef method: </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">pen</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">Color</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    CreateNewObjectWithRef</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">ref</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> pen</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">After CreateNewObjectWithRef method: </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">pen</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">Color</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p>The <code>in</code>, <code>ref</code>, and <code>out</code> keywords can&#39;t be used for the following kinds of methods:</p><ul><li>Async methods, defined using <code>async</code> modifier</li><li>Iterator methods, which include a <code>yield return</code> or <code>yield break</code> statement</li></ul><h4 id="partial-methods" tabindex="-1">Partial Methods <a class="header-anchor" href="#partial-methods" aria-label="Permalink to “Partial Methods”">​</a></h4><p>A partial class or struct may contain a partial method.</p><ul><li><p>The definition: One part of the class contains the signature of the method.</p></li><li><p>The implementation: An implementation can be defined in the same part or another part.</p></li><li><p>If the implementation is not supplied, then the method and all calls to the method are removed at compile time.</p></li><li><p>Implementation may be required depending on method signature.</p></li></ul><p>A partial method isn&#39;t required to have an implementation in the following cases:</p><ul><li>It doesn&#39;t have any accessibility modifiers (including the default <code>private</code>).</li><li>It returns <code>void</code>.</li><li>It doesn&#39;t have any <code>out</code> parameters.</li><li>It doesn&#39;t have any of the following modifiers <code>virtual</code>, <code>override</code>, <code>sealed</code>, <code>new</code>, or <code>extern</code>.</li></ul><p><em>Example:</em></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Definition in file1.cs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">partial</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> OnNameChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Implementation in file2.cs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">partial</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> OnNameChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // method body</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h4 id="extension-methods" tabindex="-1">Extension Methods <a class="header-anchor" href="#extension-methods" aria-label="Permalink to “Extension Methods”">​</a></h4><p>Extension methods enable you to &quot;add&quot; methods to existing types without creating a new derived type, recompiling, or otherwise modifying the original type</p><ul><li>Extension methods are a special kind of static method, but they are called as if they were instance methods on the extended type</li><li>They are defined in a static class</li><li>The first parameter of the method specifies which type the method operates on, and the parameter is preceded by the <code>this</code> modifier</li></ul><p><em>Example:</em></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> StringExtension</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> ToUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> str</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> str</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">ToUpper</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Program</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">John</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // The \`ToUpperCase\` method is called as if it were an instance method on the string type</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">ToUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li>Extension methods are only in scope when you explicitly import the namespace into your source code with a <code>using</code> directive</li></ul><h4 id="anonymous-methods" tabindex="-1">Anonymous Methods <a class="header-anchor" href="#anonymous-methods" aria-label="Permalink to “Anonymous Methods”">​</a></h4><p>An anonymous method is a method without a name</p><ul><li>It is defined using the <a href="#delegate"><code>delegate</code></a> keyword and can be assigned to a variable of delegate type</li><li>Anonymous methods are used to pass a code block as a delegate parameter</li></ul><p><em>Example:</em></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">delegate</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> PrintDelegate</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Program</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">    PrintDelegate</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> print</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> delegate</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello, World</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li>Static anonymous methods (C# 9) can be used to indicate no references to variables is intended</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">someMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><h3 id="object-oriented-programming" tabindex="-1">Object Oriented Programming <a class="header-anchor" href="#object-oriented-programming" aria-label="Permalink to “Object Oriented Programming”">​</a></h3><p>C# is an <a href="./../../Concepts/Designs/Programming_Paradigms/Object-Oriented_Programming.html">Object-Oriented Programming</a> language</p><p>The four basic principles of object-oriented programming are:</p><ul><li>Abstraction</li><li>Encapsulation</li><li><a href="#inheritance">Inheritance</a></li><li><a href="#polymorphism">Polymorphism</a></li></ul><h4 id="inheritance" tabindex="-1">Inheritance <a class="header-anchor" href="#inheritance" aria-label="Permalink to “Inheritance”">​</a></h4><p>Inheritance allows you to define a child class that reuses (inherits), extends, or modifies the behaviours of a parent class.</p><ul><li><strong>Base Class</strong>: The class whose members are inherited</li><li><strong>Derived Class</strong>: The class that inherits the members of the base class</li></ul><p>Inheritance applies only to classes and interfaces, not structs, delegates and enums</p><p><strong>C# and .NET support single inheritance only</strong>: a class can only inherit from a single class</p><ul><li>However, inheritance is transitive (multi-level inheritance)</li><li>C# supports multiple interface inheritance</li><li>Multiple class inheritance problem is called as <em>Diamond problem</em></li></ul><p>Not all members of a base class are inherited:</p><ul><li><p><strong>Static constructors</strong>: which initialize the static data of a class</p></li><li><p><strong>Instance constructors</strong>: which you call to create a new instance of the class. Each class must define its own constructors</p></li><li><p><strong>Finalizers</strong>: which are called by the runtime&#39;s garbage collector to destroy instances of a class</p></li></ul><h5 id="method-hiding" tabindex="-1">Method Hiding <a class="header-anchor" href="#method-hiding" aria-label="Permalink to “Method Hiding”">​</a></h5><p>Derived classes can hide the inherited members by providing an alternate implementation:</p><ul><li><p>If the derived class has a method of same signature as the parent then the derived class method hides the base class method</p></li><li><p>To make the hiding explicit add the <strong><code>new</code> keyword</strong>: <code>public new void PrintFullName()</code> in the derived class</p></li><li><p>If the <code>new</code> keyword is not used, the compiler will issue a warning</p></li></ul><p>Working with method hiding:</p><ul><li>The runtime will determine which method to call based on the reference type of the object rather than the object type</li><li>If interface is used, the method of the class that actually inherits and implements the interface will be called</li></ul><p>So, there is a difference how method hiding works with class and interface</p><ul><li><strong>Avoid using method hiding</strong> as it can lead to confusion</li><li>Just implement the interface instead of deriving from a class and hiding the method</li><li>Also, you can use different method names or use <code>virtual</code> and <code>override</code> keywords for different implementations</li></ul><h4 id="polymorphism" tabindex="-1">Polymorphism <a class="header-anchor" href="#polymorphism" aria-label="Permalink to “Polymorphism”">​</a></h4><p>Two distinct aspects of Polymorphism are:</p><ul><li>It allows you to invoke derived class methods through a base class reference during runtime</li><li>Derived classes can override Base class methods</li></ul><h5 id="method-overriding" tabindex="-1">Method Overriding <a class="header-anchor" href="#method-overriding" aria-label="Permalink to “Method Overriding”">​</a></h5><p>It is the ability to redefine the implementation of a method in a Derived class that inherits from a Base Class</p><p>When a method is overridden, the name and the parameters stay the same, but the implementation that gets called depends on the type of the object that&#39;s calling it</p><p>Overriding is known as <em>runtime (or dynamic) polymorphism</em> because the type of the calling object is not known until runtime, and therefore the method implementation that runs is determined at runtime</p><p>Base class can mark its methods that can be overridden, there are two types:</p><ul><li><p>Base class members must be marked as <code>virtual</code> for them to be overridden. <strong>Can be overridden</strong></p><ul><li>The derived class wants to extend the base class method implementation, the base class method must be called from the derived class method</li></ul></li><li><p>If the Base class members are marked as <code>abstract</code>, those members <strong>must be overridden</strong> by the derived class</p><ul><li>If a method is marked as <code>abstract</code>, the class must be marked as <a href="#abstract-class"><code>abstract</code></a> as well</li></ul></li></ul><p>The runtime determines which method to call based on the type of the object that invokes the method when the method is marked as <code>virtual</code></p><h5 id="method-overriding-vs-method-hiding" tabindex="-1">Method Overriding vs Method Hiding <a class="header-anchor" href="#method-overriding-vs-method-hiding" aria-label="Permalink to “Method Overriding vs Method Hiding”">​</a></h5><p>In method overriding a base class reference variable pointing to a child class object, will invoke the overridden method in the Child class</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> BaseClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> virtual</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Print</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Base Class Print Method</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> DerivedClass</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> BaseClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Print</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Child Class Print Method</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Program</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">    BaseClass</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> B</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> DerivedClass</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    B</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Print</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // &quot;Child Class Print Method&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p>In method hiding a base class reference variable pointing to a child class object, will invoke the hidden method in the Base class</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> BaseClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> virtual</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Print</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Base Class Print Method</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> DerivedClass</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> BaseClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Print</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Child Class Print Method</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Program</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">    BaseClass</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> B</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> DerivedClass</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    B</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Print</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // &quot;Base Class Print Method&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h5 id="method-overloading" tabindex="-1">Method Overloading <a class="header-anchor" href="#method-overloading" aria-label="Permalink to “Method Overloading”">​</a></h5><p>It is the ability to have multiple methods within the same class with the same name, but with different parameters or different parameter order (signature)</p><p>Overloading is known as compile-time (or static) polymorphism because each of the different overloaded methods is resolved when the application is compiled</p><h3 id="sealed-class" tabindex="-1">Sealed Class <a class="header-anchor" href="#sealed-class" aria-label="Permalink to “Sealed Class”">​</a></h3><p>A sealed class is a class that cannot be inherited from and serves as the final class in the inheritance hierarchy</p><ul><li>The <code>sealed</code> keyword is used to define a class as sealed</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> SealedClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Class members</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="abstract-class" tabindex="-1">Abstract Class <a class="header-anchor" href="#abstract-class" aria-label="Permalink to “Abstract Class”">​</a></h3><p>An abstract class is an <strong>incomplete class</strong> and hence <strong>cannot be instantiated</strong></p><ul><li>The <code>abstract</code> keyword is used to create an abstract class</li><li>An abstract class can <strong>only be used as base class</strong></li><li>An abstract class <strong>cannot be sealed</strong></li><li>An abstract class <em>may contain abstract members</em></li><li>A <strong>non-abstract class</strong> derived from an abstract class <strong>must provide implementations for all inherited abstract members</strong></li></ul><p><em>Example:</em></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Shape</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Area</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Perimeter</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Circle</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Shape</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Radius</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Area</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">PI</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Radius</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Radius</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Perimeter</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">PI</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Radius</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p>Abstract class vs Interface:</p><ul><li>Abstract class can have fields, constructors, and destructors but an interface cannot</li><li>An abstract class can have access modifiers but an interface cannot</li><li>An abstract class can have method implementations but an interface cannot</li><li>An abstract class can have constructors but an interface cannot</li></ul><p><em>Example:</em> A <code>Car</code> and a <code>Truck</code> share a lot of core properties and behaviour of an <code>Automobile</code> abstract class, but they also share some peripheral behaviour like Generate exhaust which even non automobile classes like <code>Drillers</code> or <code>PowerGenerators</code> share and doesn&#39;t necessarily defines a <code>Car</code> or a <code>Truck</code>, so <code>Car</code>, <code>Truck</code>, <code>Driller</code> and <code>PowerGenerator</code> can all share the same interface <code>IExhaust</code></p><h3 id="partial-classes" tabindex="-1">Partial Classes <a class="header-anchor" href="#partial-classes" aria-label="Permalink to “Partial Classes”">​</a></h3><p>It is possible to split the definition of a <code>class</code>, a <code>struct</code>, an <code>interface</code> or a method over two or more source files.</p><p>Each source file contains a section of the type or method definition, and all parts are combined when the application is compiled</p><p><em>Example:</em></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> partial</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Employee</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> DoWork</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> partial</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Employee</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> GoToLunch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li><p>Any members that are declared in a partial definition are available to all the other parts of the partial class</p></li><li><p>All the parts must use the <code>partial</code> keyword</p></li><li><p>All the parts must be available at compile time to form the final type</p></li><li><p>All the parts must have the same accessibility (such as <code>public</code>, <code>private</code>,...)</p></li><li><p>If any part is declared <code>abstract</code>, then the whole type is considered <code>abstract</code></p></li><li><p>If any part is declared <code>sealed</code>, then the whole type is considered <code>sealed</code></p></li><li><p>If any part declares a base type, then the whole type inherits that class.</p></li><li><p>All partial-type definitions meant to be parts of the same type must be defined in the same assembly and the same module (<code>.exe</code> or <code>.dll</code> file)</p></li></ul><h2 id="structure" tabindex="-1">Structure <a class="header-anchor" href="#structure" aria-label="Permalink to “Structure”">​</a></h2><p>A structure type (or <code>struct</code> type) is a value type that can encapsulate data and related functionality.</p><p>Structure is a way to write custom value-type using the keyword <code>struct</code></p><p>A <code>struct</code> type is similar to a <code>class</code> type in that it represents a structure with data members and function members. However, unlike classes, structs are value types and don&#39;t typically require heap allocation.</p><p>Struct types don&#39;t support user-specified inheritance, and all struct types implicitly inherit from type object.</p><ul><li><p>A struct can have most of the same features as a class; it can contain methods, fields, properties, constructors, and any of the other member types supported by classes, and we can use the same accessibility keywords, such as <code>public</code> and <code>internal</code>.</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Point</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> _x</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> _y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        _x</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        _y</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> X</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> _x</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Y</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> _y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>C# does not automatically support <code>==</code> for a <code>struct</code></p></li><li><p>If <code>==</code> is implemented then, <code>!=</code>, <code>Equals</code>, and <code>GetHashCode</code> must be implemented</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> operator</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> ==(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Point</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> p1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Point</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> p2</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> p1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">X</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> p2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">X</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> p1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Y</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> p2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> bool</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> !=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Point</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> p1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> p2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> p1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">X</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> !=</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> p2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">X</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> p1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Y</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> !=</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> p2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Equals</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> obj</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> is</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Point</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> p2</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &amp;&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">X</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> p2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">X</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &amp;&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Y</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> p2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> GetHashCode</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">X</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">GetHashCode</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p><code>GetHashCode</code>: returns an <code>int</code> that in some sense represents the value of the type.</p><ul><li><p>Useful when using hash tables</p></li><li><p><code>GetHashCode</code> must fulfil 2 requirements:</p><ol><li>It should return the same value if called n number of times when its own value dose not change</li><li>Two instances that have equal values according to their <code>Equals</code> methods, they must return the same hash code</li></ol></li><li><p>The default implementation of <code>GetHashCOde</code> for reference types meets only 1st requirement</p></li><li><p>The default implementation of <code>GetHashCOde</code> for value types meet both requirement, but use reflection (which is slow). So, they are implemented by the user</p></li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>Structure should be used if the <strong>instance size is under 16 bytes</strong></p></div><h3 id="class-vs-struct" tabindex="-1">Class vs Struct <a class="header-anchor" href="#class-vs-struct" aria-label="Permalink to “Class vs Struct”">​</a></h3><table tabindex="0"><thead><tr><th><code>class</code></th><th><code>struct</code></th></tr></thead><tbody><tr><td>Reference type</td><td>Value type</td></tr><tr><td>Stored on the Heap</td><td>Stored on Stack</td></tr><tr><td>Only the reference variable is destroyed after the scope is lost. The Object is later destroyed by garbage collector</td><td>Value type is destroyed immediately after the scope is lost</td></tr><tr><td>Destructor is present</td><td>Destructor is not present</td></tr><tr><td>Can have parameter less constructor</td><td>Cannot have parameter less constructor</td></tr><tr><td>Supports Inheritance</td><td>Dose not support Inheritance. Structs are sealed types</td></tr><tr><td>Can inherit from an interface</td><td>Can inherit from an interface</td></tr></tbody></table><h3 id="immutability" tabindex="-1">Immutability <a class="header-anchor" href="#immutability" aria-label="Permalink to “Immutability”">​</a></h3><p>C# 7.2. it is possible to declare a <code>struct</code> as readonly (immutable) by adding the <code>readonly</code> keyword.</p><p>Read-only struct:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> readonly</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Point</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        X</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        Y</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> X</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> DistanceFromOrigin</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">X</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> X</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Y</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p><code>readonly</code> keyword has two effects:</p><ul><li><p>C# compiler prevents modification either from outside or from within. Compiler will produce error is any fields are declared and if settable auto property is defined</p></li><li><p>Optimization can be made by the compiler with the usage of <code>readonly</code></p></li></ul><h2 id="interface" tabindex="-1">Interface <a class="header-anchor" href="#interface" aria-label="Permalink to “Interface”">​</a></h2><p>An interface is a reference type in C# that is similar to an abstract class because it contains only the declaration of the members, but not the implementation</p><ul><li><p>An <code>interface</code> type defines a contract as a named set of public members</p></li><li><p>Just like classes, interfaces also contain properties, methods, delegates, or events</p></li><li><p>But only declarations and no implementations. Beginning with C# 8.0 we can define an implementation when you declare a member of an interface (usually a default implementation)</p></li><li><p>Interface members are <code>public</code> by default. (C# 8.0 members can have access modifiers)</p></li><li><p>Interface cannot contain instance data such as fields, auto-implemented properties, or property-like events</p></li><li><p>A <code>class</code> or <code>struct</code> that implements an <code>interface</code> must provide implementations of the interface&#39;s members</p></li><li><p>An <code>interface</code> may inherit from multiple base interfaces, and a <code>class</code> or <code>struct</code> may implement multiple interfaces</p></li><li><p>Interfaces can inherit from other interfaces. A class or struct that inherits from this interface must provide implementation for all interface members in the entire interface inheritance chain</p></li><li><p>Instances of an interface cannot be created</p></li><li><p>An interface reference variable can point to a derived class object</p></li><li><p>Interface Naming Convention: Interface names are prefixed with <em>capital I</em></p></li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IEquatable</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Equals</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">T</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> obj</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="explicit-interface-implementation" tabindex="-1">Explicit Interface Implementation <a class="header-anchor" href="#explicit-interface-implementation" aria-label="Permalink to “Explicit Interface Implementation”">​</a></h3><p>A class or struct can implement multiple interfaces, and it can implement an interface multiple times</p><ul><li><p>If a class implements two interfaces that contain a member with the same signature, then implementing that member on the class will cause both interfaces to use that member as their implementation</p></li><li><p>An explicit interface implementation doesn&#39;t have an access modifier since it isn&#39;t accessible as a member of the type it&#39;s defined in</p></li></ul><p><em>Example:</em></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IControl</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Paint</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ISurface</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Paint</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> SampleClass</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IControl</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ISurface</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Both ISurface.Paint and IControl.Paint call this method.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Paint</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Paint method in SampleClass</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Usage</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">SampleClass</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> sample</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> SampleClass</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">IControl</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> control</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> sample</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">ISurface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> surface</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> sample</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// The following lines all call the same method.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">sample</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Paint</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">control</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Paint</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">surface</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Paint</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Output:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Paint method in SampleClass</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Paint method in SampleClass</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Paint method in SampleClass</span></span></code></pre></div><p>Explicit implementation:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> SampleClass</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IControl</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ISurface</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IControl</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Paint</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">IControl.Paint</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ISurface</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Paint</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">ISurface.Paint</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Usage</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">SampleClass</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> sample</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> SampleClass</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">IControl</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> control</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> sample</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">ISurface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> surface</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> sample</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// The following lines all call the same method.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//sample.Paint();</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // Compiler error.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">control</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Paint</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // Calls IControl.Paint on SampleClass.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">surface</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Paint</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // Calls ISurface.Paint on SampleClass.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Output:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// IControl.Paint</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// ISurface.Paint</span></span></code></pre></div><h3 id="marker-interface" tabindex="-1">Marker Interface <a class="header-anchor" href="#marker-interface" aria-label="Permalink to “Marker Interface”">​</a></h3><p>A marker interface is an interface that has no methods or properties declared in it</p><ul><li>It is used to mark a class so that it can be identified by the compiler</li><li>It is used to provide metadata to the class</li><li>It is used to provide run-time information about the object</li></ul><p><em>Example:</em></p><ul><li>Enabling type-checking at runtime</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IMyInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IMyInterface</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Program</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">        MyClass</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> is</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IMyInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">            Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Object is of IMyInterface type</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li>The <code>IAggregateRoot</code> marker interface restricts the <code>DemoRepository&lt;T&gt;</code> to only accept types that represent aggregate roots, ensuring type safety and alignment with domain design principles</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Demo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Demo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Models</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Demo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Common</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> booksRepo</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> DemoRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Book</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> DemoDatatSource</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">().</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Books</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">bookspRepo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">GetAll</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">ForEach</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// releasesRepo is not needed as it should be used in the same way as booksRepo</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// To prevent this, we can use an marker interface to restrict the usage</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// of the repository to only aggregate roots</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// All models that are aggregate roots should implement \`IAggregateRoot\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> releasesRepo</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> DemoRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Release</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> DemoDatatSource</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">().</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Releases</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// defining a generic type constraint</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> where</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IAggregateRoot</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">  IEnumerable</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> GetAll</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> DemoRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">IEnumerable</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> where</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IAggregateRoot</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IEnumerable</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> GetAll</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// IAggregateRoot is a marker interface</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IAggregateRoot</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Book</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IAggregateRoot</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Title</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// As Release does not implement \`IAggregateRoot\`, you cannot use it with \`DemoRepository\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Release</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Title</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h2 id="attributes" tabindex="-1">Attributes <a class="header-anchor" href="#attributes" aria-label="Permalink to “Attributes”">​</a></h2><p>Attributes provide a powerful method of associating metadata, or declarative information, with code (assemblies, types, methods, properties, and so forth). After an attribute is associated with a program entity, the attribute can be queried at run time by using a technique called <a href="#reflection">reflection</a></p><p>An attribute is a class that inherits from <code>System.Attribute</code> base class</p><p>Attributes have the following properties:</p><ul><li>Attributes add metadata to your program</li><li>one or more attributes can be applied</li><li>Attributes can accept arguments</li></ul><p>There are several Pre-defined Attributes provided by .NET such as:</p><ul><li><code>Obsolete</code>: Marks types and type members outdated</li><li><code>WebMethod</code>: To expose a method as an XML Web service method</li><li><code>Serializable</code>: Indicates that a class can be serialized</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Serializable</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> SampleClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Objects of this type can be serialized.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p>Attribute Targets:</p><p>The target of an attribute is the entity which the attribute applies to (such as a class, method, or an entire assembly)</p><ul><li><p>By default, an attribute applies to the element that follows it</p></li><li><p>To explicitly identify, whether an attribute is applied to a method, or to its parameter, or to its return value:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span></code></pre></div></li></ul><table tabindex="0"><thead><tr><th>Target value</th><th>Applies to</th></tr></thead><tbody><tr><td><code>assembly</code></td><td>Entire assembly</td></tr><tr><td><code>module</code></td><td>Current assembly module</td></tr><tr><td><code>field</code></td><td>Field in a class or a struct</td></tr><tr><td><code>event</code></td><td>Event</td></tr><tr><td><code>method</code></td><td>Method or <code>get</code> and <code>set</code> property accessors</td></tr><tr><td><code>param</code></td><td>Method parameters or <code>set</code> property accessor parameters</td></tr><tr><td><code>property</code></td><td>Property</td></tr><tr><td><code>return</code></td><td>Return value of a method, property indexer, or <code>get</code> property accessor</td></tr><tr><td><code>type</code></td><td>Struct, class, interface, enum, or delegate</td></tr></tbody></table><p><em>Example:</em></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// default: applies to method</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">ValidatedContract</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Method1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// applies to method</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">method</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ValidatedContract</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Method2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// applies to parameter</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Method3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">([</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">ValidatedContract</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> contract</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// applies to return value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ValidatedContract</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Method4</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span></code></pre></div><h3 id="custom-attribute" tabindex="-1">Custom Attribute <a class="header-anchor" href="#custom-attribute" aria-label="Permalink to “Custom Attribute”">​</a></h3><p>Create a class that derives directly or indirectly from <code>System.Attribute</code></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">System</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">AttributeUsage</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">AttributeTargets</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Class</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">                       System</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">AttributeTargets</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Struct</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">                       AllowMultiple</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // multiuse attribute</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> AuthorAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Attribute</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> AuthorAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        version</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Usage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Author</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">P. Ackerman</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> version</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1.1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Author</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">R. Koch</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> version</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> SampleClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // P. Ackerman&#39;s code goes here...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li><code>AuthorAttribute</code> is the attribute&#39;s name, <code>Attribute</code> suffix can be omitted from the name while using the attribute</li><li><code>name</code> is a positional parameter</li><li>Any public read-write fields or properties are named parameters (in this case, <code>version</code>)</li><li>Using <code>AttributeUsage</code> attribute we can specify the valid use cases, here this attribute is valid only on class and struct declarations</li><li><code>AllowMultiple</code> can make a custom attribute single-use or multiuse</li></ul><h2 id="reflection" tabindex="-1">Reflection <a class="header-anchor" href="#reflection" aria-label="Permalink to “Reflection”">​</a></h2><p>Reflection provides objects (of type Type) that describe assemblies, modules, and types.</p><ul><li>Reflection is the ability of inspecting an assemblies metadata at runtime</li></ul><p>You can use reflection to:</p><ul><li><p>Dynamically create an instance of a type</p><ul><li>Late binding can be achieved by using reflection. We can use reflection to dynamically create an instance of a type, about which we don&#39;t have any information at compile time. So, reflection enables us to use code that is not available at compile time.</li></ul></li><li><p>Bind the type to an existing object</p></li><li><p>Get the type from an existing object and invoke its methods</p></li><li><p>Access its fields and properties.</p></li></ul><p>Reflection enables to access attributes</p><ul><li>The classes that give access to the metadata of a running program are in the <code>System.Reflection</code> namespace.</li></ul><p><em>Example:</em></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Using Reflection to get information of an Assembly:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Assembly</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> info</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">).</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Assembly</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Initialise t as typeof string</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> t</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Name : {0}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> t</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>The C# keywords <code>protected</code> and <code>internal</code> have no meaning in Intermediate Language (IL) and are not used in the reflection APIs. The corresponding terms in IL are <em>Family</em> and <em>Assembly</em>. To identify an <code>internal</code> method using reflection, use the <code>IsAssembly</code> property. To identify a <code>protected internal</code> method, use the <code>IsFamilyOrAssembly</code>.</p></div><h3 id="late-binding-or-dynamic-binding" tabindex="-1">Late Binding or Dynamic Binding <a class="header-anchor" href="#late-binding-or-dynamic-binding" aria-label="Permalink to “Late Binding or Dynamic Binding”">​</a></h3><p><em>Example:</em></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">  Assembly</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> executingAssembly</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Assembly</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">GetExecutingAssembly</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">  Type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> customerType</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> executingAssembly</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">GetType</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Something.Customer</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> customerInstance</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Activator</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">CreateInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">customerType</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">  MethodInfo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> getFullNameMethod</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> customerType</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">GetMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">GetFullName</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> parameters</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  parameters</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Something</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  parameters</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Tech</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> fullName</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">getFullNameMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">customerInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> parameters</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h2 id="exception-handling" tabindex="-1">Exception Handling <a class="header-anchor" href="#exception-handling" aria-label="Permalink to “Exception Handling”">​</a></h2><p>An exception is an unforeseen error that occurs when a program is running</p><p>An exception is actually a class that derives from <code>System.Exception</code> class</p><ul><li>This class has several useful properties: <ul><li><p><code>Message</code>: Gets a message that describes that current exception</p></li><li><p><code>StackTrace</code>: Provides the call stack to the line number in the method where the exception occurred</p></li></ul></li></ul><p>Don&#39;t catch an exception unless you can handle it and leave the application in a known state.</p><ul><li>If you catch <code>System.Exception</code>, re-throw it using the throw keyword at the end of the catch block.</li></ul><h3 id="try-catch-block" tabindex="-1">Try-Catch Block <a class="header-anchor" href="#try-catch-block" aria-label="Permalink to “Try-Catch Block”">​</a></h3><p>Exception handling uses the <code>try</code>, <code>catch</code>, and <code>finally</code> keywords to try actions that may not succeed, to handle failures when you decide that it&#39;s reasonable to do so, and to clean up resources afterward</p><ul><li><p>A <code>try</code> block without a <code>catch</code> or <code>finally</code> block causes a compiler error.</p></li><li><p><code>finally</code>: block run when control leaves a <code>try</code> statement.</p><ul><li>The transfer of control can occur as a result of normal execution, of execution of a <code>break</code>, <code>continue</code>, <code>goto</code>, or <code>return</code> statement, or of propagation of an exception out of the <code>try</code> statement.</li></ul></li></ul><p><em>Syntax:</em></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">try</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // expressions that could cause an exception</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">SomeSpecificException</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> ex</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // handle exception</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">finally</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // executed regardless of if an exception is thrown</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // use to release resources</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p>Catch specific exceptions:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    try</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // expressions that could cause an exception</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    catch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">DivideByZeroException</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> ex</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Write</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Cannot divide by zero. Please try again.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    catch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">InvalidOperationException</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> ex</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Write</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Not a valid number. Please try again.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    catch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">FormatException</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> ex</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Write</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Not a valid number. Please try again.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    catch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Exception</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> ex</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Write</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Any exception that previous catch blocks didn&#39;t handle.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p>A <code>catch</code> block can specify the type of exception to catch.</p><ul><li>The type specification is called an <em>exception filter</em></li><li>The exception type should be derived from <code>Exception</code></li><li>The catch blocks are evaluated from top to bottom in your code, but only one catch block is executed for each exception that is thrown.</li></ul><h3 id="create-exception" tabindex="-1">Create Exception <a class="header-anchor" href="#create-exception" aria-label="Permalink to “Create Exception”">​</a></h3><p>Exceptions are created by using the <code>throw</code> keyword</p><p>Throw exceptions when:</p><ul><li><p>The method can&#39;t complete its defined functionality:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> CopyObject</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">SampleClass</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> original</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    _</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> original</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ??</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ArgumentException</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Parameter cannot be null</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> nameof</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">original</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>An inappropriate call to an object is made, based on the object state:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ProgramLog</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">    FileStream</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> logFile</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> OpenLog</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">FileInfo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> fileName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> FileMode</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> mode</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> WriteLog</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">logFile</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">CanWrite</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> InvalidOperationException</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Logfile cannot be read-only</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // Else write data to the log and return.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>When an argument to a method causes an exception:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> GetValueFromArray</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> array</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    try</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> array</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    catch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">IndexOutOfRangeException</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> ex</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ArgumentException</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Index is out of range</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> nameof</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">),</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> ex</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li></ul><p>Create custom Exception filter class:</p><ul><li><p>Derive from <code>Exception</code> class</p></li><li><p>The derived classes should define at least 4 constructors:</p><ul><li>one parameterless constructor</li><li>one that sets the message property</li><li>one that sets both the Message and InnerException properties</li><li>one constructor that is used to serialize the exception.</li></ul></li><li><p>New exception classes should be serializable.</p></li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Serializable</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> InvalidDepartmentException</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Exception</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> InvalidDepartmentException</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> base</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> InvalidDepartmentException</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> base</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> InvalidDepartmentException</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Exception</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> inner</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> base</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> inner</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // A constructor is needed for serialization when an</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // exception propagates from a remoting server to the client.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    protected</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> InvalidDepartmentException</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">System</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Runtime</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Serialization</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">SerializationInfo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> info</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">        System</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Runtime</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Serialization</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">StreamingContext</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> base</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p>Re-throwing an exception:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">try</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">NullReferenceException</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    throw</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h2 id="pre-processing-directives" tabindex="-1">Pre-Processing Directives <a class="header-anchor" href="#pre-processing-directives" aria-label="Permalink to “Pre-Processing Directives”">​</a></h2><p>C# doesn&#39;t have a full pre-processing stage like C, it has limited pre-processor directives</p><h3 id="compilation-symbols" tabindex="-1">Compilation Symbols <a class="header-anchor" href="#compilation-symbols" aria-label="Permalink to “Compilation Symbols”">​</a></h3><p><code>#define</code>: directive that lets you define a <em>compilation symbol</em>.</p><ul><li><p>These symbols are commonly used in conjunction with the <code>#if</code> directive to compile code in different ways for different situations.</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> DEBUG</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Starting work</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">endif</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    DoWork</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> DEBUG</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Finished work</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">endif</span></span></code></pre></div></li><li><p>They can be defined in Visual Studio or by defining values in <code>&lt;DefineConstants&gt;</code> element of any <code>&lt;PropertyGroup&gt;</code></p></li></ul><p>There is another (better) way to handle which code to run during which mode of compilation, that is using an attribute defined by .NET class library called <code>ConditionalAttribute</code></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">System</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Diagnostics</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Conditional</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">DEBUG</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> ShowDebugInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> o</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">o</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="region" tabindex="-1">Region <a class="header-anchor" href="#region" aria-label="Permalink to “Region”">​</a></h3><p><code>#region</code> and <code>#endregion</code> define a region inside the code that can be collapsed by the editor. They can be nested.</p><p>The compiler ignores these and throws error if a <code>#region</code> dose not have a corresponding <code>#endregion</code> directive.</p><h3 id="others" tabindex="-1">Others <a class="header-anchor" href="#others" aria-label="Permalink to “Others”">​</a></h3><ul><li><p><code>#errors</code> and <code>#warnings</code> can be used to throw errors and warnings during compilation if certain criteria is met.</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> NETSTANDARD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  #</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">error</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> .NET Standard is not a supported target for this source file</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">endif</span></span></code></pre></div></li><li><p><code>#line</code>: specifics the line number at which the actual error occurred</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">line</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 123</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> &quot;Foo.cs&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">    intt</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div></li><li><p><code>#pragma</code>: provides 2 features:</p><ul><li>Disable selected compiler warnings</li><li>And also override the checksum values the compiler puts into the <code>.pdb</code> file</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">#</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">pragma</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> warning</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> disable</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> CS0168</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div></li><li><p><code>#nullable</code>: allows fine-grained control of the nullable annotation context</p></li></ul><h2 id="generics" tabindex="-1">Generics <a class="header-anchor" href="#generics" aria-label="Permalink to “Generics”">​</a></h2><p>Generic (C# 2.0) is a class which allows the user to define classes and methods with the placeholder</p><ul><li>Generics allow us to design classes and methods decoupled from the data types</li></ul><p>By using a generic type parameter <code>T</code>, we can write a single class that other client code can use without incurring the cost or risk of runtime casts or boxing operations:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Declare the generic class.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> GenericList</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">T</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> input</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> TestGenericList</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ExampleClass</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // Declare a list of type int.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">        GenericList</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> list1</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> GenericList</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        list1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // Declare a list of type string.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">        GenericList</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> list2</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> GenericList</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        list2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // Declare a list of type ExampleClass.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">        GenericList</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">ExampleClass</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> list3</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> GenericList</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">ExampleClass</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        list3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ExampleClass</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li>Generic classes are extensively used by collection classes available in <code>System.Collections.Generic</code> namespace</li><li>We can create generic interfaces, classes, methods, events, and delegates</li></ul><p>They provide:</p><ul><li>Re-usability</li><li>Type safety</li><li>Efficiency</li></ul><h3 id="generic-collections" tabindex="-1">Generic Collections <a class="header-anchor" href="#generic-collections" aria-label="Permalink to “Generic Collections”">​</a></h3><p>Generic collections allow users to create strongly typed collections that provide better type safety and performance than non-generic strongly typed collections</p><h4 id="list-collection" tabindex="-1">List Collection <a class="header-anchor" href="#list-collection" aria-label="Permalink to “List Collection”">​</a></h4><p>Represents a strongly typed list of objects that can be accessed by index</p><ul><li>Provides methods to search, sort, and manipulate lists</li><li>Unlike arrays, lists can grow in size automatically</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Collections</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Generic</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Simple business object. A \`PartId\` is used to identify the type of part</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// but the part name can change</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Part</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IEquatable</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Part</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> PartName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> PartId</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> ToString</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">ID: </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> PartId</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">   Name: </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> PartName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Equals</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> obj</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">        Part</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> objAsPart</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Part</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">objAsPart</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        else</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Equals</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">objAsPart</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> GetHashCode</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> PartId</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Equals</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Part</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> other</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">other</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">PartId</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Equals</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">other</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">PartId</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Should also override == and != operators.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Create a list of parts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Part</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> parts</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Part</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Add parts to the list.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">parts</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Part</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> PartName</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">crank arm</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> PartId</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1234</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">parts</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Part</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> PartName</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">chain ring</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> PartId</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1334</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">parts</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Part</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> PartName</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">regular seat</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> PartId</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1434</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">parts</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Part</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> PartName</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">banana seat</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> PartId</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1444</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">parts</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Part</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> PartName</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">cassette</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> PartId</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1534</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">parts</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Part</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> PartName</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">shift lever</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> PartId</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1634</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">parts</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 6</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Write out the parts in the list. This will call the overridden \`ToString\` method</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// in the Part class</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">foreach</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Part</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> aPart</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> parts</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">aPart</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">ID: 1234   Name: crank arm</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">ID: 1334   Name: chain ring</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">ID: 1434   Name: regular seat</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">ID: 1444   Name: banana seat</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">ID: 1534   Name: cassette</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">ID: 1634   Name: shift lever</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Check the list for part #1734. This calls the IEquatable.Equals method</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// of the Part class, which checks the PartId for equality</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> doseItContain</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> parts</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Contains</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Part</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> PartId</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1734</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> PartName</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> })</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Contains(&quot;1734&quot;): False</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Determines whether the list contains elements that match the conditions defined</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// by the specified predicate</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> doseItContain</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> parts</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Exists</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">cust</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> cust</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">PartName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">StartsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">b</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// True</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Insert a new item at position 2.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">parts</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Insert</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Part</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> PartName</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">brake lever</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> PartId</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1834</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">parts</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 1434</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// This will remove part 1534 even though the PartName is different,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// because the Equals method only checks PartId for equality</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">parts</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Remove</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Part</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> PartId</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1534</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> PartName</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">cogs</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// This will remove the part at index 3.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">parts</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">RemoveAt</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Concat 2 lists</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">parts</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">AddRange</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Part</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;{});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Get range of elements between indexes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">parts</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">GetRange</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><ul><li><p>Sort, reverse a list of simple types</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> numbers</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 7</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">numbers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Sort</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">numbers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span></code></pre></div></li><li><p>To use <code>Sort</code>, <code>Reverse</code> on collection of complex type we need to implement <code>IComparable</code> interface that tells .NET on what bases to sort the items</p><ul><li>The <code>CompareTo()</code> can return: <ul><li><code>&gt; 0</code>: The current instance is greater than the object being compared with</li><li><code>&lt; 0</code>: The current instance is less than the object being compared with</li><li><code>0</code>: The current instance is equal to the object being compared with</li></ul></li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// public class Temperature : IComparable&lt;Temperature&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Temperature</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IComparable</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // The temperature value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> temperatureF</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // public int CompareTo(Temperature obj)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> CompareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> obj</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">        Temperature</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> otherTemperature</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Temperature</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">otherTemperature</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">temperatureF</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">CompareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">otherTemperature</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">temperatureF</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        else</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">          throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ArgumentException</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Object is not a Temperature</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Fahrenheit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">        get</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">temperatureF</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">        set</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">temperatureF</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Celsius</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">        get</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">temperatureF</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 32</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">5.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">        set</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">temperatureF</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 9.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 32</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>Write custom <code>Sort</code> functionality by implementing <code>IComparer</code> interface</p><ul><li>Exposes a method that compares two objects</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Collections</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Example</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ReverserClass</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IComparer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">      // Call CaseInsensitiveComparer.Compare with the parameters reversed.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IComparer</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Compare</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">          return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ((</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> CaseInsensitiveComparer</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Compare</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">      // Initialize a string array.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> words</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">The</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">quick</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">brown</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">fox</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">jumps</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">over</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">                        &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">the</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">lazy</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">dog</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">      // Display the array values.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">The array initially contains the following values:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> );</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">      PrintIndexAndValues</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">words</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">      // Sort the array values using the default comparer.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      Array</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Sort</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">words</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">After sorting with the default comparer:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> );</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">      PrintIndexAndValues</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">words</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">      // Sort the array values using the reverse case-insensitive comparer.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      Array</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Sort</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">words</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ReverserClass</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">After sorting with the reverse case-insensitive comparer:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">      PrintIndexAndValues</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">words</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> PrintIndexAndValues</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">IEnumerable</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      foreach</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> item</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">   [</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">]:  </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">item</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// The example displays the following output:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//       The array initially contains the following values:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [0]:  The</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [1]:  quick</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [2]:  brown</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [3]:  fox</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [4]:  jumps</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [5]:  over</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [6]:  the</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [7]:  lazy</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [8]:  dog</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//       After sorting with the default comparer:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [0]:  brown</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [1]:  dog</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [2]:  fox</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [3]:  jumps</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [4]:  lazy</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [5]:  over</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [6]:  quick</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [7]:  the</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [8]:  The</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//       After sorting with the reverse case-insensitive comparer:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [0]:  the</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [1]:  The</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [2]:  quick</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [3]:  over</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [4]:  lazy</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [5]:  jumps</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [6]:  fox</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [7]:  dog</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//          [8]:  brown</span></span></code></pre></div></li><li><p>One of the overloads of the <code>Sort()</code> method in <code>List</code> class expects <code>Comparison</code> delegate to be passed as an argument:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Collections</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Generic</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Example</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> CompareDinosByLength</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">            {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">                // If x is null and y is null, they&#39;re</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">                // equal.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">                return</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">            }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">            else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">            {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">                // If x is null and y is not null, y</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">                // is greater.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">                return</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">            // If x is not null...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">            //</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">                // ...and y is null, x is greater.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">            {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">                return</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">            }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">            else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">            {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">                // ...and y is not null, compare the</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">                // lengths of the two strings.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">                //</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">                int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> retval</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Length</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">CompareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Length</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">retval</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">                {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">                    // If the strings are not of equal length,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">                    // the longer string is greater.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">                    //</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">                    return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> retval</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">                }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">                else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">                {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">                    // If the strings are of equal length,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">                    // sort them with ordinary string comparison.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">                    //</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">                    return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">CompareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">        List</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> dinosaurs</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        dinosaurs</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Pachycephalosaurus</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        dinosaurs</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Amargasaurus</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        dinosaurs</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        dinosaurs</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        dinosaurs</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Mamenchisaurus</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        dinosaurs</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Deinonychus</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">        Display</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">dinosaurs</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Sort with generic Comparison&lt;string&gt; delegate:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        dinosaurs</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Sort</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">CompareDinosByLength</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">        Display</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">dinosaurs</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Display</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        foreach</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">                Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">(null)</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">            else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">                Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">{0}</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> s</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">/* This code example produces the following output:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&quot;Pachycephalosaurus&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&quot;Amargasaurus&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">(null)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&quot;Mamenchisaurus&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&quot;Deinonychus&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">Sort with generic Comparison&lt;string&gt; delegate:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">(null)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&quot;Deinonychus&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&quot;Amargasaurus&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&quot;Mamenchisaurus&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&quot;Pachycephalosaurus&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">*/</span></span></code></pre></div></li></ul><h4 id="dictionary" tabindex="-1">Dictionary <a class="header-anchor" href="#dictionary" aria-label="Permalink to “Dictionary”">​</a></h4><p>A dictionary represents a collection of keys and values</p><ul><li><p>Dictionary class is present in <code>System.Collections.Generic</code> namespace</p></li><li><p>When creating a dictionary, we need to specify the type for key and value</p></li><li><p>Dictionary provides fast lookups for values using keys</p></li><li><p><strong>Keys in the dictionary must be unique</strong></p></li><li><p>Get the number of key/value pairs contained in that dictionary using <code>Count</code> property</p></li><li><p>Clear the dictionary using <code>Clear()</code> instance method</p></li><li><p>LINQ can be used on a dictionary</p></li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Create a new dictionary of strings, with string keys</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Dictionary</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> openWith</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Dictionary</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Add some elements to the dictionary. There are no</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// duplicate keys, but some of the values are duplicates</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">openWith</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">txt</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">notepad.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">openWith</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">bmp</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">paint.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">openWith</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">dib</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">paint.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">openWith</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">rtf</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">wordpad.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// The Add method throws an exception if the new key is</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// already in the dictionary</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">try</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    openWith</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">txt</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">winword.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">ArgumentException</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">An element with Key = </span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">txt</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> already exists.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// The Item property is another name for the indexer, so you</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// can omit its name when accessing elements</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">For key = </span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">rtf</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">, value = {0}.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    openWith</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">rtf</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// The indexer can be used to change the value associated</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// with a key</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">openWith</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">rtf</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">winword.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">For key = </span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">rtf</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">, value = {0}.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    openWith</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">rtf</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// If a key does not exist, setting the indexer for that key</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// adds a new key/value pair</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">openWith</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">doc</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">winword.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// The indexer throws an exception if the requested key is</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// not in the dictionary</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">try</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">For key = </span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">tif</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">, value = {0}.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        openWith</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">tif</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">KeyNotFoundException</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Key = </span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">tif</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> is not found.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// When a program often has to try keys that turn out not to</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// be in the dictionary, TryGetValue can be a more efficient</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// way to retrieve values</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">openWith</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">TryGetValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">tif</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> out</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">For key = </span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">tif</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">, value = {0}.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Key = </span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">tif</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> is not found.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// ContainsKey can be used to test keys before inserting</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// them</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">openWith</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">ContainsKey</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">ht</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    openWith</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">ht</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">hypertrm.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Value added for key = </span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">ht</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">: {0}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        openWith</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">ht</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// When you use foreach to enumerate dictionary elements,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// the elements are retrieved as KeyValuePair objects</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">foreach</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> KeyValuePair</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> kvp</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> openWith</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Key = {0}, Value = {1}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        kvp</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Key</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> kvp</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// To get the values alone, use the Values property</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Dictionary</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">ValueCollection</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> valueColl</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    openWith</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Values</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// The elements of the ValueCollection are strongly typed</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// with the type that was specified for dictionary values</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">foreach</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> valueColl</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Value = {0}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> s</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// To get the keys alone, use the Keys property</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Dictionary</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">KeyCollection</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> keyColl</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    openWith</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Keys</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// The elements of the KeyCollection are strongly typed</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// with the type that was specified for dictionary keys</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">foreach</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> keyColl</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Key = {0}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> s</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Use the Remove method to remove a key/value pair</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Remove(</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">doc</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">openWith</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Remove</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">doc</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">openWith</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">ContainsKey</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">doc</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Key </span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">doc</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> is not found.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">/* This code example produces the following output:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">An element with Key = &quot;txt&quot; already exists</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">For key = &quot;rtf&quot;, value = wordpad.exe</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">For key = &quot;rtf&quot;, value = winword.exe</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">Key = &quot;tif&quot; is not found</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">Key = &quot;tif&quot; is not found</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">Value added for key = &quot;ht&quot;: hypertrm.exe</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">Key = txt, Value = notepad.exe</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">Key = bmp, Value = paint.exe</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">Key = dib, Value = paint.exe</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">Key = rtf, Value = winword.exe</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">Key = doc, Value = winword.exe</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">Key = ht, Value = hypertrm.exe</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">Value = notepad.exe</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">Value = paint.exe</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">Value = paint.exe</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">Value = winword.exe</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">Value = winword.exe</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">Value = hypertrm.exe</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">Key = txt</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">Key = bmp</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">Key = dib</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">Key = rtf</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">Key = doc</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">Key = ht</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">Remove(&quot;doc&quot;)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">Key &quot;doc&quot; is not found</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">*/</span></span></code></pre></div><ul><li><p>Convert an array or list into dictionary:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> customer</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 3 customers are added to the array</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// To convert an array to dictionary</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// provide the key and value</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Dictionary</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> dict</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> customer</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">ToDictionary</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">cust</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> cust</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">ID</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> cust</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> cust</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div></li></ul><h4 id="queue" tabindex="-1">Queue <a class="header-anchor" href="#queue" aria-label="Permalink to “Queue”">​</a></h4><p>Represents a first-in, first-out (FIFO) collection of objects</p><ul><li><p>This class implements a generic queue as a circular array</p></li><li><p>Queues and stacks are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value</p></li><li><p>Objects stored in a <code>Queue&lt;T&gt;</code> are inserted at one end and removed from the other</p></li><li><p><code>Queue&lt;T&gt;</code> accepts <code>null</code> as a valid value for reference types and allows duplicate elements</p></li></ul><p>The 3 main operations performed on a <code>Queue&lt;T&gt;</code>:</p><ul><li><p><code>Enqueue</code> adds an element to the end of the <code>Queue&lt;T&gt;</code></p></li><li><p><code>Dequeue</code> removes the oldest element from the start of the <code>Queue&lt;T&gt;</code></p></li><li><p><code>Peek</code> peek returns the oldest element that is at the start of the <code>Queue&lt;T&gt;</code> but does not remove it from the <code>Queue&lt;T&gt;</code></p></li></ul><p><em>Example:</em></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Queue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> numbers</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Queue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">numbers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Enqueue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">one</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">numbers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Enqueue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">two</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">numbers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Enqueue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">three</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">numbers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Enqueue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">four</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">numbers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Enqueue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">five</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// A queue can be enumerated without disturbing its contents</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">foreach</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> numbers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">/* This code example produces the following output:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">one</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">two</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">three</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">four</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">five</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">numbers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Dequeue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//  &#39;one&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">numbers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Peek</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Peek at next item to dequeue: two</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Create a copy of the queue, using the ToArray method and the</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// constructor that accepts an IEnumerable&lt;T&gt;.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Queue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> queueCopy</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Queue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">numbers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">ToArray</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">());</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Create an array twice the size of the queue and copy the</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// elements of the queue, starting at the middle of the</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// array</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> array2</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">numbers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Count</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">numbers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">CopyTo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">array2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> numbers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Create a second queue, using the constructor that accepts an</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// IEnumerable(Of T)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Queue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> queueCopy2</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Queue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">array2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Contents of the second copy, with duplicates and nulls</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">foreach</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> queueCopy2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">queueCopy</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Contains</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">four</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// True</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">queueCopy</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Clear</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">queueCopy</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Count</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 0</span></span></code></pre></div><h4 id="stack" tabindex="-1">Stack <a class="header-anchor" href="#stack" aria-label="Permalink to “Stack”">​</a></h4><p>Stack is a generic LIFO (Last In First Out) collection class</p><ul><li><p>To insert an item at the top of the stack, use <code>Push()</code> method</p></li><li><p>To remove and return the item that is present at the top of the stack, use <code>Pop()</code> method</p></li></ul><h2 id="pattern-matching" tabindex="-1">Pattern Matching <a class="header-anchor" href="#pattern-matching" aria-label="Permalink to “Pattern Matching”">​</a></h2><p>Pattern matching is a technique where you test an expression to determine if it has certain characteristics</p><p>Supported patterns:</p><ul><li><p><code>is</code> expression</p><ul><li>Null check:</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> maybe</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 12</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// declaration pattern</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">maybe</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> is</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">The nullable int &#39;maybe&#39; has the value </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">number</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">The nullable int &#39;maybe&#39; doesn&#39;t hold a value</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> message</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> ReadMessageOrDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// constant pattern (to compare the variable with \`null\`)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// the \`not\` is a logical pattern</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">message</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> is</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> not</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li>Type check:</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> T</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> MidPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">IEnumerable</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> sequence</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">sequence</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> is</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IList</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Count</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    else</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">sequence</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> is</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ArgumentNullException</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">nameof</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">sequence</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">),</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Sequence can&#39;t be null.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> halfLength</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> sequence</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">halfLength</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> halfLength</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> sequence</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Skip</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">halfLength</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">First</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p><a href="#switch"><code>switch</code></a> expression</p></li></ul><h2 id="asynchronous-programming" tabindex="-1">Asynchronous Programming <a class="header-anchor" href="#asynchronous-programming" aria-label="Permalink to “Asynchronous Programming”">​</a></h2><p>Asynchronous (async) programming is a means of parallel programming in which a unit of work runs separately from the main application thread and notifies the calling thread of its completion, failure, or progress</p><ul><li>It is a way to achieve parallelism in a program</li><li>It is used to improve the responsiveness of the application</li></ul><p>Old .NET Framework used Asynchronous Programming Model (APM), with .NET Core and .NET 4.5, Task-based Asynchronous Pattern (TAP) was introduced</p><h3 id="task-based-asynchronous-pattern-tap" tabindex="-1">Task-based Asynchronous Pattern (TAP) <a class="header-anchor" href="#task-based-asynchronous-pattern-tap" aria-label="Permalink to “Task-based Asynchronous Pattern (TAP)”">​</a></h3><p>To create an asynchronous method:</p><ul><li>Return <code>Task</code> or <code>Task&lt;T&gt;</code> from the method</li><li>Use <code>async</code> modifier in the method signature</li><li>Append <code>Async</code> to the method name (not mandatory)</li><li>Use <code>await</code> expression to call asynchronous methods</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Threading</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Task</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> DoSomethingAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> SomeTimeConsumingMethodAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p>What happens in an async method?</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 1. The method is called and awaits the async method</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> GetUrlContentLengthAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> client</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // 2. Call the async method</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">  Task</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> getStringTask</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> client</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">GetStringAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://en.wikipedia.org/wiki/Main_Page</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // 3. Do some independent work as the GetStringAsync is not awaited yet</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  DoIndependentWork</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // 4. Await the async to complete and get the result</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> content</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> getStringTask</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Length</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> DoIndependentWork</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Working...</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li><p>You can combine all <code>async</code> calls and wait for all of them to resolve using <code>Task.WhenAll()</code>:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Task</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> DoSomethingAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> input</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">  List</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> tasks</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  foreach</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> item</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> input</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    tasks</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Run</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> RunAndReturnSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WhenAll</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">tasks</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>Get the progress of tasks using <code>IProgress</code>:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ProgressReportModel</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> PercentageComplete</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> ResultList</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Task</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> DoSomethingAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">IProgress</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">ProgressReportModel</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> progress</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> input</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">  List</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> tasks</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Task</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">  List</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> output</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">  ProgressReportModel</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> report</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ProgressReportModel</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  foreach</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> item</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> input</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Run</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> RunAndReturnSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    output</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    report</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">ResultList</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> output</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    report</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">PercentageComplete</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">output</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Count</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> input</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Count</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    progress</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Report</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">report</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li></ul><h3 id="multithreading" tabindex="-1">Multithreading <a class="header-anchor" href="#multithreading" aria-label="Permalink to “Multithreading”">​</a></h3><p>What is a Process:</p><ul><li>Process is what the operating system uses to facilitate the execution of a program by providing the resources required. Each process has a unique process Id associated with it</li><li>Memory pages</li><li>Each memory has its own memory space, one process cannot corrupt the memory space of another process</li></ul><p>What is Thread:</p><ul><li>Thread is a light weight process. A process has at least one thread which is commonly called as <em>main thread</em> which actually executes the application code. A single process can have multiple threads</li><li>It is an unit of execution within a process</li><li>Processor registers, Program counters, Stack pointers</li><li>Threads within a process share memory address space, enables threads to communicate</li><li>CPU uses Scheduler and Context Switch, PCB (Process Control Block)</li><li>Context switching are costly, Fiber or Coroutines can be used to lower context switching costs but increase complexity</li></ul><p>Advantages:</p><ul><li><p>To make efficient use of processor time while waiting for I/O operations to complete</p></li><li><p>To split large, CPU-bound tasks to be processed simultaneously on a machine that has multiple processors/cores</p></li></ul><p>Disadvantages:</p><ul><li><p>On a single processor/core machine threading can affect performance negatively as there is overhead involved with context-switching</p></li><li><p>Have to write more lines of code to accomplish the same task</p></li><li><p>Multithreaded applications are difficult to write, understand, debug and maintain</p></li></ul><p><code>Thread</code> class: Creates and controls a thread, sets its priority, and gets its status.</p><ul><li>Start a thread by supplying a delegate that represents the method the thread is to execute in its class constructor</li><li>Call <code>Start()</code> to begin execution</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> btnTimeConsumingWork_Click</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // create thread</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">  Thread</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> workerThread</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">DoTimeConsumingWork</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // Start the execution</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  workerThread</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Start</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p>The <code>Thread</code> constructor can take either:</p><ul><li><p>If the method has no arguments, you pass a <code>ThreadStart</code> delegate to the constructor:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> delegate</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ThreadStart</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span></code></pre></div></li><li><p>If the method has an argument, you pass a <code>ParameterizedThreadStart</code> delegate to the constructor:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> delegate</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ParameterizedThreadStart</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> obj</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span></code></pre></div><ul><li>This is not type safe as parameters need to be <code>object</code></li><li>To pass data to the <code>Thread</code> function in a type safe manner, encapsulate the thread function and the data it needs in a helper class and use the <code>ThreadStart</code> delegate to execute the thread function</li></ul></li><li><p>Retrieve data from <code>Thread</code> function using callback method</p></li></ul><p><em>Example:</em></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Threading</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Simple threading scenario:  Start a static method running</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// on a second thread.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ThreadExample</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // The ThreadProc method is called when the thread starts.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // It loops ten times, writing to the console and yielding</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // the rest of its time slice each time, and then ends.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> ThreadProc</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">            Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">ThreadProc: {0}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">            // Yield the rest of the time slice.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">            Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Main thread: Start a second thread.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // The constructor for the Thread class requires a ThreadStart</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // delegate that represents the method to be executed on the</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // thread.  C# simplifies the creation of this delegate.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">        Thread</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> t</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ThreadStart</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">ThreadProc</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // Start ThreadProc.  Note that on a uniprocessor, the new</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // thread does not get any processor time until the main thread</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // is preempted or yields.  Uncomment the Thread.Sleep that</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // follows t.Start() to see the difference.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        t</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Start</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        //Thread.Sleep(0);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">            Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Main thread: Do some work.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">            Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Main thread: Call Join(), to wait until ThreadProc ends.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        t</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Join</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Main thread: ThreadProc.Join has returned.  Press Enter to end program.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">ReadLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li><p><code>Thread.Join</code>: Blocks the calling thread until the thread represented by this instance terminates, while continuing to perform standard COM and <code>SendMessage</code> pumping.</p><ul><li>Join is particularly useful when we need to wait and collect result from a thread execution or if we need to do some clean-up after the thread has completed</li></ul></li><li><p><code>IsAlive</code>: Gets a value indicating the execution status of the current thread.</p></li></ul><p>Protecting shared resources:</p><ul><li><p>The output or behaviour of the program can become inconsistent if the shared resources are not protected from concurrent access in multithreaded program</p></li><li><p>Using <code>Interlocked.Increment()</code> method: increments a specified variable and stores the result, as an atomic operation</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> AddOneMillion</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 100000</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Interlocked</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Increment</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">ref</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Total</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p><code>lock</code> statement: a mechanism that synchronizes access to objects</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> _lockObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">lock</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">_lockObject</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  Total</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li><p>less performant than <code>Interlocked</code></p></li><li><p><code>lock</code> is the shortcut for <code>Monitor.Entry</code> with try and finally</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Monitor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Enter</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">_lockObject</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">try</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  Total</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">finally</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  Monitor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Exit</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">_lockObject</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li></ul></li></ul><h4 id="deadlocks" tabindex="-1">Deadlocks <a class="header-anchor" href="#deadlocks" aria-label="Permalink to “Deadlocks”">​</a></h4><p>Resolving Deadlocks:</p><ul><li>Acquiring locks in a specific defined order</li><li>Mutex class</li><li><code>Monitor.TryEnter()</code> method</li></ul><h3 id="asynchronous-streams" tabindex="-1">Asynchronous Streams <a class="header-anchor" href="#asynchronous-streams" aria-label="Permalink to “Asynchronous Streams”">​</a></h3><p>Async streams model a streaming source of data. Data streams often retrieve or generate elements asynchronously</p><ul><li><code>IAsyncEnumerable&lt;T&gt;</code>: Represents a sequence of elements that can be enumerated asynchronously</li><li><code>IAsyncEnumerator&lt;T&gt;</code>: Supports a simple asynchronous iteration over a collection of a specified type</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IAsyncEnumerable</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> GenerateSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">        await</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Delay</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        yield</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">await</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> foreach</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> in</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> GenerateSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h2 id="yield" tabindex="-1">Yield <a class="header-anchor" href="#yield" aria-label="Permalink to “Yield”">​</a></h2><p>When you use the <code>yield</code> contextual keyword in a statement, you indicate that the method, operator, or <code>get</code> accessor in which it appears is an iterator</p><ul><li>It returns an object that implements the <code>IEnumerable&lt;T&gt;</code> interface</li><li>It helps to do stateful iteration.</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">yield</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">expression</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">yield</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> break</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div><p><em>Example:</em></p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> PowersOf2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">        // Display powers of 2 up to the exponent of 8:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        foreach</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> in</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Power</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">            Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Write</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">{0} </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Collections</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Generic</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">IEnumerable</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Power</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> exponent</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> exponent</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">            result</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">            yield</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Output: 2 4 8 16 32 64 128 256</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Example 2:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Consumer</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    foreach</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> in</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Integers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">ToString</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IEnumerable</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Integers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    yield</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    yield</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    yield</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    yield</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    yield</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 16</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    yield</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 16777216</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h2 id="built-in-classes" tabindex="-1">Built-In Classes <a class="header-anchor" href="#built-in-classes" aria-label="Permalink to “Built-In Classes”">​</a></h2><p>Commonly used built-in classes</p><h3 id="unique-ids" tabindex="-1">Unique IDs <a class="header-anchor" href="#unique-ids" aria-label="Permalink to “Unique IDs”">​</a></h3><ul><li><p><code>Guid</code>: Represents a globally unique identifier (GUID)</p><ul><li><code>Guid.NewGuid()</code>: Creates a new GUID (UUID V4)</li><li><code>Guid.CreateVersion7()</code>: Creates a new GUID (UUID V7)</li></ul></li><li><p><code>Random</code>: Represents a pseudo-random number generator</p><ul><li><code>Random.Next()</code>: Returns a non-negative random integer</li></ul></li></ul><h3 id="console-class" tabindex="-1">Console Class <a class="header-anchor" href="#console-class" aria-label="Permalink to “Console Class”">​</a></h3><ul><li><code>Console.Write(&quot;text&quot;)</code>: Prints and keeps cursor on the same line</li><li><code>Console.WriteLine(&quot;text&quot;)</code>: Prints and puts cursor on the next line</li><li><code>Console.Read()</code>: Takes a single input of type string and it returns the ASCII value of that input</li><li><code>Console.ReadLine()</code>: Takes a string or integer input and returns it as the output value</li><li><code>Console.ReadKey()</code>: Takes a single input of type string and it returns the Key info</li></ul><p>Change console colour:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// clear the console so that the colours are applied to the whole console</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">ForegroundColor</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> ConsoleColor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Red</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">BackgroundColor</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> ConsoleColor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">DarkGreen</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello World</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">ResetColor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span></code></pre></div><h3 id="date-time" tabindex="-1">Date Time <a class="header-anchor" href="#date-time" aria-label="Permalink to “Date Time”">​</a></h3><ul><li><p>Working with date and time</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 10/18/2021 11:43:01 PM</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">DateTime</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> dateTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> DateTime</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Now</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div></li><li><p>New in C# 10.0:</p><ul><li><p><code>DateOnly</code>:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 10/18/2021</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">DateOnly</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> dateOnly</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> DateOnly</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">FromDateTime</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">DateTime</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Now</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div></li><li><p><code>TimeOnly</code>:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 11:45 PM</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">TimeOnly</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> timeOnly</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> TimeOnly</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">FromDateTime</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">DateTime</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Now</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div></li></ul></li></ul><h2 id="miscellaneous" tabindex="-1">Miscellaneous <a class="header-anchor" href="#miscellaneous" aria-label="Permalink to “Miscellaneous”">​</a></h2><h3 id="versions" tabindex="-1">Versions <a class="header-anchor" href="#versions" aria-label="Permalink to “Versions”">​</a></h3><p>C# has evolved over the years with <a href="https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history" target="_blank" rel="noreferrer">different versions</a> (<a href="https://csharp-evolution.com/" target="_blank" rel="noreferrer">C# Evolution</a>):</p><ol><li><p>C# 1.0: Statically typed object-oriented language</p><ul><li>Visual Studio .NET 2002 (.NET Framework 1.0/1.1)</li><li>Classes</li><li>Structs</li><li>Interfaces</li><li>Events</li><li>Properties</li><li>Delegates</li><li>Operators and expressions</li><li>Statements</li><li>Attributes</li></ul></li><li><p>C# 2.0:</p><ul><li>Visual Studio 2005 (.NET Framework 2.0/3.0)</li><li>Generics</li><li>Partial types</li><li>Anonymous methods</li><li>Nullable value types</li><li>Iterators</li><li>Covariance and Contravariance</li></ul></li><li><p>C# 3.0:</p><ul><li>Visual Studio 2008 (.NET Framework 3.0/3.5)</li><li>Declarative coding with <strong>Language INtegrated Queries (LINQ)</strong></li><li>Auto-implemented properties</li><li>Anonymous types</li><li>Query expressions</li><li>Lambda expressions</li><li>Expression trees</li><li>Extension methods</li><li>Implicitly typed local variables</li><li>Partial methods</li><li>Object and collection initializers</li></ul></li><li><p>C# 4.0:</p><ul><li>Visual Studio 2010 (.NET Framework 4.0)</li><li>Dynamic bindings (types)</li><li>Named/optional arguments</li><li>Generic convariant and contravariant</li><li>Embedded interop types</li></ul></li><li><p>C# 5.0:</p><ul><li>Visual Studio 2012 (.NET Framework 4.5)</li><li>Simplified asynchronous tasks (Asynchronous members)</li><li>Caller info attributes</li></ul></li><li><p>C# 6.0:</p><ul><li><p>Visual Studio 2015 (.NET Framework 4.6 / .NET Core 1.0/1.1)</p></li><li><p>Static imports</p></li><li><p>Exception filters</p></li><li><p>Auto-property initializers</p></li><li><p>Null propagator</p></li><li><p>String interpolation</p></li><li><p><code>nameof</code> operator</p></li><li><p>Expression bodied members: read-only properties</p></li></ul></li><li><p>C# 7.0:</p><ul><li>Visual Studio 2017 (.NET Framework 4.7 / .NET Core 2.0)</li><li>Binary literals and digit separators: storing whole numbers</li><li>Pattern matching</li><li><code>out</code> variables</li><li>Tuples and deconstruction</li><li>Local functions</li><li>Expanded expression bodied members</li><li>Ref locals and returns</li></ul><ol><li><p>C# 7.1:</p><ul><li>Default literal expressions</li><li>Inferred tuple element names</li><li><code>async</code> Main method</li><li>Pattern matching on generic type parameters</li></ul></li><li><p>C# 7.2:</p><ul><li>Leading underscores in numeric literals</li><li>Non-trailing named arguments</li><li><code>private protected</code> access modifier</li><li>Testing <code>==</code> and <code>!=</code> with tuple types</li></ul></li><li><p>C# 7.3:</p><ul><li>.NET Framework 4.8 / .NET Core 2.1/2.2</li><li>Performance-oriented safe code that improves <code>ref</code> variables, pointers, and <code>stackalloc</code></li></ul></li></ol></li><li><p>C# 8:</p><ul><li>Visual Studio 2019 (.NET Core 3.0)</li><li><code>Readonly</code> members: members that can be assigned a value only once</li><li><a href="#nullable-types">Nullable reference types</a>: Avoid null reference exceptions</li><li><a href="#null-coalescing-operator-and">Null-coalescing assignment</a>: Assigning a value to a variable only if it is null</li><li>Switch expressions (pattern matching): Simplified switch statements</li><li>Default interface methods: Interface members can have implementations</li><li>Using declarations: Simplified resource management</li><li>Static local functions: Functions that can be declared within other functions</li><li>Indices and ranges: Indexing and slicing arrays</li><li>Asynchronous streams: Asynchronous streams of data</li><li>Asynchronous disposable: Asynchronous clean-up</li></ul></li><li><p>C# 9:</p><ul><li>Visual Studio 2019 (.NET 5.0)</li><li><a href="#records">Records</a>: Immutable data types</li><li><code>init</code> only setters: Setters that can be called only during initialization</li><li><a href="#top-level-statements">Top-level statements</a> (minimal-code <code>Program.cs</code> file): Simplified entry point</li><li>Pattern matching enhancements</li><li>Target-typed <code>new</code> expressions: <code>new()</code> instead of <code>new List&lt;string&gt;()</code></li><li>Native sized integers: <code>nint</code>, <code>nuint</code></li><li><a href="#delegate">Function pointers</a>: <code>delegate*&lt;T&gt;</code></li><li>Suppress emitting localsinit flag: Performance improvement</li><li>static anonymous functions: <code>static</code> modifier for local functions</li><li>Target-typed <code>conditional</code> expressions</li><li>Covariant return types: Return types that are more derived than the overridden method</li><li>Extension <code>GetEnumerator</code> support for <code>foreach</code> loops</li><li>Lambda discard parameters: <code>_</code> in lambda expressions</li></ul></li><li><p>C# 10:</p><ul><li>Visual Studio 2022 (.NET 6.0)</li><li>Global <code>namespace</code> imports (global <code>using</code> Directives)</li><li><code>using static</code> directive</li><li>Constant string literals: Formatting using interpolated strings</li><li>File-scoped namespaces</li><li>Record <code>structs</code></li><li>Null parameter checks</li></ul></li><li><p>C# 11:</p><ul><li>Required properties: Requiring properties to be set during instantiation</li></ul></li></ol><h3 id="code-style" tabindex="-1">Code Style <a class="header-anchor" href="#code-style" aria-label="Permalink to “Code Style”">​</a></h3><p><a href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/" target="_blank" rel="noreferrer">Framework Design Guidelines</a></p><ul><li><code>Microsoft.CodeAnalysis.NetAnalyzers</code>: Analyser for code quality and style issues (VS 2019, .NET 5+)</li><li><code>Microsoft.CodeAnalysis.FxCopAnalyzers</code>: Old no longer maintained analyser</li></ul><p>Steps in .NET 5+:</p><ol><li><p>Enable analyser:</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">PropertyGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">EnableNETAnalyzers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">EnableNETAnalyzers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">PropertyGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span></code></pre></div></li><li><p>Set analysis mode:</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">PropertyGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">AnalysisMode</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Recommended</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">AnalysisMode</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">PropertyGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&lt;!-- OR --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">PropertyGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">AnalysisMode</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">All</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">AnalysisMode</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">PropertyGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&lt;!-- OR --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">PropertyGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">AnalysisMode</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Recommended</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">AnalysisMode</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">AnalysisModeGlobalization</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">AnalysisModeGlobalization</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">AnalysisModeSecurity</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">All</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">AnalysisModeSecurity</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">PropertyGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span></code></pre></div></li><li><p>Set analysis level:</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">PropertyGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">AnalysisLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">5.0-recommended</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">AnalysisLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">PropertyGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span></code></pre></div></li><li><p>Control individual rule, add in <code>.editorconfig</code>:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Disable rule CA1303</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">dotnet_diagnostic</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">CA1303</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">severity</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> None</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// set it to warning</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">dotnet_diagnostic</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">CA1303</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">severity</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Silent</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div></li></ol><h3 id="useful-libraries" tabindex="-1">Useful Libraries <a class="header-anchor" href="#useful-libraries" aria-label="Permalink to “Useful Libraries”">​</a></h3><ul><li><p><code>BenchmarkDotNet</code>: Powerful .NET library for benchmarking</p></li><li><p><code>Entity Framework</code> (write using this): Object-relational mapping (ORM) framework for .NET</p><ul><li><code>Dapper</code> (read using this): A simple object mapper for .Net</li></ul></li><li><p><code>Newtonsoft.Json</code>: Popular high-performance JSON framework for .NET</p></li><li><p><code>xUnit.net</code>: Unit testing tool for the .NET Framework</p></li><li><p><code>Fluent Assertions</code>: Assertion framework</p><ul><li><code>Shouldly</code></li></ul></li><li><p><code>AutoMapper</code>: A convention-based object-object mapper in .NET.</p></li><li><p><code>Moq</code>: The most popular and friendly mocking framework for .NET</p><ul><li><code>NSubstitute</code>: A friendly substitute for .NET mocking libraries</li><li><code>FakeItEasy</code>: The easy mocking library for .NET</li></ul></li><li><p><code>FluentValidation</code>: A popular .NET validation library for building strongly-typed validation rules.</p></li><li><p><code>Autofac</code>: is an addictive Inversion of Control container</p><ul><li><code>Scrutor</code>: Assembly scanning and decoration extensions for Microsoft.Extensions.DependencyInjection. (Alternative to <code>autofac</code> register by convention)</li></ul></li><li><p><code>Polly</code>: Resilience and transient-fault-handling library that allows developers to express policies such as Retry, Circuit Breaker, Timeout, Bulkhead Isolation, and Fallback in a fluent and thread-safe manner.</p></li><li><p><code>Serilog</code>: Structured data Logging system (<code>log4NET</code>: old)</p></li><li><p><code>Seq</code>: Machine data for humans</p></li><li><p><code>AutoFixture</code>: Automate non-relevant Test Fixture Setup</p></li><li><p><code>Bogus</code>: A simple fake data generator for C#, F#, and VB.NET. Based on and ported from the famed <code>faker.js</code></p></li><li><p><code>Noda Time</code>: A better date and time API for .NET</p></li><li><p><code>MediatR</code>: Simple, unambitious mediator implementation in .NET</p><ul><li><code>Brighter</code>: Command Processor &amp; Dispatcher implementation with support for task queues that can be used as a lightweight library.</li></ul></li><li><p><code>refit</code>: The automatic type-safe REST library</p><ul><li><code>RestSharp</code>: REST API client library for .NET</li></ul></li><li><p><code>Quartz.NET</code>: Open-source job scheduling system for .NET</p></li><li><p><code>Hangfire</code>: Perform background processing. No Windows Service or separate process required</p></li><li><p><code>SharpZibLib</code>: Working with <strong>Zip</strong>, <strong>GZip</strong>, <strong>Tar</strong> and <strong>BZip2</strong></p></li><li><p><code>FluentEmail</code>: All in one email sender</p><ul><li><code>MailKit</code>: For <strong>IMAP</strong>, <strong>POP3</strong>, and <strong>SMTP</strong></li><li><code>Papercut-SMTP</code>: The simple Desktop Email Server. Test email system in local</li></ul></li><li><p><code>Html Agility Pack (HAP)</code>: HTML parser (web scraper) written in C# to read/write DOM and supports plain XPATH or XSLT.</p></li><li><p><code>EPPlus</code>: Excel spreadsheets</p></li><li><p><code>MassTransit</code>: Distributed application framework</p></li></ul><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to “References”">​</a></h2><ul><li>Coding standard: <a href="https://www.dofactory.com/csharp-coding-standards" target="_blank" rel="noreferrer">dofactory webpage</a></li></ul>`,617)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
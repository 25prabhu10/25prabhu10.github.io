import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"Vim","description":"A free and open-source, screen-based text editor program","frontmatter":{"title":"Vim","description":"A free and open-source, screen-based text editor program"},"headers":[],"relativePath":"Collection/Editors/Vim-Neovim.md","filePath":"Collection/Editors/Vim-Neovim.md","lastUpdated":1756574703000}`);var a={name:`Collection/Editors/Vim-Neovim.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="vim-neovim" tabindex="-1">Vim - Neovim <a class="header-anchor" href="#vim-neovim" aria-label="Permalink to “Vim - Neovim”">​</a></h1><p><a href="https://www.vim.org/" target="_blank" rel="noreferrer">Vim</a> (a contraction of Vi IMproved) is a free and open-source, screen-based text editor program</p><p>And <a href="https://github.com/neovim/neovim" target="_blank" rel="noreferrer">Neovim</a>: A Vim-fork focused on extensibility and usability</p><ul><li>Most of the commands that work in Vim work in Neovim</li><li>Once Vim is opened Ex commands are executed</li></ul><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-label="Permalink to “Setup”">​</a></h2><p>Install Vim or Neovim:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> vim</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># or</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> pacman</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> vim</span></span></code></pre></div><ul><li>Vim uses \`\` for configuration</li><li>Neovim uses \`\` for configuration</li></ul><h2 id="starting-vim" tabindex="-1">Starting Vim <a class="header-anchor" href="#starting-vim" aria-label="Permalink to “Starting Vim”">​</a></h2><table tabindex="0"><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td><code>vim</code></td><td>Start Vim with an empty buffer</td></tr><tr><td><code>vim file.txt</code></td><td>Start Vim with a file <code>file.txt</code> opened in a buffer</td></tr><tr><td><code>vim +23 file.txt</code></td><td>Start Vim with a file <code>file.txt</code> opened at line 23</td></tr><tr><td><code>vim + file</code></td><td>Start Vim with the cursor at the end of the file</td></tr><tr><td><code>vim -u file</code></td><td>Start Vim with a specific configuration file</td></tr><tr><td><code>vim -</code></td><td>Start Vim with a file from standard input</td></tr></tbody></table><p>To learn more about Vim, run <code>vimtutor</code></p><table tabindex="0"><thead><tr><th>Options</th><th>Description</th></tr></thead><tbody><tr><td><code>-u</code></td><td>Use a specific configuration file (e.g. <code>vim -u ~/.vimrc</code>)</td></tr><tr><td><code>-o</code></td><td>Open multiple files in horizontal tiled windows</td></tr><tr><td><code>-O</code></td><td>Open multiple files in vertical tiled windows</td></tr><tr><td><code>-p</code></td><td>Open multiple files in separate tabs</td></tr></tbody></table><h2 id="quitting-vim" tabindex="-1">Quitting Vim <a class="header-anchor" href="#quitting-vim" aria-label="Permalink to “Quitting Vim”">​</a></h2><p>How do you generate a random string?</p><ul><li>Put a Windows user in front of vi, and tell them to exit</li></ul><table tabindex="0"><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td><code>:q</code></td><td>Quit the current window (or editor if you&#39;re out of windows) if there are no unsaved changes</td></tr><tr><td><code>:q!</code></td><td>Quit the current window even if there are unsaved changes</td></tr><tr><td><code>:qa</code></td><td>Quit all windows unless there are unsaved changes</td></tr><tr><td><code>:qa!</code></td><td>Quit all windows even if there are unsaved changes</td></tr><tr><td><code>:wq</code></td><td>Save changes and quit the current window</td></tr><tr><td><code>ZZ</code></td><td>Save changes and quit current window</td></tr></tbody></table><h2 id="modes" tabindex="-1">Modes <a class="header-anchor" href="#modes" aria-label="Permalink to “Modes”">​</a></h2><p>Vim has different modes:</p><ol><li><strong>Normal mode</strong>: The mode where you can navigate through the file</li><li><strong>Insert mode</strong>: The mode where you can insert text</li><li><strong>Visual mode</strong>: The mode where you can select text</li><li><strong>Command-line mode</strong>: The mode where you can enter commands</li></ol><h2 id="searching" tabindex="-1">Searching <a class="header-anchor" href="#searching" aria-label="Permalink to “Searching”">​</a></h2><table tabindex="0"><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td><code>/</code></td><td>search forward: will prompt for a pattern</td></tr><tr><td><code>?</code></td><td>search backward: will prompt for a pattern</td></tr><tr><td><code>n</code></td><td>repeat last search (like dot for searches!)</td></tr><tr><td><code>N</code></td><td>repeat last search but in the opposite direction</td></tr><tr><td><code>tx</code></td><td>Move &quot;to&quot; letter &#39;x&#39; (any letter will do), stopping just before the &#39;x&#39;. Handy for change/delete commands</td></tr><tr><td><code>fx</code></td><td>&quot;Find&quot; letter &#39;x&#39; (any letter will do), stopping on the letter &#39;x&#39;. Also handy for change/delete commands</td></tr></tbody></table><h2 id="initialization" tabindex="-1">Initialization <a class="header-anchor" href="#initialization" aria-label="Permalink to “Initialization”">​</a></h2><p>First, initialize (if defined) the system <code>vimrc</code> (see <code>:version</code>)</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">$VIM</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">/vimrc</span></span></code></pre></div><p>Then, initialize the <strong>first found</strong> of the following user <code>vimrc</code> configurations:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">$VIMINIT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">$HOME</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">/.vimrc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">$HOME</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">/.vim/vimrc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">$EXINIT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">$HOME</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">/.exrc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">$VIMRUNTIME</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">/defaults.vim</span></span></code></pre></div><p>For Neovim:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">system</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> vimrc</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> file:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">$VIM</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">/sysinit.vim</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">fall-back</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> $VIM</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">/usr/share/nvim</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">NO USER CONFIGURATION</p><p>To launch Vim/Neovim without user defined configuration file:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># skip everything</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> vim/nvim</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> }</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> NONE</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># skip everything except plugins and syntax highlighting</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> vim/nvim</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> }</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> NORC</span></span></code></pre></div></div><div class="tip custom-block"><p class="custom-block-title">NOTE</p><ul><li>Commands which are executed after entering <code>:</code> are called <em>Ex</em> commands</li><li>Environment variables such as <code>$VIM</code> or <code>$VIMRUNTIME</code> are set on launch of vim. They are provided as fallback paths. (see <code>:version</code>, <code>:echo $VIM</code>)</li></ul></div><h3 id="plugins" tabindex="-1">Plugins <a class="header-anchor" href="#plugins" aria-label="Permalink to “Plugins”">​</a></h3><p>Plugins / Package Scripts are loaded next:</p><div class="language-vim"><button title="Copy Code" class="copy"></button><span class="lang">vim</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">:h load-plugins</span></span></code></pre></div><p>First, plugin scripts are loaded, which is equivalent to running:</p><div class="language-vim"><button title="Copy Code" class="copy"></button><span class="lang">vim</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">:runtime</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> plugin</span><span style="--shiki-light:#032F62;--shiki-dark:#C4704F;">/**/</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">*.vim</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">#</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> except </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> &#39;rtp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> directories ending </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">&#39;after&#39;</span></span></code></pre></div><ul><li><strong>Usually, this is</strong> <code>$HOME/.vim/plugin/**/*.vim</code></li><li>Then, packages are loaded:</li><li><strong>Usually, this is</strong> <code>$HOME/.vim/pack/*/start/*/plugin/**/*.vim</code></li></ul><h3 id="runtimepath" tabindex="-1">Runtimepath <a class="header-anchor" href="#runtimepath" aria-label="Permalink to “Runtimepath”">​</a></h3><p>A List of directories which will be searched for runtime files (see <code>:h rtp</code>)</p><p>To list current runtimepaths:</p><div class="language-vim"><button title="Copy Code" class="copy"></button><span class="lang">vim</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">set</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;"> rtp</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">?</span></span></code></pre></div><p>The runtimepath search order:</p><ol><li>User <code>$HOME/.vim</code> or <code>$HOME/.config/nvim</code> (for Neovim)</li><li>Sysadmin folder</li><li><code>$VIMRUNTIME</code></li><li>Sysadmin <code>after</code> folder</li><li>User Home <code>after</code> folder</li></ol><p>Sample list of files and directories searched during runtime:</p><ul><li><code>syntax/</code></li><li><code>compiler/</code></li><li><code>ftdetect/</code></li><li><code>filetype.vim</code></li><li><code>scripts.vim</code></li><li><code>autoload/</code></li><li><code>ftplugin/</code></li><li><code>plugin/</code></li><li><code>pack/</code></li><li><code>colors/</code></li><li><code>doc/</code></li><li><code>import/</code></li><li><code>keymap/</code></li><li><code>lang/</code></li><li><code>menu.vim</code></li><li><code>print/</code></li><li><code>spell/</code></li><li><code>tutor</code></li><li><code>indent/</code></li></ul><h4 id="syntax" tabindex="-1">Syntax <a class="header-anchor" href="#syntax" aria-label="Permalink to “Syntax”">​</a></h4><p>The runtime directory which is searched is called <code>syntax/</code></p><p>It is the first directory to be loaded from the runtimepath</p><p>Enables customized syntax highlighting</p><ul><li>When invoking <code>:set sytax=xxx</code>, syntax file(s) named <code>xxx.vim</code> are sourced from the runtimepath, Usually, an autocommand does this if the file type can be inferred</li><li>System defaults usually defined in <code>$VIMRUNTIME/syntax</code></li></ul><p>There are two ways to enable syntax:</p><ol><li><code>:syntax enable</code>: Enables syntax and mostly keeps the colours (highlight groups)</li><li><code>:syntax on</code>: Enables syntax but reverts to default colours (highlight groups)</li></ol><p>To create a custom syntax file:</p><ol><li><p>Create <code>syntax</code> folder inside <code>$HOME/.vim</code> or <code>$HOME/.config/nvim</code> (for Neovim)</p></li><li><p>Create a file such as <code>syntax/sshknownhosts.vim</code></p></li><li><p>Now, create a syntax group which match the string (keyword) or patterns (using regex)</p></li><li><p>Link the above syntax group with the highlight group (to get the highlight groups run <code>:hi</code>)</p><div class="language-vim"><button title="Copy Code" class="copy"></button><span class="lang">vim</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">#</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> first </span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">syntax</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> group</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">syntax</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;"> match</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> sshknownhostspubkey </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">&quot;AAAA[0-9a-zA-Z+/]\\+[=]\\{0,2}&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">#</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> link the above </span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">syntax</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> group </span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> a </span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">highlight</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> group</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">highlight</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> def</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;"> link</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> sshknownhostspubkey</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Special</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">#</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> keep adding </span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">syntax</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> groups</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">syn</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;"> keyword</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> sshalg </span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">ssh-rsa</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">hi</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> def</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;"> link</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> sshalg</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Identifier</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">syn</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;"> match</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> sshknownhostsip </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">&quot;\\&lt;\\(\\d\\{1,3}\\.\\)\\{3}\\d\\{1,3}\\&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">hi</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> def</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;"> link</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> sshknownhostsip</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Constant</span></span></code></pre></div></li><li><p>Now set the syntax type same as the above created filename: <code>:set syntax=sshknownhosts</code></p></li></ol><p>Some considerations:</p><ol><li><p>If <code>keyword</code> doesn&#39;t set the syntax properly, then probably vim doesn&#39;t know that match the keyword pattern</p><ul><li><p>Check the keyword pattern: <code>:set iskeyword?</code></p></li><li><p>Add the missing pattern to <code>iskeyword</code> at the start of the syntax file:</p><div class="language-vim"><button title="Copy Code" class="copy"></button><span class="lang">vim</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&quot; add - to match &#39;ssh-rsa&#39; keyword</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">setlocal</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;"> iskeyword</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">@</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">48</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">57</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">192</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">-</span></span></code></pre></div></li></ul></li><li><p>If you switch buffers the syntax highlighting will be gone. This is because, there is no automatic file type syntax inference going on (see <a href="#file-type-detection">File Type Detections</a></p></li></ol><h4 id="file-type-detection" tabindex="-1">File Type Detection <a class="header-anchor" href="#file-type-detection" aria-label="Permalink to “File Type Detection”">​</a></h4><p>There are many ways to detect file types:</p><ol><li><p>Override file type <strong>AFTER</strong> default file type detection. Add <code>:set filetype=&lt;file&gt;</code> autocommand to a file in <code>ftdetect/</code></p></li><li><p>Only create a new file type <strong>AFTER</strong> default file type detection. Add <code>:setfiletype &lt;file&gt;</code> autocommand to a file in <code>ftdetect/</code></p></li><li><p>Define file type <strong>BEFORE</strong> default file type detection (detectable <em>by name</em>). Add <code>:setfiletype &lt;file&gt;</code> for all files you want to define in <code>filetype.vim</code> file</p></li><li><p>Define file type <strong>BEFORE</strong> default file type detection (detectable <em>by content</em>). Add <code>:setfiletype &lt;file&gt;</code> for all files you want to define in <code>scripts.vim</code> file</p></li></ol><p>Runtime files and directories searched for file type detection:</p><ul><li><code>ftdetect</code> +</li><li><code>filetype.vim</code> +</li><li><code>scripts.vim</code></li></ul><p>You can define your own file type using any one of the above mentioned ways (see <code>:h new-filetype</code>)</p><p><em>Example:</em></p><ul><li><p>Create <code>filetype.vim</code> file inside user vim runtime (using option 3)</p></li><li><p>Add an autocommand (commands that get executed when an event occurs)</p><div class="language-vim"><button title="Copy Code" class="copy"></button><span class="lang">vim</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">au </span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">BufNewFile</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">BufRead</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> know_hosts setfiletype sshknownshosts</span></span></code></pre></div></li></ul><h4 id="auto-load" tabindex="-1">Auto Load <a class="header-anchor" href="#auto-load" aria-label="Permalink to “Auto Load”">​</a></h4><p>The directory <code>autoload/</code> is searched during runtime (see <code>:h autoload</code>)</p><ul><li>Scripts loaded only when required</li><li>When you issue a call <code>filename#funcname()</code>, Vim searches in the <code>autoload/</code> directory of runtimepath for a file called <code>filename.vim</code> and calls <code>funcname()</code></li></ul><p><em>Example:</em></p><ul><li><p>Create <code>autoload</code> directory inside the user vim runtime (using option 3)</p></li><li><p>Create a script file which performs some task(s), like <code>gcp.vim</code></p></li><li><p>Write your script in any of you preferred language like <code>Python</code>, <code>Vimscript</code>, <code>JavaScript</code>, <code>Lua</code>...</p><div class="language-vim"><button title="Copy Code" class="copy"></button><span class="lang">vim</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> &quot;Initializing Autoload Plugin&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">python3 </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> PYEND</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">from google.cloud import storage</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> upload</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">    storage_client </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> storage.Client</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">    bucket </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> storage_client.bucket</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">&#39;scripts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">    blob </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> bucket.blob</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">&#39;vim_demo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    blob.upload_from_filename</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">vim.eval</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">&quot;expand(&#39;%:p&#39;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">&#39;UPLOADED&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">PYEND</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> gcp#Upload</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">    :py3 </span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">upload</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">endfunction</span></span></code></pre></div></li><li><p>Now call the above function using: <code>:call gcp#Upload()</code></p></li></ul><h4 id="compiler" tabindex="-1">Compiler <a class="header-anchor" href="#compiler" aria-label="Permalink to “Compiler”">​</a></h4><p>Vim has builtin compiler options. Sets options for using a specific compiler (see <code>:h compiler</code>)</p><p>The directory <code>compiler/</code> is used to place compiler specific options.</p><ul><li>When invoking <code>:compiler xxx</code>, compiler specific options from <code>xxx.vim</code> are sourced to set a <code>makeprg</code> and <code>errorformat</code> for vim-native compilations</li></ul><p><em>Example:</em></p><ul><li><p>Create <code>compiler</code> directory inside the user vim runtime (using option 3)</p></li><li><p>Create a script file which contains the compiler instructions for a particular build, like <code>typescript.vim</code></p></li><li><p>Set the compiler, like <code>tsc</code> in case of TypeScript and set the error format (errors produced by the complier as <code>stdout</code>)</p><div class="language-vim"><button title="Copy Code" class="copy"></button><span class="lang">vim</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">CompilerSet </span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">makeprg</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">tsc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">CompilerSet </span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">errorformat</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">%E%f</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">%l</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">\\\\</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">%c</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">:%m</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&quot; %E: Indicates error message</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&quot; %f: Indicates that this part is the filename (with full path)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&quot; %l: Line number</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&quot; %c: Column number</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&quot; %m: Message part</span></span></code></pre></div></li><li><p>Now when we open a TypeScript project, just set the compiler, like <code>compiler typescript</code> (filename)</p></li><li><p>Then run make: It will build the project and add errors to the quick fix list (<code>:copen</code>)</p></li></ul><h4 id="file-type-plugin" tabindex="-1">File Type Plugin <a class="header-anchor" href="#file-type-plugin" aria-label="Permalink to “File Type Plugin”">​</a></h4><p>Defines Vim scripts loaded for particular files (applies to current buffer) (see <code>:h ftplugin</code>)</p><p>The directory <code>ftplugin/</code> is used to place the file specific vim scripts</p><p><em>Example:</em></p><ul><li><p>Create <code>ftplugin/</code> directory inside the user vim runtime (using option 3)</p></li><li><p>Create a script file, (<code>typescript.vim</code>) which sets file type specific options and keybindings</p></li><li><p>Now, just add the your options, keybindings, etc...</p><div class="language-vim"><button title="Copy Code" class="copy"></button><span class="lang">vim</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&quot; Set compiler automatically when the file is loaded</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">compiler typescript</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">nnoremap</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">space</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> :</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">silent</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> make </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">bar</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;"> redraw</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">CR</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&quot; &lt;buffer&gt;: Perfrom on the current buffer</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&quot; &lt;silent&gt;: Don&#39;t show stdout</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&quot; &lt;bar&gt;: Sperate 2 commands</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">&quot; redraw!: Redraws the current screen (and removes any issues while displaying the buffer)</span></span></code></pre></div></li></ul><h4 id="plugin" tabindex="-1">Plugin <a class="header-anchor" href="#plugin" aria-label="Permalink to “Plugin”">​</a></h4><p>Defines global plugins automatically loaded when vim starts (see <code>:h plugin</code>)</p><p>The directory <code>plugin/</code> is used to place the file specific vim scripts</p><p><em>Example:</em> Create plugin for OSC 52 yanks</p><ul><li>We want to create a plugin that allows us to directly yank all text to our local clipboard by utilizing an xterm-compatible terminal&#39;s OSC-52 escape sequence support</li></ul><div class="tip custom-block"><p class="custom-block-title">YANKING</p><p>For future use, add <code>alias vi=&#39;vi -c &quot;let g:tty=&#39;\\&#39;&#39;$(tty)&#39;\\&#39;&#39;&quot;&#39;</code> to <code>~/.bashrc</code> or <code>~/.zshrc</code></p></div><h2 id="registers" tabindex="-1">Registers <a class="header-anchor" href="#registers" aria-label="Permalink to “Registers”">​</a></h2><p>Types of registers:</p><ol><li><code>&quot;&quot;</code>: The <em>unnamed</em> register (last deleted, changed, or yanked content)</li><li><code>&quot;*</code>: synchronized with the selection clipboard</li><li><code>&quot;+</code>: synchronized with the system clipboard</li><li><code>&quot;_</code>: <em>black hole register</em> (deleted or changed content smaller than one line)</li><li><code>&quot;:</code>: most recent executed command</li><li><code>&quot;.</code>: last inserted text</li><li><code>&quot;%</code>: current filename</li><li><code>&quot;#</code>: alternate file name for the current window</li><li><code>&quot;/</code>: last search pattern</li><li><code>&quot;0 to &quot;9</code>: 10 <em>numbered registers</em> (last yank)</li><li><code>&quot;-</code>: <em>small delete register</em></li><li><code>a-z or A-Z</code>: 26 <em>named registers</em></li></ol><h2 id="common-commands" tabindex="-1">Common commands <a class="header-anchor" href="#common-commands" aria-label="Permalink to “Common commands”">​</a></h2><ul><li><code>gw</code>: Format selected text content based on column text width</li></ul><p>Buffers:</p><ul><li><code>ls</code>: list all buffers</li><li><code>bufdo g/function/d</code>: perform operations all open buffers</li><li><code>args /src/*.js</code></li><li><code>argdo</code></li></ul><p>Window split:</p><ul><li><code>&lt;C-w&gt;v</code>: split window vertically</li><li><code>&lt;C-w&gt;s</code>: split window horizontally</li><li><code>&lt;C-w&gt;=</code>: make split window equal width</li><li><code>&lt;C-w&gt;q</code>: close the window</li><li><code>&lt;Cmd&gt;close&lt;CR&gt;</code>: close current split window</li></ul><p>Edit:</p><ul><li><code>g/match/doSomething</code>: (ex. <code>go/var/d</code> deletes all lines containing <code>var</code>)</li></ul><p>Search:</p><ul><li><p><code>set gp=git\\ grep\\ -n</code> or <code>set grepprg=rg --vimgrep --no-heading</code>: set program to use for grep (search for text in files)</p></li><li><p><code>:grep main()</code>: search for the text <code>main()</code></p></li><li><p>Open <a href="#quickfix">Quickfix</a>: to open the search results</p></li><li><p>Magic mode (default): some characters in the pattern, such as letters, are taken literally (like <code>/.</code> will search all instead of <code>.</code>)</p></li><li><p><code>\\v</code>: Very Magic treat more characters as special (e.g. <code>+</code>)</p></li><li><p><code>\\V</code>: Very NO Magic treat almost all characters as non-special</p></li><li><p><code>/\\.</code>: use <code>\\</code> to escape</p></li><li><p><code>/var/e</code>: <code>/e</code> puts cursor at the end of the word</p></li></ul><p>Substitute:</p><ul><li><code>:%s/\\&lt;\\w/\\u&amp;/g</code>: Upper case first letter of all words (<code>\\&lt;</code>: beginning of word, <code>\\w</code>: regex - a single letter, <code>\\u</code>: turn to upper case, <code>&amp;</code>: the text that is replaced)</li><li><code>:%s/Cats/Dogs/c</code>: <code>c</code> asks confirmation for substitution (<code>y</code> to confirm, <code>n</code> to ignore)</li></ul><h2 id="quickfix" tabindex="-1">Quickfix <a class="header-anchor" href="#quickfix" aria-label="Permalink to “Quickfix”">​</a></h2><ul><li><code>:copen</code></li></ul><h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to “Reference”">​</a></h2><ul><li><a href="https://shapeshed.com/vim-statuslines/" target="_blank" rel="noreferrer">Build your own Vim statusline</a></li><li><a href="https://alvinalexander.com/linux/vi-vim-editor-color-scheme-syntax/#possible-highlight-groups" target="_blank" rel="noreferrer">How to control/configure vim colors</a></li><li><a href="https://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim" target="_blank" rel="noreferrer">Vim productive commands</a></li><li><a href="https://alpha2phi.medium.com/learn-neovim-the-practical-way-8818fcf4830f" target="_blank" rel="noreferrer">dot-files configure - <code>init.lua</code></a></li></ul>`,104)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
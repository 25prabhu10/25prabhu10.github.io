import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"Docker","description":"Docker is a set of platform as a service (PaaS) products","frontmatter":{"title":"Docker","description":"Docker is a set of platform as a service (PaaS) products"},"headers":[],"relativePath":"Languages/CI-CD/Docker/Docker.md","filePath":"Languages/CI-CD/Docker/Docker.md","lastUpdated":1691307656000}`);var a={name:`Languages/CI-CD/Docker/Docker.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-label="Permalink to “Docker”">​</a></h1><p>Docker is a set of platform as a service (PaaS) products that use OS-level virtualisation to deliver software in packages called <a href="#container">containers</a></p><ul><li>The software that hosts the containers is called <strong>Docker Engine</strong></li></ul><p><em>Example:</em></p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># pull a docker image</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> alpine</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># run a new container from the image</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -t</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --name</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">customNam</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> alpine</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># check currently running Docker containers</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> ps</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># connect to a container</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -it</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">customNam</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># stop a container</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> stop</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">customNam</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># check container stats</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> stats</span></span></code></pre></div><h2 id="container" tabindex="-1">Container <a class="header-anchor" href="#container" aria-label="Permalink to “Container”">​</a></h2><p>A way to <strong>package application</strong> with <strong>all</strong> the <strong>necessary dependencies</strong> and <strong>configuration</strong></p><ul><li>Portable artifact, easily shared and moved around.</li></ul><p>Need of containers:</p><ul><li>Compatibility / Dependency</li><li>Long setup time</li><li>Different Dev/Test/Prod environments</li></ul><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to “Installation”">​</a></h2><ul><li>One click installation script:</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -fsSL</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> https://get.docker.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> get-docker.sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> sh</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> get-docker.sh</span></span></code></pre></div><ul><li>Run docker as non root user:</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> groupadd</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> docker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> usermod</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -aG</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> docker</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> $USER</span></span></code></pre></div><ul><li><a href="https://docs.docker.com/engine/install/" target="_blank" rel="noreferrer">Install Docker Engine</a></li></ul><h2 id="docker-cli" tabindex="-1">Docker CLI <a class="header-anchor" href="#docker-cli" aria-label="Permalink to “Docker CLI”">​</a></h2><p><em>Example:</em></p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> build</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -t</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">image-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">versio</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> ls</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> rm</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">image-i</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> rmi</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -f</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">image-i</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> 8080:3000</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --name</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">container-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">image-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -it</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">container-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># enter the container</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -it</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">container-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># delete container</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> rm</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">container-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -f</span></span></code></pre></div><ul><li>Run Containers:</li></ul><table tabindex="0"><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td><code>docker run IMAGE</code></td><td>Start a new container</td></tr><tr><td><code>docker run --name CONTAINER IMAGE</code></td><td>Start a new container and set a name</td></tr><tr><td><code>docker run -p HOSTPORT:CONTAINERPORT IMAGE</code></td><td>Start a new container with mapped ports</td></tr><tr><td><code>docker run -P IMAGE</code></td><td>Start a new container and map all ports</td></tr></tbody></table><ul><li>Container Management:</li></ul><table tabindex="0"><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td><code>docker create IMAGE</code></td><td>Create a new container</td></tr><tr><td><code>docker start CONTAINER</code></td><td>Start a container</td></tr><tr><td><code>docker stop CONTAINER</code></td><td>Graceful stop a container</td></tr><tr><td><code>docker kill CONTAINER</code></td><td>Kill (<code>SIGKILL</code>) a container</td></tr><tr><td><code>docker restart CONTAINER</code></td><td>Graceful stop and restart a container</td></tr><tr><td><code>docker pause CONTAINER</code></td><td>Suspend a container</td></tr><tr><td><code>docker unpause CONTAINER</code></td><td>Resume a container</td></tr><tr><td><code>docker rm CONTAINER</code></td><td>Destroy a container</td></tr></tbody></table><ul><li>Container Bulk Management:</li></ul><table tabindex="0"><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td><code>docker stop $(docker ps -q)</code></td><td>To stop all the running containers</td></tr><tr><td><code>docker stop $(docker ps -a -q)</code></td><td>To stop all the stopped and running containers</td></tr><tr><td><code>docker kill $(docker ps -q)</code></td><td>To kill all the running containers</td></tr><tr><td><code>docker kill $(docker ps -a -q)</code></td><td>To kill all the stopped and running containers</td></tr><tr><td><code>docker restart $(docker ps -q)</code></td><td>To restart all running containers</td></tr><tr><td><code>docker restart $(docker ps -a -q)</code></td><td>To restart all the stopped and running containers</td></tr><tr><td><code>docker rm $(docker ps -q)</code></td><td>To destroy all running containers</td></tr><tr><td><code>docker rm $(docker ps -a -q)</code></td><td>To destroy all the stopped and running containers</td></tr><tr><td><code>docker pause $(docker ps -q)</code></td><td>To pause all running containers</td></tr><tr><td><code>docker pause $(docker ps -a -q)</code></td><td>To pause all the stopped and running containers</td></tr><tr><td><code>docker start $(docker ps -q)</code></td><td>To start all running containers</td></tr><tr><td><code>docker start $(docker ps -a -q)</code></td><td>To start all the stopped and running containers</td></tr><tr><td><code>docker rm -vf $(docker ps -a -q)</code></td><td>To delete all containers including its volumes use</td></tr><tr><td><code>docker rmi -f $(docker images -a -q)</code></td><td>To delete all the images</td></tr><tr><td><code>docker system prune</code></td><td>To delete all dangling and unused images, containers, cache and volumes</td></tr><tr><td><code>docker system prune -a</code></td><td>To delete all used and unused images</td></tr><tr><td><code>docker system prune --volumes</code></td><td>To delete all docker volumes</td></tr></tbody></table><ul><li>Inspect Containers:</li></ul><table tabindex="0"><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td><code>docker ps</code></td><td>List running containers</td></tr><tr><td><code>docker ps -a</code></td><td>List all containers, including stopped</td></tr><tr><td><code>docker logs CONTAINER</code></td><td>Show a container output</td></tr><tr><td><code>docker logs -f CONTAINER</code></td><td>Follow a container output</td></tr><tr><td><code>docker top CONTAINER</code></td><td>List the processes running in a container</td></tr><tr><td><code>docker diff</code></td><td>Show the differences with the image (modified files)</td></tr><tr><td><code>docker inspect</code></td><td>Show information of a container (json formatted)</td></tr></tbody></table><ul><li>Run Commands:</li></ul><table tabindex="0"><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td><code>docker attach CONTAINER</code></td><td>Attach to a container</td></tr><tr><td><code>docker cp CONTAINER:PATH HOSTPATH</code></td><td>Copy files from the container</td></tr><tr><td><code>docker cp HOSTPATH CONTAINER:PATH</code></td><td>Copy files into the container</td></tr><tr><td><code>docker export CONTAINER</code></td><td>Export the content of the container (tar archive)</td></tr><tr><td><code>docker exec CONTAINER</code></td><td>Run a command inside a container</td></tr><tr><td><code>docker exec -it CONTAINER /bin/bash</code></td><td>Open an interactive shell inside a container (there is no bash in some images, use /bin/sh)</td></tr><tr><td><code>docker wait CONTAINER</code></td><td>Wait until the container terminates and return the exit code</td></tr></tbody></table><ul><li>Images:</li></ul><table tabindex="0"><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td><code>docker images</code></td><td>List all local images</td></tr><tr><td><code>docker history IMAGE</code></td><td>Show the image history</td></tr><tr><td><code>docker inspect IMAGE</code></td><td>Show information (json formatted)</td></tr><tr><td><code>docker tag IMAGE TAG</code></td><td>Tag an image</td></tr><tr><td><code>docker commit CONTAINER IMAGE</code></td><td>Create an image (from a container)</td></tr><tr><td><code>docker import URL</code></td><td>Create an image (from a tarball)</td></tr><tr><td><code>docker rmi IMAGE</code></td><td>Delete images</td></tr><tr><td><code>docker pull REPO:[TAG]</code></td><td>pull an image/repo from a registry</td></tr><tr><td><code>docker push REPO:[TAG]</code></td><td>push and image/repo to a registry</td></tr><tr><td><code>docker search TEXT</code></td><td>Search an image on the official registry</td></tr><tr><td><code>docker login</code></td><td>Login to a registry</td></tr><tr><td><code>docker logout</code></td><td>Logout from a registry</td></tr><tr><td><code>docker save REPO:[TAG]</code></td><td>Export an image/repo as a tarball</td></tr><tr><td><code>docker load</code></td><td>Load images from a tarball</td></tr></tbody></table><ul><li>Volumes:</li></ul><table tabindex="0"><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td><code>docker volume ls</code></td><td>List all volumes</td></tr><tr><td><code>docker volume create VOLUME</code></td><td>Create a volume</td></tr><tr><td><code>docker volume inspect VOLUME</code></td><td>Show information (json formatted)</td></tr><tr><td><code>docker volume rm VOLUME</code></td><td>Destroy a volume</td></tr><tr><td><code>docker volume ls --filter=&quot;dangling=true&quot;</code></td><td>List all dangling volumes (not referenced by any container)</td></tr><tr><td><code>docker volume prune</code></td><td>Delete all volumes (not referenced by any container)</td></tr></tbody></table><h2 id="dockerfile" tabindex="-1"><code>Dockerfile</code> <a class="header-anchor" href="#dockerfile" aria-label="Permalink to “Dockerfile”">​</a></h2><p>Each step is considered as a layer of an image</p><ul><li>Docker caches results layer by layer</li></ul><p><code>Dockerfile</code> statements:</p><table tabindex="0"><thead><tr><th>Command</th><th>Purpose</th></tr></thead><tbody><tr><td><code>FROM</code></td><td>To specify the parent image</td></tr><tr><td><code>WORKDIR</code></td><td>To set the working directory for any commands that follow in the <code>Dockerfile</code></td></tr><tr><td><code>RUN</code></td><td>To install any applications and packages required for your container</td></tr><tr><td><code>COPY</code></td><td>To copy over files or directories from a specific location</td></tr><tr><td><code>ADD</code></td><td>As <code>COPY</code>, but also able to handle remote URLs and unpack compressed files</td></tr><tr><td><code>CNTRYPOINT</code></td><td>The command that will always be executed when the container starts. if not specified, the default is <code>/bin/sh -c</code></td></tr><tr><td><code>CMD</code></td><td>Arguments passed to the entrypoint. If <code>ENTRYPOINT</code> is not set (defaults to <code>/bin/sh -c</code>) the <code>CMD</code> will be the commands the container executes</td></tr><tr><td><code>EXPOSE</code></td><td>To define which port through which to access your container application</td></tr><tr><td><code>LABEL</code></td><td>To add metadata to the image</td></tr></tbody></table><p><em>Example:</em></p><ul><li><p>From scratch:</p><div class="language-dockerfile"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># syntax=docker/dockerfile:1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> scratch</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> helloworld /</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">&quot;/helloworld&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">]</span></span></code></pre></div></li><li><p>Python app:</p><div class="language-dockerfile"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># Docker image</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> python:latest</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># Set the working directory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># Install dependencies</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> ./requirements.txt /app</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> pip install --no-cache-dir --upgrade -r requirements.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># Copy the scripts to the folder</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> . /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># Start the app</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">&quot;python main.py&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">]</span></span></code></pre></div></li></ul><p><code>.dockerignore</code> file is used to prevent sensitive or unnecessary files and directories from making their way into your image builds</p><ul><li><p>It should be in the root directory, known as the build <strong>context</strong></p></li><li><p><a href="./../../C-Sharp/ASP_NET/Deployment.html#deploying-with-docker">ASP.NET Core app</a></p></li></ul><h2 id="docker-compose" tabindex="-1">Docker-Compose <a class="header-anchor" href="#docker-compose" aria-label="Permalink to “Docker-Compose”">​</a></h2><p>Docker-compose is a tool that is used for multi-container applications in a single host</p><p><a href="https://docs.docker.com/compose/gettingstarted/" target="_blank" rel="noreferrer">Getting started</a></p><p><em>Example:</em> <code>docker-compose.yaml</code> file</p><div class="language-yml"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">3.9</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">  web</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">    build</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> .</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">8000:5000</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">  redis</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">redis:alpine</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre></div><p>Networking:</p><p>By default Docker-Compose will create a new network for the given compose file. You can change the behaviour by defining custom networks in your compose file</p><ul><li>Create and assign custom network:</li></ul><p><em>Example:</em> <code>docker-compose.yml</code></p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">networks</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">  custom-network</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">  app</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">    networks</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> custom-network</span></span></code></pre></div><ul><li>Use existing networks:</li></ul><p>If you want to use an existing Docker network for your compose files, you can add the <code>external: true</code> parameter in your compose file</p><p><em>Example:</em> <code>docker-compose.yml</code></p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">networks</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">  existing-network</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">    external</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span></span></code></pre></div><p>Volumes:</p><p>Volumes allow Docker containers to use persistent storage. In a compose file, you can create and map volumes like this:</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">  my-volume</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">  app</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> my-volume:/path-in-container</span></span></code></pre></div><p>These volumes are stored in <code>/var/lib/docker/volumes</code></p><h3 id="docker-compose-commands" tabindex="-1">Docker-Compose Commands <a class="header-anchor" href="#docker-compose-commands" aria-label="Permalink to “Docker-Compose Commands”">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># create and start containers</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> up</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># start services with detached mode</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker-compose</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> up</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># start specific service</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> up</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">service-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># list images</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> images</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># list containers</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> ps</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># start service</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> start</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># stop services</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> stop</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># display running containers</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> top</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># kill services</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> kill</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># remove stopped containers</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> rm</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># stop all containers and remove images, volumes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> down</span></span></code></pre></div><h2 id="networking" tabindex="-1">Networking <a class="header-anchor" href="#networking" aria-label="Permalink to “Networking”">​</a></h2><p>Troubleshooting: <code>docker run --name netshoot --rm -it nicolaka/netshoot /bin/bash</code></p><h2 id="backup-and-restore-containers" tabindex="-1">Backup and Restore Containers <a class="header-anchor" href="#backup-and-restore-containers" aria-label="Permalink to “Backup and Restore Containers”">​</a></h2><p>Backup docker data from inside container volumes and package it in a tarball archive</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --volumes-from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> CONTAINER</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -v</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">pwd</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">:/backup</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> busybox</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> tar</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> cvfz</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> /backup/backup.tar</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> CONTAINERPATH</span></span></code></pre></div><p>An automated backup can be done also by this <a href="https://github.com/thedatabaseme/docker_backup" target="_blank" rel="noreferrer">Ansible playbook</a></p><p>The output is also a (compressed) tar. The playbook can also manage the backup retention. So older backups will get deleted automatically</p><p>To also create and backup the container configuration itself, you can use <code>docker-replay</code>for that. If you lose the entire container, you can recreate it with the export from <code>docker-replay</code></p><p>A more detailed tutorial on how to use docker-replay can be found <a href="https://thedatabaseme.de/2022/03/18/shorty-generate-docker-run-commands-using-docker-replay/" target="_blank" rel="noreferrer">here</a></p><h3 id="restore-container-from-backup" tabindex="-1">Restore container from backup <a class="header-anchor" href="#restore-container-from-backup" aria-label="Permalink to “Restore container from backup”">​</a></h3><p>Restore the volume with a tarball archive:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --volumes-from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> CONTAINER</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -v</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">pwd</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">:/backup</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> busybox</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">cd CONTAINERPATH &amp;&amp; tar xvf /backup/backup.tar --strip 1</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre></div><h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to “Reference”">​</a></h2><ul><li><a href="https://www.docker.com/" target="_blank" rel="noreferrer">Docker Homepage</a></li><li><a href="https://docs.docker.com/" target="_blank" rel="noreferrer">Docker Documentation</a></li><li>&quot;Learning Docker&quot; by Arthur Ulfeldt</li><li>Docker for .NET Developers with Visual Studio by Lee Brandt</li></ul>`,76)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
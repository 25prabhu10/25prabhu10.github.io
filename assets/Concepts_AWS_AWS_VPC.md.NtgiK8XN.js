import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"VPC","description":"VPC","frontmatter":{"title":"VPC","description":"VPC","prev":"./AWS"},"headers":[],"relativePath":"Concepts/AWS/AWS_VPC.md","filePath":"Concepts/AWS/AWS_VPC.md","lastUpdated":1756574703000}`);var a={name:`Concepts/AWS/AWS_VPC.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="vpc" tabindex="-1">VPC <a class="header-anchor" href="#vpc" aria-label="Permalink to “VPC”">​</a></h1><ul><li>VPC is something you should know in depth for the AWS Certified Solutions Architect Associate &amp; AWS Certified SysOps Administrator</li><li>At the AWS Certified Developer Level, you should know about: <ul><li>VPC, Subnets, Internet Gateways &amp; NAT Gateways</li><li>Security Groups, Network ACL (NACL), VPC Flow Logs</li><li>VPC Peering, VPC Endpoints</li><li>Site to Site VPN &amp; Direct Connect</li></ul></li><li>I will just give you an overview, less than1 or 2 questions at your exam.</li><li>Later in the course, I will be highlighting when VPC concepts are helpful</li></ul><h2 id="vpc-subnets-primer" tabindex="-1">VPC &amp; Subnets Primer <a class="header-anchor" href="#vpc-subnets-primer" aria-label="Permalink to “VPC &amp; Subnets Primer”">​</a></h2><ul><li>VPC: private network to deploy your resources (regional resource)</li><li>Subnets allow you to partition your network inside your VPC (Availability Zone resource)</li><li>A public subnet is a subnet that is accessible from the internet</li><li>A private subnet is a subnet that is not accessible from the internet</li><li>To define access to the internet and between subnets, we use Route Tables.</li></ul><h2 id="internet-gateway-nat-gateways" tabindex="-1">Internet Gateway &amp; NAT Gateways <a class="header-anchor" href="#internet-gateway-nat-gateways" aria-label="Permalink to “Internet Gateway &amp; NAT Gateways”">​</a></h2><ul><li>Internet Gateways helps our VPC instances connect with the internet</li><li>Public Subnets have a route to the internet gateway.</li><li>NAT Gateways (AWS-managed) &amp; NAT Instances (self-managed) allow your instances in your Private Subnets to access the internet while remaining private</li></ul><h2 id="network-acl-security-groups" tabindex="-1">Network ACL &amp; Security Groups <a class="header-anchor" href="#network-acl-security-groups" aria-label="Permalink to “Network ACL &amp; Security Groups”">​</a></h2><ul><li><p>NACL (Network ACL)</p><ul><li>A firewall which controls traffic from and to subnet</li><li>Can have ALLOW and DENY rules</li><li>Are attached at the Subnet level</li><li>Rules only include IP addresses</li></ul></li><li><p>Security Groups</p><ul><li>Act as virtual firewall that controls traffic to and from an ENI / an EC2 Instance</li><li>Can have only ALLOW rules</li><li>Rules include IP addresses and other security groups</li><li>Each instance can have up to 5 security groups</li></ul></li></ul><h2 id="network-acls-vs-security-groups" tabindex="-1">Network ACLs vs Security Groups <a class="header-anchor" href="#network-acls-vs-security-groups" aria-label="Permalink to “Network ACLs vs Security Groups”">​</a></h2><table tabindex="0"><thead><tr><th>Security Group</th><th>Network ACL</th></tr></thead><tbody><tr><td>Operates at the instance level</td><td>Operates at the subnet level</td></tr><tr><td>Supports allow rules only</td><td>Supports allow rules and deny rules</td></tr><tr><td>Is stateful: Return traffic is automatically allowed, regardless of any rules</td><td>Is stateless: Return traffic must be explicitly allowed by rules</td></tr><tr><td>We evaluate all rules before deciding whether to allow traffic</td><td>We process rules in number order when deciding whether to allow traffic</td></tr><tr><td>Applies to an instance only if someone specifies the security group when launching the instance, or associates the security group with the instance later on</td><td>Automatically applies to all instances in the subnets it&#39;s associated with (therefore, you don&#39;t have to rely on users to specify the security group)</td></tr></tbody></table><h2 id="vpc-flow-logs" tabindex="-1">VPC Flow Logs <a class="header-anchor" href="#vpc-flow-logs" aria-label="Permalink to “VPC Flow Logs”">​</a></h2><ul><li>Capture information about IP traffic going into your interfaces: <ul><li>VPC Flow Logs</li><li>Subnet Flow Logs</li><li>Elastic Network Interface Flow Logs</li></ul></li><li>Helps to monitor &amp; troubleshoot connectivity issues. Example: <ul><li>Subnets to internet</li><li>Subnets to subnets</li><li>Internet to subnets</li></ul></li><li>Captures network information from AWS managed interfaces too: Elastic Load Balancers, ElastiCache, RDS, Aurora, etc...</li><li>VPC Flow logs data can go to S3 / CloudWatch Logs</li></ul><h2 id="vpc-peering" tabindex="-1">VPC Peering <a class="header-anchor" href="#vpc-peering" aria-label="Permalink to “VPC Peering”">​</a></h2><ul><li>Connect two VPC, privately using AWS&#39; network</li><li>Make them behave as if they were in the same network</li><li>Must not have overlapping Classless Interdomain Routing (CIDR: uses variable length subnets masks (VLSM)) (IP address range)</li><li>VPC Peering connection is not transitive (must be established for each VPC that need to communicate with one another)</li></ul><h2 id="vpc-endpoints" tabindex="-1">VPC Endpoints <a class="header-anchor" href="#vpc-endpoints" aria-label="Permalink to “VPC Endpoints”">​</a></h2><ul><li>Endpoints allow you to connect to AWS Services using a private network instead of the public www network</li><li>This gives you enhanced security and lower latency to access AWS services</li><li>VPC Endpoint Gateway: S3 &amp; DynamoDB</li><li>VPC Endpoint Interface: the rest</li><li>Only used within your VPC</li></ul><h2 id="site-to-site-vpn-direct-connect" tabindex="-1">Site to Site VPN &amp; Direct Connect <a class="header-anchor" href="#site-to-site-vpn-direct-connect" aria-label="Permalink to “Site to Site VPN &amp; Direct Connect”">​</a></h2><ul><li>Site to Site VPN <ul><li>Connect an on-premises VPN to AWS</li><li>The connection is automatically encrypted</li><li>Goes over the public internet</li></ul></li><li>Direct Connect (DX) <ul><li>Establish a physical connection between on-premises and AWS</li><li>The connection is private, secure and fast</li><li>Goes over a private network</li><li>Takes at least a month to establish</li></ul></li><li>Note: Site-to-site VPN and Direct Connect cannot access VPC endpoints</li></ul><h2 id="vpc-closing-comments" tabindex="-1">VPC Closing Comments <a class="header-anchor" href="#vpc-closing-comments" aria-label="Permalink to “VPC Closing Comments”">​</a></h2><ul><li><p><strong>VPC</strong>: Virtual Private Cloud</p></li><li><p><strong>Subnets</strong>: Tied to an AZ, network partition of the VPC</p></li><li><p><strong>Internet Gateway</strong>: at the VPC level, provide Internet Access</p></li><li><p><strong>NAT Gateway / Instances</strong>: give internet access to private subnets</p></li><li><p><strong>NACL</strong>: Stateless, subnet rules for inbound and outbound</p></li><li><p><strong>Security Groups</strong>: Stateful, operate at the EC2 instance level or ENI</p></li><li><p><strong>VPC Peering</strong>: Connect two VPC with non overlapping IP ranges, non transitive</p></li><li><p><strong>VPC Endpoints</strong>: Provide private access to AWS Services within VPC</p></li><li><p><strong>VPC Flow Logs</strong>: network traffic logs</p></li><li><p><strong>Site to Site VPN</strong>: VPN over public internet between on-premises DC and AWS</p></li><li><p><strong>Direct Connect</strong>: direct private connection to a AWS</p></li></ul><h2 id="typical-solution-architecture" tabindex="-1">Typical Solution Architecture <a class="header-anchor" href="#typical-solution-architecture" aria-label="Permalink to “Typical Solution Architecture”">​</a></h2><p><img src="/assets/typical-3-tier-solution-architecture.B94cNU3Q.png" alt="Typical 3 tier solution architecture"></p><h3 id="lamp-stack-on-ec2" tabindex="-1">LAMP Stack on EC2 <a class="header-anchor" href="#lamp-stack-on-ec2" aria-label="Permalink to “LAMP Stack on EC2”">​</a></h3><ul><li>Linux: OS for EC2 instances</li><li>Apache: Web Server that run on Linux (EC2)</li><li>MySQL: database on RDS</li><li>PHP: Application logic (running on EC2)</li><li>Can add Redis / Memcached (ElastiCache) to include a caching tech</li><li>To store local application data &amp; software: EBS drive (root)</li></ul><h3 id="wordpress-on-aws" tabindex="-1">Wordpress on AWS <a class="header-anchor" href="#wordpress-on-aws" aria-label="Permalink to “Wordpress on AWS”">​</a></h3><p><img src="/assets/wordpress-on-aws.B1hvf7nF.png" alt="Wordpress on AWS"></p><p><a href="https://aws.amazon.com/blogs/architecture/wordpress-best-practices-on-aws/" target="_blank" rel="noreferrer">WordPress on AWS (more complicated)</a></p>`,27)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
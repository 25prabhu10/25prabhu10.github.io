import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"WebSocket","description":"WebSocket is a computer communications protocol, providing bidirectional full-duplex communication channels over a single TCP connection","frontmatter":{"title":"WebSocket","description":"WebSocket is a computer communications protocol, providing bidirectional full-duplex communication channels over a single TCP connection"},"headers":[],"relativePath":"Concepts/Web/WebSocket.md","filePath":"Concepts/Web/WebSocket.md","lastUpdated":1756574703000}`);var a={name:`Concepts/Web/WebSocket.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="websocket" tabindex="-1">WebSocket <a class="header-anchor" href="#websocket" aria-label="Permalink to “WebSocket”">​</a></h1><p>It is <em><a href="./Networking.html#application-layer">Application Layer protocol</a></em> that provides <strong>bidirectional, full-duplex communication</strong> channels over a <strong>single TCP connection</strong></p><ul><li><p>The protocol was standardized by the IETF as <strong><a href="https://tools.ietf.org/html/rfc6455" target="_blank" rel="noreferrer">RFC 6455</a></strong> in 2011, and the WebSocket API in Web IDL is being standardized by the W3C</p></li><li><p>It is designed to be implemented in web browsers and web servers, but it can be used by any client or server application</p></li><li><p>The WebSocket protocol makes more interaction between a web browser and a web server possible, facilitating <strong>real-time data transfer</strong> from and to the server</p></li><li><p>WebSocket is a <strong>stateful protocol</strong> that allows for <strong>bidirectional communication</strong> between the client and server</p></li><li><p>Event driven, <strong>message-oriented</strong> protocol</p></li></ul><p>WebSocket vs <a href="./HTTP.html">HTTP</a>:</p><table tabindex="0"><thead><tr><th>WebSocket</th><th>HTTP</th></tr></thead><tbody><tr><td>Full-duplex communication</td><td>Half-duplex communication</td></tr><tr><td>Real-time data transfer</td><td>Not real-time data transfer</td></tr><tr><td>Stateful protocol</td><td>Stateless protocol</td></tr><tr><td>Bi-directional communication</td><td>Uni-directional communication</td></tr><tr><td>Uses a single TCP connection</td><td>Uses multiple TCP connections</td></tr></tbody></table><ul><li>WebSocket is a different TCP protocol from HTTP, but it uses the same port (<code>80</code>) and is designed to be understood by HTTP servers and clients</li><li>Uses the same TCP connection over <code>ws://</code> or <code>wss://</code> (secure) URLs</li><li>Only sends header once, then sends data back and forth</li></ul><p><em>Example:</em> Initial request header (sent only once)</p><ul><li>Request:</li></ul><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">...</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">Connection</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> upgrade</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">Upgrade</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> websockets</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">...</span></span></code></pre></div><ul><li>Response:</li></ul><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Request URL: wss://...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Request Method: GET</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Status Code: 101 Switching Protocols</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">...</span></span></code></pre></div><h2 id="intended-use-case" tabindex="-1">Intended Use Case <a class="header-anchor" href="#intended-use-case" aria-label="Permalink to “Intended Use Case”">​</a></h2><ul><li><strong>WebSockets not == replacement of HTTP</strong></li><li>WS is an upgrade for HTTP</li><li>HTTP provides automatic caching</li><li>WS often needs special configuration for load balancing</li><li>Can&#39;t communicate with REST</li><li><strong>Use when you need full-duplex connection</strong></li><li>Useful for web-based games, chatting applications, anything which needs low-latency realtime connection</li></ul><h2 id="websocket-clients" tabindex="-1">WebSocket Clients <a class="header-anchor" href="#websocket-clients" aria-label="Permalink to “WebSocket Clients”">​</a></h2><ul><li>Used to interface with WebSockets Servers: Built in many languages</li><li>Clients exist for <em>MicroPy</em> and Arduino (IoT)</li><li>Most common client is web based and uses JavaScript</li><li>Require the Server to be able to interface WS</li></ul><p>See SocketIO Docs and WebSocket JavaScript Library</p><h2 id="socketio" tabindex="-1">SocketIO <a class="header-anchor" href="#socketio" aria-label="Permalink to “SocketIO”">​</a></h2><ul><li>JavaScript library for manipulating WebSockets: Includes fallback mechanisms and auto-reconnection</li><li>Handles disconnection and connection event</li><li>Namespacing and Room broadcasting</li></ul><h3 id="websockets-clientside-code" tabindex="-1">WebSockets Clientside Code <a class="header-anchor" href="#websockets-clientside-code" aria-label="Permalink to “WebSockets Clientside Code”">​</a></h3><p>Native WebSockets support using JavaScript:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> socket</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> WebSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">ws://localhost:8080</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">socket</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">onopen</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // on connection, do something...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  socket</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">PyCon AU!!</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">socket</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">onmessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // message from server</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span></code></pre></div><p>Using SocketIO:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> socket</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> io</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">http://localthost:8000/&lt;MY_NAMESPACE&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">socket</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">connect</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  socket</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">event_on_my_server</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">PyConAU!!</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">socket</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">my_custom_event</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // do something</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">});</span></span></code></pre></div><h3 id="websocket-server-side-code" tabindex="-1">WebSocket Server-Side Code <a class="header-anchor" href="#websocket-server-side-code" aria-label="Permalink to “WebSocket Server-Side Code”">​</a></h3><p>Using Native Flask WebSockets implementation: <code>flask_sockets</code> library:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># do all the imports, setup application above ^</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">socket </span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> Sockets</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#666666;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">socket</span><span style="--shiki-light:#6F42C1;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">route</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">/my_sockets</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> my_socket_event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">ws</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    while</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> ws</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">closed</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">        message </span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> ws</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">receive</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">        ws</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span></code></pre></div><p>Using SocketIO Server: <code>python_socketio</code> library:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># do all the imports, setup application above ^</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">socket </span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> socketio</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Server</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#666666;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">socket</span><span style="--shiki-light:#6F42C1;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">my custom event</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> namespace</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">/pycon</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> custome_event</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">sesstion_id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    # do stuff with data from client, side to all connected to &quot;pycon&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">    socket</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">my event on the server</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> broadcast</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">app </span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> socketio</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Middleware</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">socket</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> app</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span></code></pre></div><h3 id="python-servers-w-websocket" tabindex="-1">Python Servers w/WebSocket <a class="header-anchor" href="#python-servers-w-websocket" aria-label="Permalink to “Python Servers w/WebSocket”">​</a></h3><ul><li>SocketIO with python-socketio: Flask, Tornado, Pyramid, Bottle, Sanic, AioHTTP</li><li>Native WebSockets: <ul><li>Out of the box: Sanic, AioHTTP, Tornado</li><li>With library: Flask, Django (Channels 2.0), Bottle</li></ul></li></ul><h2 id="performance-comparison" tabindex="-1">Performance Comparison <a class="header-anchor" href="#performance-comparison" aria-label="Permalink to “Performance Comparison”">​</a></h2><ul><li>HTTP and WebSockets have the same sized header</li><li><strong>2 bytes/msg overhead</strong></li><li>SocketIO increases latency and initial connection: <ul><li>Under the hood starts: uses AJAX Long Polling initially and then upgrades</li></ul></li></ul><h2 id="deployment" tabindex="-1">Deployment <a class="header-anchor" href="#deployment" aria-label="Permalink to “Deployment”">​</a></h2><ul><li><code>Eventlet</code> and <code>Gevent</code> to monkey patch <code>async</code>: or just use standard threading...</li><li>Async web frameworks are ideal</li><li>Use message queue to run multiple instances behind load balancers with sticky sessions on workers</li></ul><h2 id="alternate-methods" tabindex="-1">Alternate Methods <a class="header-anchor" href="#alternate-methods" aria-label="Permalink to “Alternate Methods”">​</a></h2><p>Alternate ways to replicate real time communication functionality</p><h3 id="polling-and-long-polling" tabindex="-1">Polling and Long Polling <a class="header-anchor" href="#polling-and-long-polling" aria-label="Permalink to “Polling and Long Polling”">​</a></h3><p>HTTP hack for real-time communication: <strong>Long Polling</strong> (keep connection open until new data is sent back) or <strong>Polling</strong> (send <a href="./../../Languages/JavaScript/JavaScript.html#ajax-asynchronous-javascript-and-xml">AJAX</a> request every X amount of seconds for new data) are alternatives to WebSockets</p><ul><li><strong>Polling</strong>: Send AJAX request every X amount of seconds for new data (not true real time)</li><li><strong>Long Polling</strong>: Send request to server and keep connection open until new data is sent back and keep repeating this process</li><li>Much better backwards compatibility</li></ul><p>Issues:</p><ul><li>These methods are not truly real-time and have higher latency</li><li>Requests are sent regardless of whether there is new data or not</li></ul><h3 id="server-sent-events" tabindex="-1">Server Sent Events <a class="header-anchor" href="#server-sent-events" aria-label="Permalink to “Server Sent Events”">​</a></h3><p>Ways to replicate real time communication functionality</p><ul><li>Another &quot;real-time&quot; alternative: Uses <em>EventSource</em> API to send messages from server. Not truly bi-directional</li><li>Generally requires an event loop</li><li>No binary message capabilities</li></ul><blockquote><p>See EventSource API, Python/Django Implementations of SSE</p></blockquote>`,45)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
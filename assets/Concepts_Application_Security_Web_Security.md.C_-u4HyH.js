import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"Web Security","description":"The protective measures and protocols that organizations adopt to protect the organization from, cyber criminals and threats that use the web channel.","frontmatter":{"title":"Web Security","description":"The protective measures and protocols that organizations adopt to protect the organization from, cyber criminals and threats that use the web channel."},"headers":[],"relativePath":"Concepts/Application_Security/Web_Security.md","filePath":"Concepts/Application_Security/Web_Security.md","lastUpdated":1756574703000}`);var a={name:`Concepts/Application_Security/Web_Security.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="web-security" tabindex="-1">Web Security <a class="header-anchor" href="#web-security" aria-label="Permalink to “Web Security”">​</a></h1><p>The protective measures and protocols that organizations adopt to protect the organization from, cyber criminals and threats that use the web channel.</p><p>Using Defence In Depth approach: By increasing the number of layers, an attacker&#39;s chance of success is decreased. For example an applications which contains:</p><ol><li>Sensitive data is encrypted when stored in the database</li><li>Application has an extensive input validation</li><li>Hosts are patched with the latest security patches</li><li>The internal network is segregated into different zones protected by firewall rules</li><li>A firewall separates the internal perimeter from the internet</li><li>Servers are located in a badge-reader protected room</li><li>Finally, security assessments are performed to check adherence</li></ol><ul><li>Vulnerabilities and Exploits</li></ul><h2 id="preventing-vulnerabilities" tabindex="-1">Preventing vulnerabilities <a class="header-anchor" href="#preventing-vulnerabilities" aria-label="Permalink to “Preventing vulnerabilities”">​</a></h2><ol><li>At the &quot;Data&quot; layer: Access controls, Encryption, Backup and restore procedures</li><li>At the &quot;Application&quot; layer: Authentication, Authorization, Auditing (otherwise known as AAA). Securing coding, and Hardening.</li><li>At the &quot;Host&quot; layer: Hardening, Authentication, Patch management, Antivirus</li><li>On the &quot;Internal network&quot;: Network segmentation, IPsec, TLS, NAT</li><li>At the &quot;Perimeter&quot; layer: Firewall, TLS, Denial of service, prevention</li><li>And finally, you should consider &quot;Physical Security&quot; including: Guards, Locks, Tracking devices, and Badging systems</li></ol><h3 id="threat-modelling" tabindex="-1">Threat Modelling <a class="header-anchor" href="#threat-modelling" aria-label="Permalink to “Threat Modelling”">​</a></h3><p>Threat Modelling is a way to identify, communicate, and understand security threats and mitigations</p><p>Different Threat Modelling</p><ul><li><a href="#stride">STRIDE</a></li></ul><h4 id="stride" tabindex="-1">STRIDE <a class="header-anchor" href="#stride" aria-label="Permalink to “STRIDE”">​</a></h4><p>Developed by Microsoft, STRIDE is considered one of the most comprehensive ways to identify threats.</p><p>STRIDE stands for:</p><ul><li><p>Spoofing: Authentication</p><ul><li>Spoofing is the impersonation of something or someone else</li></ul></li><li><p>Tampering: Integrity</p><ul><li>Tampering happens when attacker modify data or code</li></ul></li><li><p>Repudiation: Non-repudiation</p><ul><li>Repudiation occurs when someone claims not to have performed an action</li></ul></li><li><p>Information disclosure: Confidentiality</p><ul><li>Information disclosure describes when information is exposed to users who are not authorized to see it</li></ul></li><li><p>Denial of service: Availability</p><ul><li>Denial of service happens when service is denied or degraded</li></ul></li><li><p>Elevation of privilege: Authorization</p><ul><li>Elevation of privilege means users can gain capabilities when they don&#39;t have proper authorization</li></ul></li></ul><h2 id="security" tabindex="-1">Security <a class="header-anchor" href="#security" aria-label="Permalink to “Security”">​</a></h2><p>More complex the application (more ways to interact) more potential bugs: Combinatorial explosion of different ways an API can be used</p><ol><li><p>What is Application Security?</p><ul><li>Security beyond infrastructure</li><li>Integrating security tooling to DevOps a.k.a DevSecOps</li><li>Determine security posture for application</li><li>Understanding technical risks</li><li>Providing technical recommendations</li><li>Application security guidelines and standards for Group</li><li>Knowledge sharing and presentations on security</li></ul></li><li><p>Why is Application Security Important?</p><ul><li>PCI DSS.</li><li>APRA Prudential Standard CPS 234 &amp; Practice Guide CPG 234.</li></ul></li></ol><p>Common form of attacks:</p><ul><li><strong>Spam</strong>: Sent from legitimate IP address, less likely to be blocked</li><li><strong>Denial of service</strong>: attack competitors, or seek ransom</li><li>Infect visiting users with <strong>malware</strong>: Infect one server, use it to infect hundreds of thousands of clients</li><li><strong>Data theft</strong>: Steal credentials, credit card numbers, intellectual property</li></ul><p>Different Parts of Web Security:</p><ul><li><p><strong>Browser security</strong>:</p><ul><li><em>Example:</em> <a href="./SameOrigin_Policy.html">Same-Origin Policy</a> - Isolate sites from each other, while running in the same browser</li></ul></li><li><p><strong>Server app security</strong>:</p><ul><li>Attackers can run arbitrary HTTP clients: can send anything to server</li></ul></li><li><p><strong>Client app security</strong>:</p><ul><li>Prevent user from being attacked while using web app locally</li></ul></li><li><p><strong>Protect the user</strong>:</p><ul><li>From social engineering</li><li>From trackers, private data being leaked</li></ul></li></ul><p>Why is web security hard?</p><ul><li>Social engineering is very effective</li><li>Extremely ambitious goal: Run untrusted code securely</li><li>Different sites interacting in the same tab like ads (&quot;mashups&quot;)</li><li>Low-level features: hardware access</li><li>Desire for high performance</li><li>APIs were not designed from first principles: evolved</li><li>Strict backwards compatibility requirements</li><li><strong>&quot;Don&#39;t break the web&quot;</strong></li></ul><blockquote><p>&quot;Modern web applications are built on a tangle of technologies that have been developed over time and then haphazardly pieced together. Every piece of the web application stack, from HTTP requests to browser-side scripts, comes with important yet subtle security consequences. To keep users safe, it is essential for developers to confidently navigate this landscape.&quot;</p><ul><li>Tangled Web</li></ul></blockquote><p>The browser has a seemingly impossible task:</p><ul><li>Sites - <strong>even malicious ones</strong> can:</li><li>Download content from <strong>anywhere</strong></li><li>Spawn worker processes</li><li>Open sockets to a server, or even to another user&#39;s browser</li><li>Display media in huge number of formats</li><li>Run custom code on the GPU</li><li>Save/read data from the file-system</li></ul><blockquote><p>&quot;It&#39;s all too easy to criticize, lament, and create paranoid scenarios about the &#39;unsound security foundations&#39; of the web. Truth is, all of that criticism is true, and yet the web has proven to be an incredibly robust platform.&quot;</p><ul><li>Ilya Grigorik, Google web performance engineer</li></ul></blockquote><h2 id="the-five-stages-of-hacking" tabindex="-1">The Five Stages of Hacking <a class="header-anchor" href="#the-five-stages-of-hacking" aria-label="Permalink to “The Five Stages of Hacking”">​</a></h2><ol><li><p><a href="#reconnaissance">Reconnaissance</a> - Gathering Information</p><ul><li>Passive Reconnaissance</li><li>Active Reconnaissance</li></ul></li><li><p>Scanning and Enumeration</p></li><li><p>Gaining Access - Exploitation, Remote Connection Execution (RCE)</p></li><li><p>Maintaining Access</p></li><li><p>Covering Tracks</p></li></ol><h3 id="reconnaissance" tabindex="-1">Reconnaissance <a class="header-anchor" href="#reconnaissance" aria-label="Permalink to “Reconnaissance”">​</a></h3><ol><li>Passive Reconnaissance: <ul><li>Target Validation: <code>WHOIS</code>, <code>nslookup</code>, <code>dnsrecon</code></li><li>Finding Subdomains: Google Fu, <code>dig</code>, <code>Nmap</code>, <code>Sublist3r</code>, <code>Bluto</code>, <code>crt.sh</code>, etc.</li><li>Fingerprinting: <code>Nmap</code>, <code>Wappalyze</code>, <code>WhatWeb</code>, <code>BuiltWith</code>, <code>Netcat</code></li><li>Data Breaches: <code>HaveIBeenPwned</code> and similar lists</li></ul></li></ol><h2 id="owasp-top-10" tabindex="-1">OWASP Top 10 <a class="header-anchor" href="#owasp-top-10" aria-label="Permalink to “OWASP Top 10”">​</a></h2><ol><li>Insecure Direct Object References</li><li>Missing Function Level Access Control</li><li>Unvalidated Redirects and Forwards</li><li>Click Jacking attacks</li><li>Insufficient Attack Protection</li><li>Under-protected APIs</li></ol><h3 id="_2021-list" tabindex="-1">2021 List <a class="header-anchor" href="#_2021-list" aria-label="Permalink to “2021 List”">​</a></h3><ol><li>Broken Access Control</li><li><a href="./Cryptography.html">Cryptographic</a> Failures (2017 - 3)</li><li><a href="./Code_Injection.html">Injection</a></li><li><strong>Insecure Design</strong></li><li>Security Misconfiguration</li><li>Vulnerable and Outdated Components (2017 - 9)</li><li><a href="./Authentication.html">Identification and Authentication Failures</a> (2017 - 2)</li><li><strong>Software and Data Integrity Failures</strong></li><li>Security Logging and Monitoring Failures</li><li><strong>Server-Side Request Forgery</strong> (SSRF) (2017 - 10)</li></ol><h3 id="_2017-list" tabindex="-1">2017 List <a class="header-anchor" href="#_2017-list" aria-label="Permalink to “2017 List”">​</a></h3><ol><li>Injection</li><li>Broken Authentication</li><li>Sensitive Data Exposure</li><li><strong>XML External Entities</strong></li><li>Broken Access Control (2013 - 4 &amp; 7)</li><li>Security Misconfiguration</li><li>Cross-Site Scripting (XSS): <a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html" target="_blank" rel="noreferrer">Cheat sheet</a></li><li><strong>Insecure De-serialization</strong></li><li>Using Components with Known Vulnerabilities</li><li><strong>Insufficient Logging &amp; Monitoring</strong></li></ol><h3 id="_2013-list" tabindex="-1">2013 List <a class="header-anchor" href="#_2013-list" aria-label="Permalink to “2013 List”">​</a></h3><ol><li>Injection</li><li>Broken Authentication and Session Management</li><li>Cross-Site Scripting (XSS)</li><li>Insecure Direct Object References</li><li>Security Misconfiguration</li><li>Sensitive Data Exposure</li><li>Missing Function Level Access Control</li><li><a href="./CrossSite_Resource_Forgery.html">Cross-Site Request Forgery (CSFR)</a></li><li>Using Components with Known Vulnerabilities</li><li>Unvalidated Redirects and Forwards</li></ol><h2 id="cross-origin-resource-sharing-cors" tabindex="-1">Cross-Origin Resource Sharing (CORS) <a class="header-anchor" href="#cross-origin-resource-sharing-cors" aria-label="Permalink to “Cross-Origin Resource Sharing (CORS)”">​</a></h2><p>All cross-origin calls must return with <code>Access-Control-*</code> headers to indicate white-listed applications</p><ul><li><code>Access-Control-Allow-Origin</code>: List of origins allowed to connect to this API</li><li><code>Access-Control-Allow-Methods</code>: List of methods allowed for the API</li></ul><p>Pre-flight question:</p><ul><li>Browser sends request with <code>OPTION</code> method set to receive CORS headers from backend</li><li>After verification, browser sends the actual request</li></ul><table tabindex="0"><thead><tr><th>Attributes</th><th>Simple Request</th><th>Pre-flighted Request</th></tr></thead><tbody><tr><td>Methods</td><td><code>GET</code>, <code>HEAD</code>, <code>POST</code></td><td><code>DELETE</code>, <code>PUT</code>, <code>PATCH</code>, <code>CONNECT</code></td></tr><tr><td>Allowed Headers</td><td><code>Accept</code>, <code>Accept-Language</code>,<code>Content-Language</code>, <code>Content-Type</code>, etc.</td><td>N/A</td></tr><tr><td>Non-Standard Headers</td><td>Not-allowed, Upgrade to Pre-flighted</td><td>N/A</td></tr></tbody></table><h2 id="same-site-policy" tabindex="-1">Same-Site Policy <a class="header-anchor" href="#same-site-policy" aria-label="Permalink to “Same-Site Policy”">​</a></h2><p>Site vs Origin:</p><ul><li><p>Two URIs are part of the same origin, if they have the same scheme, host and port</p></li><li><p>Two URIs are part of the same site, if they have the same domain and suffix</p></li><li><p>Same Site:</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>https://foo.example.org</span></span>
<span class="line"><span>https://bar.example.org</span></span></code></pre></div></li><li><p>Cross Site:</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>https://foo.github.io</span></span>
<span class="line"><span>https://bar.github.io</span></span></code></pre></div></li><li><p>Same Site:</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>https://foo.bar.example.org</span></span>
<span class="line"><span>https://bar.example.org</span></span></code></pre></div></li></ul><h3 id="ssp-applicable" tabindex="-1">SSP Applicable <a class="header-anchor" href="#ssp-applicable" aria-label="Permalink to “SSP Applicable”">​</a></h3><p>Which is blocked?</p><ul><li><p><strong>Web Forms: applies</strong></p><ul><li><p>Scripts, images, etc. which remain constant:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://cross-origin/my.js</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span></code></pre></div></li><li><p>Cross-origin web forms:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://cross-origin/getmyval</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">GET</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span></code></pre></div></li></ul></li><li><p><strong>JavaScript: applies</strong></p><ul><li><p>Content operated via XMLHTTPRequest or Fetch (APIs):</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://cross-origin/getmyval</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div></li></ul></li></ul><h2 id="security-headers" tabindex="-1">Security Headers <a class="header-anchor" href="#security-headers" aria-label="Permalink to “Security Headers”">​</a></h2><p>Mandatory security headers for apps:</p><ul><li><p><a href="./Cryptography.html#http-strict-transport-security-hsts"><code>Strict-Transport-Security</code></a>\xA0enforces secure (HTTP over SSL/TLS) connections to the server</p></li><li><p><code>X-XSS-Protection</code>\xA0enables the <a href="./Cross_Site_Scripting.html">Cross-site scripting (XSS)</a> filter built into most recent web browsers</p></li><li><p><a href="./Content_Security_Policy.html"><code>Content-Security-Policy</code></a>\xA0prevents a wide range of attacks, including Cross-site scripting and other cross-site injections</p></li><li><p>Reduce Fingerprinting:</p><ul><li><code>X-Powered-By</code>:</li></ul></li><li><p>MIME Sniffing Protection:</p><ul><li><p>When content type is:</p><ul><li><strong>Set</strong>: Some browsers (IE) try to verify content type with actual content payload</li><li><strong>Not Set</strong>: Some browsers guess content type while others block loading of page</li></ul></li><li><p>Block browser MIME sniffing</p></li><li><p>Blocks request if MIME type does not match tag types, e.g. <code>script</code></p></li><li><p>Preferred Header Settings:</p></li></ul><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">X-Content-Type-Options</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> nosniff</span></span></code></pre></div></li><li><p>Clickjacking Protection (Legacy):</p><ul><li><p>AKA UI redressing</p></li><li><p>Attackers trick users into clicking hidden actionable content</p><ul><li>CSS is used to create and manipulate layers</li><li>iframes are used to create hidden content</li></ul></li><li><p>Prevent framing of your site as iframe in another website:</p><ul><li><p>Complete deny:</p><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">X-Frame-Options</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> deny</span></span></code></pre></div></li><li><p>Allow same origin:</p><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">X-Frame-Options</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> sameorigin</span></span></code></pre></div></li><li><p>Allow from specific origin:</p><ul><li>Allow from is deprecated in some browsers and should not be relied upon - use in conjunction with CSP</li></ul><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">X-Frame-Options</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> allow-from https://normal-website.com</span></span></code></pre></div></li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>Clickjacking attacks are not mitigated by CSRF tokens</p></div></li><li><p>Cache Headers:</p><ul><li>Properly configured caching header is to avoid having sensitive information stored in browser or proxy: <ul><li><code>Cache-Control</code>: Header to determine if page should be cached</li><li><code>Expires</code>: Not relevant in modern browsers but needed to stay consistent</li><li><code>Pragma</code>: This is older header and replaced by <code>Cache-Control</code></li></ul></li></ul><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">Cache-Control</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> private, no-cache, no-store, max-age=0, no-transform</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">Pragma</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> no-cache</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">Expires</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> 0</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p><code>no-cache</code> only works for proxies and <code>no-store</code> only works for browsers</p></div></li></ul><p>You can cache:</p><ul><li>Static or non-personalised content</li><li>Only <code>GET</code> request</li><li>Only cache HTTP 200 OK response</li></ul><p>You can&#39;t cache:</p><ul><li>Sensitive information/PII</li><li>Set cookies request</li><li><code>Cache-Control</code> header that contains <code>private</code> and <code>no-cache</code> and <code>no-store</code></li><li><code>Pragma</code> header that contains <code>private</code> and <code>no-cache</code> and <code>no-store</code></li></ul><p>Examples of extensions to cache:</p><table tabindex="0"><thead><tr><th>Web</th><th>Images</th><th>Font</th></tr></thead><tbody><tr><td>css</td><td>jpg</td><td>woff</td></tr><tr><td>js</td><td>jpeg</td><td>tff</td></tr><tr><td>json (static only)</td><td>png</td><td>eot</td></tr><tr><td></td><td>gif</td><td></td></tr><tr><td></td><td>svg</td><td></td></tr><tr><td></td><td>jpg</td><td></td></tr></tbody></table><h2 id="regular-expression-denial-of-service-redos" tabindex="-1">Regular expression Denial of Service - ReDoS <a class="header-anchor" href="#regular-expression-denial-of-service-redos" aria-label="Permalink to “Regular expression Denial of Service - ReDoS”">​</a></h2><ul><li><a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS" target="_blank" rel="noreferrer">Regular expression Denial of Service</a></li></ul><p>Check if regex is safe:</p><ul><li><a href="https://github.com/davisjam/safe-regex" target="_blank" rel="noreferrer">safe-regex</a></li></ul><h2 id="unique-identifiers" tabindex="-1">Unique Identifiers <a class="header-anchor" href="#unique-identifiers" aria-label="Permalink to “Unique Identifiers”">​</a></h2><p>Unique Identifiers are used to identify any entity uniquely. They are used in various places like:</p><ul><li>Session ID</li><li>CSRF Token</li><li>API Key</li><li>User ID</li><li>Order ID</li></ul><p>You can use sequential identifiers (like auto-incrementing integers) to identify entities. In a database, you can use a primary key to identify entities. But, sequential identifiers are predictable and can be easily guessed</p><p>For example, if you are using sequential identifiers for session IDs (<code>sessionID: 123</code>), an attacker can easily guess the next session ID (<code>sessionID: 124</code>) and hijack the session</p><ul><li>To avoid this, you can use random identifiers (like UUIDs or GUIDs) to identify entities</li><li>They are hard to guess and are more secure</li></ul><p>Why do we need unique identifiers?</p><ul><li>To identify entities uniquely</li><li>To avoid conflicts</li><li>Increase security</li></ul><p>What makes a good unique identifier?</p><ul><li>Secure</li><li>Collision-resistant</li><li>Horizontally scalable</li><li>Offline generation</li><li>Identifiable</li><li>Unpredictable</li></ul><p>Common forms of unique identifiers:</p><ul><li>URI (Uniform Resource Identifier)</li><li>UUID (Universally Unique Identifier)</li><li>GUID (Globally Unique Identifier)</li><li>CUID (Collision-resistant Unique Identifier)</li><li>BIC (Bank Identifier Code)</li><li>UDID (Unique Device Identifier)</li><li>SSID (Service Set Identifier)</li></ul><h3 id="uuid" tabindex="-1">UUID <a class="header-anchor" href="#uuid" aria-label="Permalink to “UUID”">​</a></h3><p><strong>Universally Unique Identifier (UUID)</strong> is a 128-bit label that can be used across all computers and networks wherever a unique identifier is required. Such an identifier has a very low probability of being duplicated</p><ul><li>Odds of collision for UUIDs are supposed to be one in a <code>1.7-quintillion</code> (1.7 x 10^18)</li><li><a href="https://datatracker.ietf.org/doc/html/rfc4122" target="_blank" rel="noreferrer">RFC 4122</a> defines the UUID</li><li>UUIDs are also known as <a href="#guid">GUIDs</a> (Globally Unique Identifier) as per RFC 4122</li></ul><h4 id="format" tabindex="-1">Format <a class="header-anchor" href="#format" aria-label="Permalink to “Format”">​</a></h4><p>A UUID is a 128-bit in size, in which 2-4 bits are used to indicate the format&#39;s variant. The most common variant in use, OSF DCE</p><p>Different versions of UUID:</p><ol><li><strong>V1 and V6</strong> (date-time and MAC address): Based on the current time and MAC address</li><li><strong>V2</strong> (date-time and MAC address, DCE Security verion): Based on the POSIX UID/GID</li><li><strong>V3 and V5</strong> (namespace name-based): Based on a hash of a name</li><li><strong>V4</strong> (random): Generated randomly</li><li><strong>V7</strong> (timestamp and random): Designed for keys in high-load databases and distributed systems</li><li><strong>V8</strong> (custom): Custom version</li></ol><p>Due to some older implementations of V4 UUID can&#39;t generate more than 10k ids without generating a collision</p><h3 id="guid" tabindex="-1">GUID <a class="header-anchor" href="#guid" aria-label="Permalink to “GUID”">​</a></h3><p><strong>Globally Unique Identifier (GUID)</strong> is a 128-bit integer (16 bytes) that can be used across all computers and networks wherever a unique identifier is required. Such an identifier has a very low probability of being duplicated</p><ul><li>Odds of collision for GUIDs are supposed to be one in a <code>5.3-quintillion</code> (5.3 x 10^18)</li></ul><p>There are two types of unique identifiers:</p><ul><li><strong>Sequential</strong>: Generated in sequence</li><li><strong>Random</strong>: Generated randomly</li></ul><h3 id="cuid" tabindex="-1">CUID <a class="header-anchor" href="#cuid" aria-label="Permalink to “CUID”">​</a></h3><p><strong>Collision-resistant Unique Identifier (CUID)</strong> is a 128-bit integer (16 bytes) that can be used across all computers and networks wherever a unique identifier is required. Such an identifier has a very low probability of being duplicated</p><h3 id="snowflake-id" tabindex="-1">Snowflake ID <a class="header-anchor" href="#snowflake-id" aria-label="Permalink to “Snowflake ID”">​</a></h3><p>Twitter&#39;s Snowflake ID is a 64-bit unique identifier that is used to generate unique IDs at high scale. It is composed of:</p><ul><li>41 bits for timestamp</li><li>10 bits for machine ID</li><li>12 bits for sequence number</li></ul><p>Snowflake ID is used to generate unique IDs at high scale</p><p>Every snowflake ID has a unique structure, hence called snowflake ID</p><p><em>Example:</em> Tweet by Wikipedia has a snowflake ID <code>1541815603606036480</code></p><ul><li><p><a href="https://github.com/paralleldrive/cuid2/issues/7#issuecomment-1464559207" target="_blank" rel="noreferrer">Comparison to others?</a></p></li><li><p><a href="https://brandur.org/nanoglyphs/026-ids" target="_blank" rel="noreferrer">Identity Crisis: Sequence v. UUID as Primary Key</a></p></li><li><p><a href="https://planetscale.com/blog/the-problem-with-using-a-uuid-primary-key-in-mysql" target="_blank" rel="noreferrer">The Problem with Using a UUID Primary Key in MySQL</a></p></li></ul><h3 id="database-unique-identifier" tabindex="-1">Database Unique Identifier <a class="header-anchor" href="#database-unique-identifier" aria-label="Permalink to “Database Unique Identifier”">​</a></h3><p>When storing data into a database, you can use a unique identifier as primary key. You can use sequential identifiers (like auto-incrementing integers) or random identifiers (like UUIDs or GUIDs) to identify entities</p><p>If we use sequential identifiers, it is good for performance but it is predictable and can be easily guessed. Also in a distributed system, different nodes can generate the same identifier which can cause conflicts</p><p>If we use random identifiers, it is secure but it is bad for performance.</p><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to “Resources”">​</a></h2><ul><li><p>CS-241 and CS-253 (Stanford): <a href="https://www.youtube.com/watch?v=5JJrJGZ_LjM&amp;list=PL1y1iaEtjSYiiSGVlL1cHsXN_kvJOOhu-&amp;index=1" target="_blank" rel="noreferrer">YouTube Link</a></p></li><li><p><a href="https://csp.withgoogle.com/docs/adopting-csp.html" target="_blank" rel="noreferrer">Adopting CSP</a></p></li></ul>`,105)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
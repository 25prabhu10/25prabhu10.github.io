import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"Software Architectural Patterns","description":null,"frontmatter":{"title":"Software Architectural Patterns","description":null,"date":"2023-09-03T00:00:00.000Z","lastmod":"2023-09-03T00:00:00.000Z"},"headers":[],"relativePath":"Concepts/Architecture/Software_Architectural_Patterns.md","filePath":"Concepts/Architecture/Software_Architectural_Patterns.md","lastUpdated":1756574703000}`);var a={name:`Concepts/Architecture/Software_Architectural_Patterns.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="software-architectural-patterns" tabindex="-1">Software Architectural Patterns <a class="header-anchor" href="#software-architectural-patterns" aria-label="Permalink to “Software Architectural Patterns”">​</a></h1><p>An architectural pattern is a general, reusable solution to a commonly occurring problem in software architecture within a given context. Architectural patterns are similar to software design pattern but have a broader scope</p><ol><li><p>Layered Pattern:</p><ul><li><a href="./Clean_Architecture.html">Clean/Onion Architecture</a></li><li>Layered (n-tire): Separates software into logical layers</li></ul></li><li><p>Event-Driven:</p><ul><li>Event-Driven: Promotes the production, detection, consumption of, and reaction to events</li><li>Publish-Subscribe</li></ul></li><li><p>Component-Based:</p><ul><li>Object-Oriented</li><li>Microkernel: Separates a minimal function core from extended functionality and customer-specific parts</li><li>Plug-in</li></ul></li><li><p>Service-Oriented:</p><ul><li>Service-Oriented (SOA)</li><li>Broker</li><li>Microservices: This architecture designs a software application as a suite of independently deployable, small, modular services</li><li>Serveless (Faas)</li></ul></li><li><p>Data-Centric:</p><ul><li>CQRS: Separates read and write operations for a data store. It enables independent scaling of read and write workloads and optimizes them separately</li><li>Event-Sourcing</li><li>Kappa</li><li>Lambda</li></ul></li><li><p>Distributed System:</p><ul><li>Space-Based: This resolves the issues of data consistency, reliable performance, and scalability for large-scale distributed systems</li><li>Peer-to-Peer</li></ul></li><li><p>Domain-Driven:</p><ul><li>Hexagonal (Ports &amp; Adapters)</li><li>Domain-Driven Design (DDD): Focuses on the domain logic and complexity rather that the technology used</li></ul></li><li><p>Separation Of Concern:</p><ul><li>Model-View Presenter: Derivative of the Model-View-Controller (MVC) pattern, which aims to separate the concerns of data management, user interface, and control flow</li><li>Model-View-Controller</li></ul></li><li><p>Concurrency:</p><ul><li>Orchestration Choreography: A central coordinator (often called an orchestrator) that directs the interaction between services. The orchestrator is responsible for managing the control flow and data flow between services</li><li>Primary-Secondary</li><li>Pipeline/Pipe-Filter</li></ul></li><li><p>Interpreter: Written in a high-level language, which the interpreter translates into executable code</p></li></ol>`,3)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
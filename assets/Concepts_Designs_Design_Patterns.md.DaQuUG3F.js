import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"Design Patterns","description":"Design patterns are common approaches to solving similar problems","frontmatter":{"title":"Design Patterns","description":"Design patterns are common approaches to solving similar problems"},"headers":[],"relativePath":"Concepts/Designs/Design_Patterns.md","filePath":"Concepts/Designs/Design_Patterns.md","lastUpdated":1756574703000}`);var a={name:`Concepts/Designs/Design_Patterns.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="design-patterns" tabindex="-1">Design Patterns <a class="header-anchor" href="#design-patterns" aria-label="Permalink to “Design Patterns”">​</a></h1><p>Design patterns are common approaches to solving similar problems</p><p>They are like pre-made blueprints that you can customize to solve a recurring design problem in your code</p><p>The 1995 book <em>Design Patterns: Elements of Reusable Object-Oriented Software</em> by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides, also know as <em>Gang of Four (GoF)</em>, describes <strong>23 patterns</strong></p><p>Quote from the book:</p><blockquote><p>A design pattern systematically names, motivates, and explains a general design that addresses a recurring design problem in object-oriented systems. It describes the problem, the solution,, when to apply the solution, and its consequences. It also gives implementation hints and examples. The solution is a general arrangement of objects and classes that solve the problem. The solution is customized and implemented to solve the problem in a particular context.</p></blockquote><p>Why use design patterns?</p><ul><li><p>Reusable solutions to common problems</p></li><li><p>Standardized terminology</p></li><li><p>Scalability</p></li><li><p>Maintainability</p></li><li><p>Performance</p></li><li><p>Documentation</p></li><li><p>Best practices</p></li><li><p>Cross-Domain Applicability</p></li><li><p>They are just guidelines that help us avoid bad design that are:</p><ul><li>Rigid</li><li>Fragile</li><li>Immobile</li></ul></li><li><p>Some design patterns tend to <strong>cause more problems</strong> than they solve, and are thus commonly referred to as <strong>anti-patterns</strong></p></li></ul><p><strong>Prerequisite</strong>: Knowing <a href="./Programming_Paradigms/Object-Oriented_Programming.html">OOPs concepts</a></p><h2 id="need-to-know" tabindex="-1">Need to Know <a class="header-anchor" href="#need-to-know" aria-label="Permalink to “Need to Know”">​</a></h2><ul><li>[ ] SAGA</li><li>[ ] 2-way pattern</li><li>[ ] Add advantages, usage, and UML for each pattern</li></ul><h2 id="criticism-of-patterns" tabindex="-1">Criticism of Patterns <a class="header-anchor" href="#criticism-of-patterns" aria-label="Permalink to “Criticism of Patterns”">​</a></h2><ul><li><p>Kludges for a weak programming language: <a href="http://www.paulgraham.com/icad.html" target="_blank" rel="noreferrer">Revenge of the Nerds</a></p><ul><li><p><a href="http://wiki.c2.com/?AreDesignPatternsMissingLanguageFeatures" target="_blank" rel="noreferrer">Are Design Patterns Missing Language Features</a></p></li><li><p>For example, the <a href="#strategy-pattern">Strategy pattern</a> can be implemented with a simple anonymous (lambda) function in most modern programming languages</p></li></ul></li><li><p>Leads to inefficient solutions</p></li><li><p>Unjustified use:</p><blockquote><p>If all you have is a hammer, everything looks like a nail.</p></blockquote></li></ul><h2 id="elements-of-a-pattern" tabindex="-1">Elements of a Pattern <a class="header-anchor" href="#elements-of-a-pattern" aria-label="Permalink to “Elements of a Pattern”">​</a></h2><ul><li><strong>Pattern Name</strong>: A meaningful name that describes the pattern</li><li><strong>Problem</strong>: Describes the problem and its context</li><li><strong>Solution</strong>: Describes the elements that make up the design, their relationships, responsibilities, and collaborations</li><li><strong>Consequences</strong>: Describes the results and trade-offs of applying the pattern</li></ul><h2 id="classification-of-patterns" tabindex="-1">Classification of Patterns <a class="header-anchor" href="#classification-of-patterns" aria-label="Permalink to “Classification of Patterns”">​</a></h2><p>All patterns can be categorized by their <strong>purpose</strong> or <em>know how</em>:</p><ol><li><p><a href="#creational-patterns">Creational Patterns</a>: Deal with object creation mechanisms, trying to create objects in a manner suitable to the situation</p></li><li><p><a href="#structural-patterns">Structural Patterns</a>: Deal with object composition, and typically identify simple ways to realize relationships between different objects</p></li><li><p><a href="#behavioural-patterns">Behavioural Patterns</a>: Deal with object communication, how objects interact with each other and how to assign responsibilities between them</p></li></ol><p>These pattern can also be divided based on their <strong>scope</strong>:</p><ul><li><p>Class:</p><ul><li>Deal with relationships between classes and their subclasses</li><li>These relationships are established through inheritance</li><li>So they are static, fixed at compile-time</li></ul></li><li><p>Object:</p><ul><li>Deal with object relationships</li><li>Which can be changed at run-time and are more dynamic</li></ul></li></ul><p>The most <strong>basic and low-level patterns</strong> are often called <strong>idioms</strong>. They usually apply only to a single programming language</p><p>The most <strong>universal and high-level patterns</strong> are <strong>architectural patterns</strong>. Developers can implement these patterns in virtually any language. Unlike other patterns, they can be used to design the architecture of an entire application</p><p><img src="/assets/design-pattern-relationships.Db6J23r7.jpg" alt="Design Pattern Relationships"></p><h3 id="other-types-of-patterns" tabindex="-1">Other Types of Patterns <a class="header-anchor" href="#other-types-of-patterns" aria-label="Permalink to “Other Types of Patterns”">​</a></h3><ul><li><p>Concurrency design patterns: When you are dealing with multi threading programming these are the patterns that you will want to use</p></li><li><p>Architectural design patterns: Design patterns that are used on the system&#39;s architecture, like MVC or MVVM</p></li></ul><h2 id="creational-patterns" tabindex="-1">Creational Patterns <a class="header-anchor" href="#creational-patterns" aria-label="Permalink to “Creational Patterns”">​</a></h2><p>Creational patterns provide <strong>object creation mechanisms</strong> that increase flexibility and reuse of existing code: <strong>How objects are created</strong></p><ul><li>When the regular object creation manner would cause more complexity or bring problems to the code</li></ul><p>Patterns:</p><ol><li><p><a href="#abstract-factory">Abstract Factory</a>: Creates an instance of several families of classes</p></li><li><p><a href="#builder-pattern">Builder</a>: Separates object construction from its representation</p></li><li><p><a href="#factory-method">Factory Method</a>: Creates an instance of several derived classes</p></li><li><p><a href="#prototype-pattern">Prototype</a>: A fully initialized instance to be copied or cloned</p></li><li><p><a href="#singleton-pattern">Singleton</a>: A class of which only a single instance can exist</p></li></ol><h3 id="abstract-factory" tabindex="-1">Abstract Factory <a class="header-anchor" href="#abstract-factory" aria-label="Permalink to “Abstract Factory”">​</a></h3><table tabindex="0"><thead><tr><th>Popularity</th><th>Complexity</th><th>Scope</th><th>AKA</th></tr></thead><tbody><tr><td>Important</td><td>2</td><td>Object</td><td>Kit</td></tr></tbody></table><p><em>Intent:</em> Provide an interface for creating families of related or dependent objects without specifying their concrete classes</p><ul><li>Groups object factories that have a common theme</li></ul><h3 id="builder-pattern" tabindex="-1">Builder Pattern <a class="header-anchor" href="#builder-pattern" aria-label="Permalink to “Builder Pattern”">​</a></h3><table tabindex="0"><thead><tr><th>Popularity</th><th>Complexity</th><th>Scope</th></tr></thead><tbody><tr><td>Common</td><td>2</td><td>Object</td></tr></tbody></table><p><em>Intent:</em> Separate the construction of a complex object from its representation so that the same construction process can create different representations</p><p><em>Example:</em></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> HotDog</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">bun</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> ketchup</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> mustard</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> kraut</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">bun</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> bun</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">ketchup</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> ketchup</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">mustard</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> mustard</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">kraut</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> kraut</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// passing parameters to constructor becomes</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// problematic if there are many</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> snack</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> HotDog</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">wheat</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// add properties to object</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// via methods</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> HotDog</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">bun</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">bun</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> bun</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  addKetchup</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">ketchup</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  addMustard</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">mustard</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  addKraut</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">kraut</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> snack</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> HotDog</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">wheat</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// method chaining</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">snack</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">addKetchup</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">addKraut</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">snack</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // { bun: &#39;wheat&#39;, ketchup: true, kraut: true }</span></span></code></pre></div><p><em>Usage</em>:</p><ul><li>May be very useful while writing Unit Tests</li></ul><h3 id="factory-method" tabindex="-1">Factory Method <a class="header-anchor" href="#factory-method" aria-label="Permalink to “Factory Method”">​</a></h3><table tabindex="0"><thead><tr><th>Popularity</th><th>Complexity</th><th>Scope</th><th>AKA</th></tr></thead><tbody><tr><td>Important</td><td>2</td><td>Class</td><td>Virtual Constructor</td></tr></tbody></table><p><em>Intent:</em> The Factory Method pattern defines an interface for creating objects, but lets subclasses decide which class to instantiate</p><ul><li>Factory Method lets a class defer instantiation to subclasses</li></ul><p><em>Applicability:</em></p><ul><li><p>Use the Factory Method when you don&#39;t know beforehand the exact types and dependencies of the objects your code should work with</p></li><li><p>Use the Factory Method when you want to provide users of your library or framework with a way to extend its internal components</p></li></ul><h4 id="simple-factory-design" tabindex="-1">Simple Factory Design <a class="header-anchor" href="#simple-factory-design" aria-label="Permalink to “Simple Factory Design”">​</a></h4><p>In <em>Simple Factory Design</em> pattern, a <strong>client</strong> asks for an object without knowing where the object is coming from (that is, which class is used to generate it)</p><p><em>Example:</em></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IOSButton</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> AndroidButton</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// without factory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> button1</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> os</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">ios</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ?</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> IOSButton</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> :</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> AndroidButton</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> button2</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> os</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">ios</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ?</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> IOSButton</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> :</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> AndroidButton</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ButtonFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  createButton</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">os</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">os</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">ios</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      return</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> IOSButton</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> AndroidButton</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// with factory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> factory</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> ButtonFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> btn1</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> factory</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createButton</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">os</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> btn2</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> factory</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createButton</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">os</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><p><em>Usage:</em></p><ul><li><p>Consider we want to read data from a <em>json</em> or <em>XML</em> file as per the needs</p></li><li><p>The below two classes are used to read data from these files:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> JSONDataExtractor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> filepath</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">data </span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;"> dict</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        with</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;"> open</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">filepath</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">utf-8</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">            self</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">data </span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> json</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#666666;">        @</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">property</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">        def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> parsed_data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">data</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> xml</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">etree</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">ElementTree </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> etree</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> XMLDataExtractor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> filepath</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">tree </span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> etree</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">filepath</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#666666;">        @</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">property</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">        def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> parsed_data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">tree</span></span></code></pre></div></li><li><p>Now, write a factory method that returns an instance of <em>JSONDataExtractor</em> or <em>XMLDataExtractor</em> depending on the extension of the file:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> data_extraction_factory</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">filepath</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> filepath</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">endswith</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">json</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">        extractor </span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> JSONDataExtractor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    elif</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> filepath</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">endswith</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">xml</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">        extractor </span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> XMLDataExtractor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        raise</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;"> ValueError</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Cannot extract the data from </span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;"> format</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">filepath</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> extractor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">filepath</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span></code></pre></div></li><li><p>A wrapper function can be added to handle exceptions:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> extract_data_from</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">filepath</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">    factory_obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> None</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">        factory_obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> data_extraction_factory</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">filepath</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    except</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;"> ValueError</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> factory_obj</span></span></code></pre></div></li><li><p>This can be used in any function to read data from either <em>json</em> or <em>XML</em> file</p></li></ul><h3 id="prototype-pattern" tabindex="-1">Prototype Pattern <a class="header-anchor" href="#prototype-pattern" aria-label="Permalink to “Prototype Pattern”">​</a></h3><table tabindex="0"><thead><tr><th>Popularity</th><th>Complexity</th><th>Scope</th></tr></thead><tbody><tr><td>Not Common</td><td>1</td><td>Object</td></tr></tbody></table><p><em>Intent:</em> Lets you copy existing objects without making your code dependent on their classes</p><p>We can create objects that will be used as prototypes for other objects to be created</p><ul><li><p>Inheritance by prototypes ends up bringing a improvement in performance as well, because both objects have a reference to the same method that is implemented on the prototype, instead of being implemented on each one of them.</p></li><li><p>It enables us to extent the prototype with new functions that are immediately available to all the objects. <strong>This is not a best practice</strong></p></li></ul><p><em>Example:</em></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// constructor function</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Zombie</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ||</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Zombie</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">reAnimated</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">eatBrain</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> \`</span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> is hungry for 🧠</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Zombie</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">canRun</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> !==</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Zombie</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Zombie</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">🧟‍♂️ Jeff</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> genericZombie</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Zombie</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// { name: &#39;🧟‍♂️ Jeff&#39;, reAnimated: 1664717547330, eatBrain: () }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">getPrototypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// { canRun: () }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">eatBrain</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 🧟‍♂️ Jeff is hungry for 🧠</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">genericZombie</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">eatBrain</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Zombie is hungry for 🧠</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">canRun</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">genericZombie</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">canRun</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">eatBrain</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">I am Vegan</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Zombie</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">canRun</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Error</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">eatBrain</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// I am Vegan</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">genericZombie</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">eatBrain</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Zombie is hungry for 🧠</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">canRun</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Error</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">genericZombie</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">canRun</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Error</span></span></code></pre></div><h3 id="singleton-pattern" tabindex="-1">Singleton Pattern <a class="header-anchor" href="#singleton-pattern" aria-label="Permalink to “Singleton Pattern”">​</a></h3><table tabindex="0"><thead><tr><th>Popularity</th><th>Complexity</th><th>Scope</th></tr></thead><tbody><tr><td>Important</td><td>1</td><td>Object</td></tr></tbody></table><p><em>Intent:</em> Ensure a class only has one instance, and provide a global point of access to it</p><ul><li>Global point of access instead of encapsulation</li><li>Hard to debug</li></ul><p><em>Example:</em></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> configurationSingleton</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // private value of the singleton initialized only once</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> config</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> initializeConfiguration</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">randomNumber</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Math</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    values</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> values</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {};</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> values</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">number</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ||</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">size</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> values</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">size</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ||</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // We export the centralized method to return</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // the singleton&#39;s value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    getConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">      // initialize the singleton only once</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">config</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        config</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> initializeConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">      // and always return the same value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> config</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">})();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> configObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> configurationSingleton</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">getConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// prints number: 5, size: 8, randomNumber: someRandomDecimalValue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">configObject</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> configObject1</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> configurationSingleton</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">getConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// prints number: 5, size: 8, randomNumber: same randomDecimalValue</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // como no primeiro config</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">configObject1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><ul><li>In JavaScript Singleton can basically be achieved by using object literals:</li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// app settings</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Settings</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  static</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Settings</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> readonly</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">dark</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // prevent new with private constructor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  private</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Settings</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Settings</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">instance</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      Settings</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Settings</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Settings</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">instance</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> settings</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> Settings</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// same behaviour can be achieved using object literal</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> settings</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">  dark</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span></code></pre></div><ul><li>Meyer&#39;s Singleton</li></ul><h2 id="structural-patterns" tabindex="-1">Structural Patterns <a class="header-anchor" href="#structural-patterns" aria-label="Permalink to “Structural Patterns”">​</a></h2><p>Structural patterns explain how to assemble objects and classes into larger structures, while keeping these structures flexible and efficient: <strong>How objects relate to each other</strong></p><ul><li>They guarantee that if a system&#39;s part change, nothing else has to change with it</li></ul><p>Design Patterns:</p><ol><li><p><a href="#adapter-pattern">Adapter</a>: Match interfaces of different classes</p></li><li><p><a href="#bridge-pattern">Bridge</a>: Separates an object&#39;s interface from its implementation</p></li><li><p><a href="#composite-pattern">Composite</a>: A tree structure of simple and composite objects</p></li><li><p><a href="#decorator-wrapper-pattern">Decorator (Wrapper)</a>: Add responsibilities to objects dynamically</p></li><li><p><a href="#facade-pattern">Facade</a>: A single class that represents an entire subsystem (Simplified API)</p></li><li><p><a href="#flyweight-pattern">Flyweight</a>: A fine-grained instance used for efficient sharing</p></li><li><p><a href="#proxy-pattern">Proxy</a>: An object representing another object (Substitution)</p></li></ol><h3 id="adapter-pattern" tabindex="-1">Adapter Pattern <a class="header-anchor" href="#adapter-pattern" aria-label="Permalink to “Adapter Pattern”">​</a></h3><table tabindex="0"><thead><tr><th>Popularity</th><th>Complexity</th><th>Scope</th></tr></thead><tbody><tr><td>Important</td><td>1</td><td>Class &amp; Object</td></tr></tbody></table><p>This pattern converts the interface of a class into another interface that clients expect. It allows classes to work together that couldn&#39;t otherwise because of incompatible interfaces</p><p>The Adapter Design Pattern, also known as the <em>Wrapper</em>, allows two classes to work together that otherwise would have incompatible interfaces</p><p><em>Intent:</em> Adapter is a structural design pattern that allows objects with incompatible interfaces to collaborate</p><ul><li>You can create an <em>adapter</em>. This is a special object that converts the interface of one object so that another object can understand it</li></ul><p><em>Applicability:</em></p><ul><li>Use the Adapter class when you want to use some existing class, but its interface isn&#39;t compatible with the rest of your code</li></ul><h3 id="bridge-pattern" tabindex="-1">Bridge Pattern <a class="header-anchor" href="#bridge-pattern" aria-label="Permalink to “Bridge Pattern”">​</a></h3><table tabindex="0"><thead><tr><th>Popularity</th><th>Complexity</th><th>Scope</th></tr></thead><tbody><tr><td>Rare</td><td>3</td><td>Object</td></tr></tbody></table><h3 id="composite-pattern" tabindex="-1">Composite Pattern <a class="header-anchor" href="#composite-pattern" aria-label="Permalink to “Composite Pattern”">​</a></h3><table tabindex="0"><thead><tr><th>Popularity</th><th>Complexity</th><th>Scope</th></tr></thead><tbody><tr><td>Important</td><td>2</td><td>Object</td></tr></tbody></table><h3 id="decorator-pattern" tabindex="-1">Decorator Pattern <a class="header-anchor" href="#decorator-pattern" aria-label="Permalink to “Decorator Pattern”">​</a></h3><table tabindex="0"><thead><tr><th>Popularity</th><th>Complexity</th><th>Scope</th><th>AKA</th></tr></thead><tbody><tr><td>Important</td><td>2</td><td>Object</td><td>Wrapper</td></tr></tbody></table><p>This pattern attaches additional responsibilities to an object dynamically. Decorators provide a flexible alternative to sub-classing for extending functionality</p><p><em>Intent:</em> Decorator is a structural design pattern that lets you attach new behaviours to objects by placing these objects inside special wrapper objects that contain the behaviours</p><p><em>Applicability:</em></p><ul><li><p>Use the Decorator pattern when you need to be able to assign extra behaviours to objects at runtime without breaking the code that uses these objects</p></li><li><p>Use the pattern when it&#39;s awkward or not possible to extend an object&#39;s behaviour using inheritance</p></li></ul><h3 id="facade-pattern" tabindex="-1">Facade Pattern <a class="header-anchor" href="#facade-pattern" aria-label="Permalink to “Facade Pattern”">​</a></h3><table tabindex="0"><thead><tr><th>Popularity</th><th>Complexity</th><th>Scope</th></tr></thead><tbody><tr><td>Important</td><td>1</td><td>Object</td></tr></tbody></table><p>The facade design pattern is used when we want to create an abstraction layer between what is show publicly and the internal implementation. It is used when we want to have a simpler interface.</p><p>This pattern is used, for example, on the DOM selectors of libraries as JQuery, Dojo and D3. These frameworks have powerful selectors that allow us to write complex queries on a very simple way. Something like jQuery(&quot;.parent .child div.span&quot;) seems simple, but it hides a complex query logic underneath.</p><p>Here again, every time we create an abstraction layer above the code, we might end up having a loss of performance. Mostly this loss is irrelevant, but is always good to be considered.</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// facade is just simplified API</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> PlumbingSystem</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // low level access to plumbing system</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  setPressure</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  turnOn</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  turnOff</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> ElectricalSystem</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // low level access to electrical system</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  setVoltage</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  turnOn</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  turnOff</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// create</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> House</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // private</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">plumbing</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> PlumbingSystem</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">electrical</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> ElectricalSystem</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  turnOnSystems</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">electrical</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">setVoltage</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">electrical</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">turnOn</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">plumbing</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">setPressure</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">plumbing</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">turnOn</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  shutDown</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">electrical</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">turnOff</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">plumbing</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">turnOff</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> client</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> House</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">client</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">turnOnSystems</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span></code></pre></div><h3 id="flyweight-pattern" tabindex="-1">Flyweight Pattern <a class="header-anchor" href="#flyweight-pattern" aria-label="Permalink to “Flyweight Pattern”">​</a></h3><table tabindex="0"><thead><tr><th>Popularity</th><th>Complexity</th><th>Scope</th></tr></thead><tbody><tr><td></td><td></td><td>Object</td></tr></tbody></table><h3 id="proxy-pattern" tabindex="-1">Proxy Pattern <a class="header-anchor" href="#proxy-pattern" aria-label="Permalink to “Proxy Pattern”">​</a></h3><table tabindex="0"><thead><tr><th>Popularity</th><th>Complexity</th><th>Scope</th></tr></thead><tbody><tr><td>Important</td><td>2</td><td>Object</td></tr></tbody></table><h2 id="behavioural-patterns" tabindex="-1">Behavioural Patterns <a class="header-anchor" href="#behavioural-patterns" aria-label="Permalink to “Behavioural Patterns”">​</a></h2><p>Behavioural patterns take care of effective communication and the assignment of responsibilities between objects: <strong>How objects communicate with each other</strong></p><ul><li>They help to guarantee that unrelated parts of the application have a synchronized information</li><li>These patterns address communication, responsibility, and algorithmic issues in object-oriented software design</li><li>They help in making the design more flexible, extensible, and maintainable by promoting better communication and separation of concerns between objects and classes in the system</li></ul><p>Design Patterns:</p><ol><li><p><a href="#chain-of-responsibility">Chain of Responsibility</a>: A way of passing a request between a chain of objects</p></li><li><p><a href="#command-pattern">Command</a>: Encapsulate a command request as an object</p></li><li><p><a href="#interpreter-pattern">Interpreter</a>: A way to include language elements in a program</p></li><li><p><a href="#iterator-pattern">Iterator</a>: Sequentially access the elements of a collection</p></li><li><p><a href="#mediator-pattern">Mediator</a>: Defines simplified communication between classes</p></li><li><p><a href="#memento-pattern">Memento</a>: Capture and restore an object&#39;s internal state</p></li><li><p><a href="#observer-pattern">Observer</a>: A way of notifying change to a number of classes</p></li><li><p><a href="#state-pattern">State</a>: Alter an object&#39;s behaviour when its state changes</p></li><li><p><a href="#strategy-pattern">Strategy</a>: Encapsulates an algorithm inside a class</p></li><li><p><a href="#template-method-pattern">Template Method</a>: Defer the exact steps of an algorithm to a subclass</p></li><li><p><a href="#visitor-pattern">Visitor</a>: Defines a new operation to a class without change</p></li></ol><h3 id="chain-of-responsibility" tabindex="-1">Chain of Responsibility <a class="header-anchor" href="#chain-of-responsibility" aria-label="Permalink to “Chain of Responsibility”">​</a></h3><table tabindex="0"><thead><tr><th>Popularity</th><th>Complexity</th><th>Scope</th></tr></thead><tbody><tr><td></td><td></td><td>Object</td></tr></tbody></table><h3 id="command-pattern" tabindex="-1">Command Pattern <a class="header-anchor" href="#command-pattern" aria-label="Permalink to “Command Pattern”">​</a></h3><table tabindex="0"><thead><tr><th>Popularity</th><th>Complexity</th><th>Scope</th><th>AKA</th></tr></thead><tbody><tr><td>3</td><td>1</td><td>Object</td><td>Action</td></tr></tbody></table><p>Command is behavioural design pattern that converts requests or simple operations into objects</p><p>Encapsulate a call as an object</p><ul><li>It is a way to keep <strong>separated the caller&#39;s context from the called</strong></li><li>An abstraction layer to separate the objects that call the API from the objects that determine when to call it</li></ul><p>It encapsulates a request as an object, allowing you to parametrize clients with queues, requests, and operations</p><ul><li>It enables you to decouple the sender from the receiver, providing flexibility in the execution of commands and supporting undoable operations</li></ul><p>Cons:</p><p>A problem that arises with this pattern is that it <strong>creates an additional abstraction layer</strong>, and it may <strong>impact the performance</strong> of an app. It is important to know how to balance performance and code legibility.</p><p><em>Example:</em> Let us consider a simple <code>Ligth</code> class that has two methods: <code>TurnOn</code> and <code>TurnOff</code>. To control the light, we can create a <code>RemoteControl</code> class that has a <code>PressButton</code> method that receives a command to on or off the light</p><ul><li>The <code>RemoteControl</code> class is tightly coupled with the <code>Light</code> class, and if we want to add a new command like <code>Dim</code> the light, we would have to change the <code>RemoteControl</code> class</li></ul><p>To solve this problem, we can create a <code>Command</code> interface that has an <code>Execute</code> method. We can then create a <code>TurnOnCommand</code> and <code>TurnOffCommand</code> classes that implement the <code>Command</code> interface</p><ul><li>The <code>RemoteControl</code> class can then receive a <code>Command</code> object and call the <code>Execute</code> method</li><li>This way, we can add new commands without changing the <code>RemoteControl</code> class</li></ul><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>+------------------------+                  +--------------------------------+</span></span>
<span class="line"><span>| RemoteControl          |                  | Command                        |</span></span>
<span class="line"><span>+------------------------+                  +--------------------------------+</span></span>
<span class="line"><span>| PressButton()          | &lt;&gt;-------------&gt; | execute()                      |</span></span>
<span class="line"><span>+------------------------+                  +--------------------------------+</span></span>
<span class="line"><span>                                                             |</span></span>
<span class="line"><span>                                                             |</span></span>
<span class="line"><span>                                              +----------------------------+</span></span>
<span class="line"><span>                                              |                            |</span></span>
<span class="line"><span>                                              |                            |</span></span>
<span class="line"><span>                                              V                            V</span></span>
<span class="line"><span>+----------------+                    +----------------+           +----------------+</span></span>
<span class="line"><span>| Light          |                    | TurnOnCommand  |           | TurnOffCommand |</span></span>
<span class="line"><span>+----------------+                    +----------------+           +----------------+</span></span>
<span class="line"><span>| TurnOnCommand  |                    | execute()      |           | execute()      |</span></span>
<span class="line"><span>| TurnOffCommand |                    +----------------+           +----------------+</span></span>
<span class="line"><span>+----------------+                            |                            |</span></span>
<span class="line"><span>        ^                                     |                            |</span></span>
<span class="line"><span>        |                                     |                            |</span></span>
<span class="line"><span>        +-------------------------------------+----------------------------+</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// The object that knows how to execute the command</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> invoker</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  subtract</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// the object to be used as abstraction layer when</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// we execute commands; it represents a interface</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// to the caller object</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> manager</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  execute</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> invoker</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> invoker</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">invoker</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [].</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// prints 8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">manager</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">add</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// prints 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">manager</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">subtract</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span></code></pre></div><h3 id="interpreter-pattern" tabindex="-1">Interpreter Pattern <a class="header-anchor" href="#interpreter-pattern" aria-label="Permalink to “Interpreter Pattern”">​</a></h3><table tabindex="0"><thead><tr><th>Popularity</th><th>Complexity</th><th>Scope</th></tr></thead><tbody><tr><td></td><td></td><td>Class</td></tr></tbody></table><h3 id="iterator-pattern" tabindex="-1">Iterator Pattern <a class="header-anchor" href="#iterator-pattern" aria-label="Permalink to “Iterator Pattern”">​</a></h3><table tabindex="0"><thead><tr><th>Popularity</th><th>Complexity</th><th>Scope</th></tr></thead><tbody><tr><td>3</td><td>2</td><td>Object</td></tr></tbody></table><p>This pattern provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation</p><ul><li>It provides a way of iterating over an object without having to expose the object&#39;s internal structure, which may change in the future</li><li>Changing the internals of an object should not effect its consumers</li></ul><p><em>Intent:</em> Iterator is a behavioural design pattern that lets you traverse elements of a collection without exposing its underlying representation (<em>list</em>, <em>stack</em>, <em>tree</em>, etc.)</p><ul><li>Iterate pattern allows to traverse through a collection of object</li></ul><p><em>Applicability:</em></p><ul><li><p>Use the Iterator pattern when your collection has a complex data structure under the hood, but you want to hide its complexity from clients (either for convenience or security reasons)</p></li><li><p>Use the pattern to reduce duplication of the traversal code across your app</p></li></ul><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>+------------------------+                  +--------------------------------+</span></span>
<span class="line"><span>| Aggregate              |                  | Iterator                       |</span></span>
<span class="line"><span>+------------------------+                  +--------------------------------+</span></span>
<span class="line"><span>| createIterator()       | &lt;&gt;------------&gt;  | next()                         |</span></span>
<span class="line"><span>+------------------------+                  | currentItem()                  |</span></span>
<span class="line"><span>                                            | hasNext()                      |</span></span>
<span class="line"><span>                                            +--------------------------------+</span></span></code></pre></div><p>The Iterator pattern defines an interface for accessing the elements of a collection. The Iterator object keeps track of the current element and can compute the next element in the collection</p><ul><li>The 3 new methods help consumers to iterate over the object, without knowing the internal data structure</li><li>The <code>next()</code> method returns the next element in the collection</li><li>The <code>currentItem()</code> method returns the current element in the collection</li><li>The <code>hasNext()</code> method returns <code>true</code> if there are more elements in the collection</li></ul><p>The <code>Aggregate</code> class is the object that holds the collection of elements. It has a method called <code>createIterator()</code> that returns an instance of the <code>Iterator</code> class</p><ul><li>This complies with the <em>Single Responsibility Principle</em> (SRP) as the <code>Aggregate</code> class is responsible for managing the collection of elements, while the <code>Iterator</code> class is responsible for traversing the collection</li></ul><p><em>Example:</em></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> end</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> step</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    [</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">iterator</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    next</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">start</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> end</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        start</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> start</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> step</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> start</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> done</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> end</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> done</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> num</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> of</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">))</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +=</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> num</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><p>Some languages provide built-in iterators:</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> animals</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  a</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">describe</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> el </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 7</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> val</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> aggregate</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="mediator-pattern" tabindex="-1">Mediator Pattern <a class="header-anchor" href="#mediator-pattern" aria-label="Permalink to “Mediator Pattern”">​</a></h3><table tabindex="0"><thead><tr><th>Popularity</th><th>Complexity</th><th>Scope</th></tr></thead><tbody><tr><td></td><td></td><td>Object</td></tr></tbody></table><ul><li><p>Used a lot on decoupled system</p></li><li><p>When we have different parts of a system that need to communicate on a coordinated manner, a mediator can be the best option</p></li><li><p>It can have <strong>many-to-many relationship</strong></p></li><li><p>Middlewares</p></li></ul><p><em>Example:</em></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Airplane</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  land</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Runway</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">clear</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Tower</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  clearForLanding</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">runway</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> plane</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">runway</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Plane </span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">plane</span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> is clear for landing</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> runway25A</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Runway</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> runway25B</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Runway</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> runway101</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Runway</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> air567</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Airplane</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> air007</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Airplane</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> air69</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Airplane</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span></code></pre></div><h3 id="memento-pattern" tabindex="-1">Memento Pattern <a class="header-anchor" href="#memento-pattern" aria-label="Permalink to “Memento Pattern”">​</a></h3><p>Without violating encapsulation, capture and externalize an object&#39;s internal state so that the object can be restored to this state later</p><table tabindex="0"><thead><tr><th>Popularity</th><th>Complexity</th><th>Scope</th><th>AKA</th></tr></thead><tbody><tr><td>1</td><td>3</td><td>Object</td><td>Snapshot</td></tr></tbody></table><p><em>Intent:</em> Memento is a behavioural design pattern that lets you <strong>save and restore</strong> the previous state of an object <strong>without revealing</strong> the details of its <strong>implementation</strong></p><p>It is used to <strong>restore state of an object to a previous state</strong></p><ul><li>It delegates <strong>creating the state</strong> snapshots to the actual <strong>owner of that state</strong></li><li>Hence, the <strong>original class</strong> can make the snapshots since it has full access to its own state</li><li>This pattern makes <strong>full copies</strong> of an object&#39;s state, which can be <strong>expensive</strong> in terms of memory</li></ul><p>The Memento design pattern defines three distinct roles:</p><ol><li><p><strong>Originator</strong>: the object that knows how to save itself</p><ul><li><strong>Produces snapshots</strong> of its own state, and <strong>restores its state</strong> from snapshots</li><li>Sets and Gets values from the currently targeted Memento. Creates new Mementos and assigns current values to them</li></ul></li><li><p><strong>Caretaker</strong>: the object that knows why and when the Originator needs to save and restore itself</p><ul><li>Responsible for <strong>capturing</strong> and <strong>restoring</strong> the Originator&#39;s state</li><li>Holds a list that contains all previous versions of the Memento. It can store and retrieve Mementos</li></ul></li><li><p><strong>Memento</strong>: the lock box that is written and read by the Originator, and shepherded by the Caretaker</p><ul><li>Acts as a <strong>snapshot</strong> of the Originator&#39;s state</li><li>The basic object that is stored in different states</li></ul></li></ol><p><em>Motivation:</em></p><p><em>Applicability</em>:</p><ul><li><p>Use the Memento pattern when you want to produce snapshots of the object&#39;s state to be able to restore a previous state of the object</p></li><li><p>Consider a text editor that has an undo feature. The editor can save the state of the text editor at any point in time and restore it later. Undo feature is an example of the memento pattern</p></li><li><p>Use the pattern when direct access to the object&#39;s fields/getters/setters violates its encapsulation</p></li></ul><p><em>Structure:</em></p><p><em>Participants:</em></p><p><em>Collaborations:</em></p><p><em>Consequences:</em></p><ul><li><p>Pros:</p><ul><li>You can produce snapshots of the object&#39;s state without violating its encapsulation</li><li>You can simplify the originator&#39;s code by letting the caretaker maintain the history of the originator&#39;s state</li></ul></li><li><p>Cons:</p><ul><li>The app might <strong>consume lots of RAM</strong> if clients create mementos too often</li><li>Caretakers should track the originator&#39;s lifecycle to be able to destroy obsolete mementos</li><li>Most dynamic programming languages, such as JavaScript, Python, and Ruby, can implement the Memento pattern without the memento classes</li></ul></li></ul><p><em>Implementation:</em></p><p><em>Known Uses:</em></p><p><em>Related Patterns:</em></p><p><em>Example:</em> Consider the following user interactions with a text editor:</p><ol><li>Add a title to the document: &quot;The Memento Pattern&quot;</li><li>Add a paragraph: &quot;The memento pattern is...&quot;</li><li>Change the title to: &quot;The Behavioural Design Pattern&quot;</li></ol><p>To implement the undo feature, a single <code>Editor</code> class can be used to save the state of the document at each step. It can have a <code>title</code> and <code>content</code> properties and also fields that store each previous values for each of these properties</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>+------------------------+</span></span>
<span class="line"><span>| Editor                 |</span></span>
<span class="line"><span>+------------------------+</span></span>
<span class="line"><span>| title : string         |</span></span>
<span class="line"><span>| content : string       |</span></span>
<span class="line"><span>| previousTitle : List   |</span></span>
<span class="line"><span>| previousContent : List |</span></span>
<span class="line"><span>+------------------------+</span></span></code></pre></div><p>Problem with this approach:</p><ul><li>It is not scalable (if more properties are added to the <code>Editor</code> class, the number of fields to store previous values will increase)</li><li>How would we implement the undo feature?</li><li>If the user changed the title and then the content, then pressed undo, the current implementation has no knowledge of the order of changes</li></ul><p>Finding a solution:</p><ul><li>Instead of having multiple fields in the <code>Editor</code> class, we can create a <code>EditorState</code> class that stores the state of the <code>Editor</code> class at a given point in time</li></ul><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>+------------------------+                  +--------------------------------+</span></span>
<span class="line"><span>| Editor                 |                  | EditorState                    |</span></span>
<span class="line"><span>+------------------------+                  +--------------------------------+</span></span>
<span class="line"><span>| title : string         | &lt;*&gt;------------&gt; | title : string                 |</span></span>
<span class="line"><span>| content : string       |                  | content : string               |</span></span>
<span class="line"><span>| previousStates : List  |                  +--------------------------------+</span></span>
<span class="line"><span>+------------------------+</span></span></code></pre></div><ul><li>Composite relationship: <code>Editor</code> is composed of, or has a field of, the <code>EditorState</code> class</li></ul><p>This is a good solution as we can undo multiple times and we don&#39;t pollute the <code>Editor</code> class with many fields. However, this solution is violating the SRP, as the <code>Editor</code> class currently has multiple responsibilities:</p><ul><li>State management</li><li>Providing the features that we need from an editor</li></ul><p>We can move state management to a separate class, <code>History</code>, which will be responsible for managing the state of the <code>Editor</code> class</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>+------------------------+                  +--------------------------------+</span></span>
<span class="line"><span>| Editor                 |                  | EditorState                    |</span></span>
<span class="line"><span>+------------------------+                  +--------------------------------+</span></span>
<span class="line"><span>| title : string         | ---------------&gt; | title : string                 |</span></span>
<span class="line"><span>| content : string       |                  | content : string               |</span></span>
<span class="line"><span>+------------------------+                  +--------------------------------+</span></span>
<span class="line"><span>| createState()          |                          ^</span></span>
<span class="line"><span>| restore(state)         |                          |</span></span>
<span class="line"><span>+------------------------+                          |</span></span>
<span class="line"><span>                                                    |</span></span>
<span class="line"><span>                                                    ^</span></span>
<span class="line"><span>                                                    *</span></span>
<span class="line"><span>                                                    V</span></span>
<span class="line"><span>                                            +------------------------+</span></span>
<span class="line"><span>                                            | History                |</span></span>
<span class="line"><span>                                            +------------------------+</span></span>
<span class="line"><span>                                            | states : List          |</span></span>
<span class="line"><span>                                            | editor : Editor        |</span></span>
<span class="line"><span>                                            +------------------------+</span></span>
<span class="line"><span>                                            | push(state)            |</span></span>
<span class="line"><span>                                            | pop()                  |</span></span>
<span class="line"><span>                                            +------------------------+</span></span></code></pre></div><ul><li>The <code>createState()</code> method returns an <code>EditorState</code> object, hence the dotted line arrow (dependency relationship). <code>History</code> has a field with a list of <code>EditorState</code>, hence the diamond arrow (composition relationship)</li></ul><p>This is the Memento pattern in action:</p><ul><li>The <code>Editor</code> class is the <em>originator</em></li><li>The <code>EditorState</code> class is the <em>memento</em></li><li>The <code>History</code> class is the <em>caretaker</em></li></ul><h3 id="observer-pattern" tabindex="-1">Observer Pattern <a class="header-anchor" href="#observer-pattern" aria-label="Permalink to “Observer Pattern”">​</a></h3><table tabindex="0"><thead><tr><th>Popularity</th><th>Complexity</th><th>Scope</th></tr></thead><tbody><tr><td>Important</td><td>2</td><td>Object</td></tr></tbody></table><p>The <em>observer pattern</em> is very useful when we want to <strong>optimize the communication between separated parts of the system</strong></p><p><em>Intent:</em> Observer is a behavioural design pattern that lets you define a subscription mechanism to notify multiple objects about any events that happen to the object they&#39;re observing.</p><ul><li><p>This pattern exemplifies loose coupling</p></li><li><p>It promotes an integration of the parts <strong>without making then too coupled</strong></p><ul><li>Subjects and observers interact, but have little knowledge of each other</li></ul></li><li><p>It has <strong>one-to-many relationship</strong></p></li><li><p>This pattern defines a one-to-many dependency between objects so that <strong>when one object changes state, all of its dependents are notified and updated automatically</strong></p></li><li><p>Different ways to implement this pattern, but the <strong>simpler case</strong> is when we have <strong>1 emitter and lots of observers</strong></p></li></ul><p>One variant to this pattern is the <strong><a href="#publish-subscribe-pattern">publisher/subscriber pattern</a></strong></p><ul><li>Parts of Subject: <ul><li><code>registerObserver</code> or <code>subscribe</code></li><li><code>removeObserver</code> or <code>unsubscribe</code></li><li><code>notifyObserver</code> or <code>notifySubscribers</code></li></ul></li></ul><p><em>Applicability</em>:</p><ul><li><p>Use the Observer pattern when changes to the state of one object may require changing other objects, and the actual set of objects is unknown beforehand or changes dynamically</p></li><li><p>Use the pattern when some objects in your app must observe others, but only for a limited time or in specific cases</p></li></ul><p><em>Example:</em></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> publisherSubscriber</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// We pass an object to the container to manage subscriptions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">container</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // the id represents a subscription to the topic</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // the objects will subscribe to a topic by</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // sending a callback to be executed when</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // the event is fired</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  container</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">subscribe</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">topic</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">topic</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> container</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">))</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      container</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">topic</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    container</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">topic</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">      id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ++</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">      callback</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // Every subscription has it&#39;s own id, we will</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // use it to remove the subscription</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  container</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">unsubscribe</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">topic</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> subscribers</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> subscriber</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> container</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">topic</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">])</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">subscriber</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> !==</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        subscribers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">subscriber</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    container</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">topic</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> subscribers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  container</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">publish</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">topic</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> subscriber</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> container</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">topic</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">])</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">      // when we execute a callback it is always</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">      // good to read the documentation to know which</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">      // arguments are passed by the object firing</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">      // the event</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      subscriber</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">})(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">publisherSubscriber</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> subscriptionID1</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> publisherSubscriber</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">mouseClicked</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">mouseClicked, data: </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> subscriptionID2</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> publisherSubscriber</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">  &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">mouseHovered</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  function</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">mouseHovered, data: </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> subscriptionID3</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> publisherSubscriber</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">  &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">mouseClicked</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  function</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">second mouseClicked, data: </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// When we publish an event, all callbacks should</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// be called and you will see three logs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">publisherSubscriber</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">publish</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">mouseClicked</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">data1</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">publisherSubscriber</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">publish</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">mouseHovered</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">data2</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// We unsubscribe an event</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">publisherSubscriber</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">unsubscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">mouseClicked</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> subscriptionID3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// now we have 2 logs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">publisherSubscriber</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">publish</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">mouseClicked</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">data1</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">publisherSubscriber</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">publish</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">mouseHovered</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">data2</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> });</span></span></code></pre></div><h4 id="signals" tabindex="-1">Signals <a class="header-anchor" href="#signals" aria-label="Permalink to “Signals”">​</a></h4><p>Signals are a simple implementation of the observer pattern that can be used to create reactive state management systems. They allow you to create stateful values that can be observed and updated, triggering side effects when the state changes</p><ul><li>Signals at the core are an event system, where you have publishers and subscribers. The publisher is the signal, and the subscribers are the effects that are triggered when the signal changes</li><li>It utilizes the push-pull model, where the signal pushes updates to the subscribers, and the subscribers pull the current value of the signal when they are triggered. This allows for efficient and reactive state management</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> activeEffect</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> effect</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  //callback, dependencies) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  //  let cleanup;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  //  const runEffect = () =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // if (cleanup) cleanup();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // cleanup = callback();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  //  };</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  //</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  //  runEffect();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  //</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  //  return () =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // if (cleanup) cleanup();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  //  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  activeEffect</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  fn</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">signal</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">activeEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    signal</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">subscribers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">activeEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> signal</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">signal</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> newValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  signal</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> newValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  signal</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">subscribers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">effect</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> effect</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Example usage:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> countSignal</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> state</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">effect</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Count: </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">countSignal</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">countSignal</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">countSignal</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">},</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><p>Another simple implementation of signals:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> context</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> getCurrentObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> createSignla</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> subscribers</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> read</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> current</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> getCurrentObserver</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">current</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      subscribers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">activeEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> write</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">newValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    value</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> newValue</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    subscribers</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">subscriber</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> subscriber</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> write</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> createEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    context</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">wrappedEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">      fn</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> finally</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      context</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">pop</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  execute</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="state-pattern" tabindex="-1">State Pattern <a class="header-anchor" href="#state-pattern" aria-label="Permalink to “State Pattern”">​</a></h3><table tabindex="0"><thead><tr><th>Popularity</th><th>Complexity</th><th>Scope</th></tr></thead><tbody><tr><td>2</td><td>1</td><td>Object</td></tr></tbody></table><p><em>Intent:</em> State is a behavioural design pattern that lets an object alter its behaviour when its internal state changes. It appears as if the object changed its class</p><ul><li>The state pattern allows an object to behave differently depending on the state that it is in</li><li>The state pattern is a solution to the problem of how to make behaviour dependent on state</li><li>The state pattern suggests that you create a separate class for each possible state of an object and extract all state-specific behaviours into those classes</li></ul><p>Classes and objects participating in the pattern:</p><ul><li>The <em>context</em> is a class that has a field for storing a reference to one of the state objects</li><li>The <em>state</em> is an interface that defines a common method for all concrete states</li><li>The <em>concrete states</em> implement the state interface and provide their own implementations for the state-specific behaviours</li></ul><p>The State pattern is closely related to the concept of a <a href="./Finte_State_Machine.html">Finite-State Machine</a></p><p><em>Example:</em> When writing a blog post, the post can be in different states:</p><ol><li>Draft</li><li>Moderation (under review by an admin)</li><li>Published</li></ol><p>There are 3 types of users:</p><ol><li>Author</li><li>Admin</li><li>Reader</li></ol><p>Only the author can change the state of the post from draft to moderation, and only the admin can change the state from moderation to published</p><p>First, let&#39;s create a simple solution that uses <code>if-else</code> statements to check the current state of the document to see whether the state of the document should be changed and by whom</p><ul><li>This solution is not scalable and violates the Open/Closed principle as we need to modify the <code>Document</code> class every time we add a new state or a new user type</li></ul><p>The state pattern suggests that we should create a separate class for each state of the <code>Document</code> object, and extract all state-specific behaviours into those classes</p><ul><li>The <code>Document</code> class will store a reference to one of the state classes to represent the current state</li><li>Then, instead of <code>Document</code> implementing state-specific behaviour by itself, it delegates all the state-related work to the state object that has a reference to</li></ul><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>+------------------------+                  +--------------------------------+</span></span>
<span class="line"><span>| Document               |                  | State                          |</span></span>
<span class="line"><span>+------------------------+                  +--------------------------------+</span></span>
<span class="line"><span>| state:State            | &lt;&gt;-------------&gt; | publish()                      |</span></span>
<span class="line"><span>| currentUserRole:Roles  |                  +--------------------------------+</span></span>
<span class="line"><span>+------------------------+                          ^</span></span>
<span class="line"><span>| publish()              |                          |</span></span>
<span class="line"><span>+------------------------+                          |</span></span>
<span class="line"><span>                                                    |</span></span>
<span class="line"><span>                                            +------------------------+</span></span>
<span class="line"><span>                                            | DraftState             |</span></span>
<span class="line"><span>                                            +------------------------+</span></span>
<span class="line"><span>                                            | document               |</span></span>
<span class="line"><span>                                            +------------------------+</span></span>
<span class="line"><span>                                            | publish()              |</span></span>
<span class="line"><span>                                            +------------------------+</span></span></code></pre></div><ul><li><code>Document</code> keeps reference to (is composed of) a <code>State</code> object (using polymorphism)</li><li>In <code>Document</code>, the <code>publish()</code> method calls the <code>publish()</code> method of the <code>State</code> object - delegates the work to the concrete state object</li><li>This satisfies the Open/Closed principle as we can add new states without modifying the <code>Document</code> class</li></ul><h3 id="strategy-pattern" tabindex="-1">Strategy Pattern <a class="header-anchor" href="#strategy-pattern" aria-label="Permalink to “Strategy Pattern”">​</a></h3><table tabindex="0"><thead><tr><th>Popularity</th><th>Complexity</th><th>Scope</th></tr></thead><tbody><tr><td>3</td><td>1</td><td>Object</td></tr></tbody></table><p>This pattern defines a family of algorithms, encapsulates each one, and makes them interchangeable. This lets the algorithm vary independently from clients that use it</p><p><em>Intent:</em> Strategy is a behavioural design pattern that lets you define a family of algorithms, put each of them into a separate class, and make their objects interchangeable</p><ul><li>The Strategy pattern is used to pass different algorithms, or behaviours, to an object</li></ul><p>The Strategy pattern suggests that you take <strong>a class that does something specific in a lot of different ways</strong> and extract all of these algorithms into <strong>separate classes called <em>strategies</em></strong></p><ul><li>The original class, called <em>context</em>, must have <strong>a field for storing a reference to one of the strategies</strong>. The context delegates the work to a linked strategy object instead of executing it on its own</li></ul><p><em>Applicability:</em></p><ul><li>Use the Strategy pattern when you want to use different variants of an algorithm within an object and be able to switch from one algorithm to another during runtime</li></ul><p><em>Example:</em> Lets consider an application that stores videos. Before storing a video, the video needs to be compressed using a specific compression algorithm, such as <code>MOV</code> or <code>MP4</code>. Then, if necessary, apply an overlay to the video, such as black and white or blur. Create a <code>VideoStorage</code> class that can store videos using different compression and overlay algorithms</p><ul><li>When a new compression or overlay algorithm is added, the <code>VideoStorage</code> class should be modified to support the new algorithm. This violates the Open/Closed principle</li><li>The Strategy pattern suggests that we should extract the compression and overlay algorithms into separate classes and pass them to the <code>VideoStorage</code> class</li><li>When we create a <code>VideoStorage</code> object, we pass it the concrete compressor and overlay objects that we want it to use</li><li>This is polymorphism in action: <code>VideoStorage</code> can accept many different forms of compressor and overlay objects</li></ul><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>+------------------------+                  +--------------------------------+</span></span>
<span class="line"><span>| VideoStorage           |                  | CompressionStrategy            |</span></span>
<span class="line"><span>+------------------------+                  +--------------------------------+</span></span>
<span class="line"><span>| compressionStrategy    | &lt;*&gt;------------&gt; | compress()                     |</span></span>
<span class="line"><span>| overlayStrategy        |                  +--------------------------------+</span></span>
<span class="line"><span>+------------------------+                          ^                ^</span></span>
<span class="line"><span>| store()                |                          |                |</span></span>
<span class="line"><span>+------------------------+                          |                |</span></span>
<span class="line"><span>                                                    |                |</span></span>
<span class="line"><span>                                            +------------+    +------------+</span></span>
<span class="line"><span>                                            | MP4        |    | MOV        |</span></span>
<span class="line"><span>                                            +------------+    +------------+</span></span>
<span class="line"><span>                                            | compress() |    | compress() |</span></span>
<span class="line"><span>                                            +------------+    +------------+</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- Same for overlay strategy</span></span></code></pre></div><ul><li>The <code>VideoStorage</code> class is known as the <em>context</em> class</li><li>The <code>CompressionStrategy</code> class is known as the <em>strategy</em> interface</li></ul><p>Other examples:</p><ul><li>Ducks</li><li>Algorithms used to show a route in map for different mode of transport differ</li></ul><p><a href="#state-pattern">State Pattern</a> vs. Strategy Pattern:</p><ul><li><p>The two patterns are similar in practice, but they have different intents</p><ul><li>States store a reference to the context object that contains them, but strategies don&#39;t</li><li>States are allowed to replace themselves (i.e., to change the state of the context object to something else), but strategies don&#39;t</li><li>Strategies only handle a single, specific task, while states provide the underlying implementation for everything (or most things) that the context object does</li></ul></li><li><p>State can be considered as an extension of the Strategy pattern</p></li><li><p>Both are based on composition: they change the behaviour of the context by delegating some work to helper objects</p></li><li><p><em>Strategy</em> makes these objects completely independent and unaware of each other</p></li><li><p>However, <em>State</em> doesn&#39;t restrict dependencies between concrete states, letting them alter the state of the context at will</p></li></ul><p>Pros:</p><ul><li>Satisfies the Open/Closed principle</li><li>Eliminates conditional statements</li></ul><p>Cons:</p><ul><li>Clients must be aware of the differences between strategies to choose the right one</li><li>If you only have a couple of algorithms and they rarely change, there&#39;s no real reason to overcomplicate the program with new classes and interfaces</li></ul><h3 id="template-method-pattern" tabindex="-1">Template Method Pattern <a class="header-anchor" href="#template-method-pattern" aria-label="Permalink to “Template Method Pattern”">​</a></h3><table tabindex="0"><thead><tr><th>Popularity</th><th>Complexity</th><th>Scope</th></tr></thead><tbody><tr><td>Important</td><td>2</td><td>Class</td></tr></tbody></table><h3 id="visitor-pattern" tabindex="-1">Visitor Pattern <a class="header-anchor" href="#visitor-pattern" aria-label="Permalink to “Visitor Pattern”">​</a></h3><table tabindex="0"><thead><tr><th>Popularity</th><th>Complexity</th><th>Scope</th></tr></thead><tbody><tr><td></td><td></td><td>Object</td></tr></tbody></table><h2 id="constructor-pattern" tabindex="-1">Constructor Pattern <a class="header-anchor" href="#constructor-pattern" aria-label="Permalink to “Constructor Pattern”">​</a></h2><p>When we think on the classic implementation of object oriented languages, a <strong>constructor is a special function that initializes the class&#39;s values</strong> on default or with input from the caller</p><ul><li><a href="./../../Languages/JavaScript/JavaScript.html#object-creation">JavaScript Object Constructor</a></li></ul><h2 id="module-pattern" tabindex="-1">Module Pattern <a class="header-anchor" href="#module-pattern" aria-label="Permalink to “Module Pattern”">​</a></h2><ul><li><p><a href="./../../Languages/JavaScript/JavaScript.html#closures">JavaScript Closures</a></p></li><li><p><a href="./../../Languages/JavaScript/JavaScript.html#esm-ecmascript-modules">JavaScript ESM</a></p></li></ul><p><em>Example:</em></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Basic structure</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> fruitsCollection</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // private</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> objects</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // public</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    addObject</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      objects</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    removeObject</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">      let</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> index</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> objects</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">index</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">        objects</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">splice</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    getObjects</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">objects</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">})();</span></span></code></pre></div><h3 id="revealing-module-pattern" tabindex="-1">Revealing Module Pattern <a class="header-anchor" href="#revealing-module-pattern" aria-label="Permalink to “Revealing Module Pattern”">​</a></h3><p>This is an <strong>evolution of the module pattern</strong></p><ul><li><p>Main difference being that we write all object&#39;s logic on the <em>private scope</em> and then expose what we want trough an <em>anonymous object</em></p></li><li><p>We can also change the private member&#39;s names when we map then to the public ones</p></li><li><p><a href="./../../Languages/JavaScript/Node.js/Node.js.html#revealing-module-pattern">Checkout modules in Node.js</a></p></li><li><p>Overriding object properties can lead to bug in this pattern</p></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// we write the whole logic as private members</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// and expose an anonymous object that maps the</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// methods we want as their public counterparts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> fruitsCollection</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // private</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> objects</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> addObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    objects</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> removeObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> index</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> objects</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">index</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      objects</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">splice</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> getObjects</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">objects</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // public</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">    addName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> addObject</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">    removeName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> removeObject</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">    getNames</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> getObjects</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">})();</span></span></code></pre></div><h2 id="publish-subscribe-pattern" tabindex="-1">Publish-Subscribe Pattern <a class="header-anchor" href="#publish-subscribe-pattern" aria-label="Permalink to “Publish-Subscribe Pattern”">​</a></h2><p>Messaging pattern where senders of messages, called publishers, do not program the messages to be sent directly to specific receivers, called subscribers</p><ul><li>Messaging pattern, provides framework for exchanging of messages</li><li>Publisher publishes messages to channels/topics</li><li>No constant polling for information, updates are pushed to subscribers</li><li>Publishers do not send messages directly to subscribers, there is a message broker</li><li>Loose coupling between publishers and subscribers</li></ul><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to “References”">​</a></h2><ul><li><p><a href="https://www.dofactory.com/net/design-patterns" target="_blank" rel="noreferrer">C# Design patterns</a></p></li><li><p><a href="https://refactoring.guru/design-patterns" target="_blank" rel="noreferrer">Refactoring Guru - Design Patterns</a></p></li><li><p><a href="https://sourcemaking.com/design_patterns" target="_blank" rel="noreferrer">Source Making: Design Patterns</a></p></li><li><p><a href="https://www.geeksforgeeks.org/software-design-patterns/" target="_blank" rel="noreferrer">Design Questions</a></p></li><li><p><a href="https://github.com/fbeline/design-patterns-JS" target="_blank" rel="noreferrer">design-patterns-JS</a></p></li></ul>`,262)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
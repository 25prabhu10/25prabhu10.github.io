import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"Application Security","description":"","frontmatter":{"title":"Application Security","next":"./Web_Security.md","sidebar":false},"headers":[],"relativePath":"Concepts/Application_Security/index.md","filePath":"Concepts/Application_Security/README.md","lastUpdated":1756574703000}`);var a={name:`Concepts/Application_Security/index.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="table-of-content" tabindex="-1">Table of Content <a class="header-anchor" href="#table-of-content" aria-label="Permalink to “Table of Content”">​</a></h1><ol><li><a href="./Web_Security.html">Web Security</a></li><li><a href="./Cryptography.html">Cryptography</a></li><li><a href="./Authentication.html">Authentication</a></li><li><a href="./API.html">API</a></li><li><a href="./Cross_Site_Scripting.html">Cross-site scripting (XSS)</a></li><li><a href="./Code_Injection.html#sql-injection">SQL Injections</a></li><li><a href="./Content_Security_Policy.html">Content Security Policy</a></li><li><a href="./SameOrigin_Policy.html">Same-Origin Policy</a></li><li>XPATH Injection</li><li><a href="./../Web/HTTP.html#http-security">HTTP Security</a></li><li><a href="./Unicode_Normalisation_Vulnerability.html">Unicode Normalisation Vulnerability</a></li></ol><ul><li>Typosquatting</li></ul><p>Minimum Viable Security (MVS):</p><ul><li>Start early</li><li>Shift-left</li><li>Iterative work</li></ul><p>Security Categories:</p><ol><li><p>Secret Detection: Your data</p><ul><li><p>To detect secrets in various formats:</p><ul><li>Passwords</li><li>Access keys</li><li>API tokens</li><li>Credit card numbers</li></ul></li><li><p>Secret detection can prevent fraudulent use of credentials that were committed accidentally</p></li><li><p>Tools:</p><ul><li><a href="https://github.com/zricethezav/gitleaks" target="_blank" rel="noreferrer">gitleaks</a> by Zachary Rice</li><li><a href="https://github.com/awslabs/git-secrets" target="_blank" rel="noreferrer">git-secrets</a> by AWS</li><li><a href="https://github.com/Yelp/detect-secrets" target="_blank" rel="noreferrer">detect-secrets</a> by Yelp</li></ul></li></ul></li><li><p>Dependency Check (<a href="#software-composition-analysis-sca">SCA</a>): Your libraries</p><ul><li><p>To detect open source components with known vulnerabilities</p></li><li><p>Tools for Python:</p><ul><li><a href="https://github.com/jeremylong/DependencyCheck" target="_blank" rel="noreferrer">OWASP dependency-check</a></li><li><a href="https://github.com/pyupio/safety" target="_blank" rel="noreferrer">Safety</a> by Pyup.io</li><li><a href="https://github.com/sonatype-nexus-community/jake" target="_blank" rel="noreferrer">Jake</a> by Sonatype</li></ul></li></ul></li><li><p>Infrastructure Misconfiguration: Your infrastructure</p><ul><li><p>To detect security misconfigurations in your infrastructure-as-code, before they reach the cloud</p><ul><li>Missing encryption</li><li>Broad Permissions</li><li>No logging</li><li>Default Port</li></ul></li><li><p>Tools:</p><ul><li><a href="https://github.com/Checkmarx/kics" target="_blank" rel="noreferrer">KICS</a> by Checkmarx</li><li><a href="https://github.com/aquasecurity/tfsec" target="_blank" rel="noreferrer">TFSEC</a> by Aqua Security</li><li><a href="https://github.com/bridgecrewio/checkov" target="_blank" rel="noreferrer">checkov</a> by Bridgecrew (Palo Alto)</li></ul></li></ul></li><li><p>Container Scanning: Your packaging</p><ul><li><p>To detect vulnerabilities and configuration issues in container images</p></li><li><p>Tools:</p><ul><li><a href="https://github.com/aquasecurity/trivy" target="_blank" rel="noreferrer">Trivy</a> by Aqua Security</li><li><a href="https://github.com/quay/clair" target="_blank" rel="noreferrer">Clair</a> by Quay.io</li><li><a href="https://github.com/anchore/anchore-engine" target="_blank" rel="noreferrer">Anchore</a></li></ul></li></ul></li><li><p>Runtime Scanning: Your runtime</p><ul><li><p>To detect vulnerabilities in web applications (and API) while they are running</p></li><li><p>DAST (Dynamic Application Security Testing)</p></li><li><p>Tools:</p><ul><li><a href="https://github.com/zaproxy/zaproxy" target="_blank" rel="noreferrer">ZAP</a> by OWASP</li><li><a href="https://github.com/sullo/nikto" target="_blank" rel="noreferrer">Nikto</a></li><li><a href="https://github.com/Arachni/arachni" target="_blank" rel="noreferrer">Arachni</a></li></ul></li></ul></li></ol><p>-<a href="https://www.youtube.com/watch?v=M-LSpxgNxsM" target="_blank" rel="noreferrer">5 Security Tools All Developers Should Know About</a></p><ul><li><p><a href="https://github.com/ranreg/Open-Source-Summit-2022" target="_blank" rel="noreferrer">Example project</a></p></li><li><p><a href="https://www.jit.io/" target="_blank" rel="noreferrer">JIT - Security Platform</a></p></li></ul><h2 id="xpath-injection" tabindex="-1">XPATH Injection <a class="header-anchor" href="#xpath-injection" aria-label="Permalink to “XPATH Injection”">​</a></h2><h2 id="static-analysis-security-testing-sast" tabindex="-1">Static Analysis Security Testing (SAST) <a class="header-anchor" href="#static-analysis-security-testing-sast" aria-label="Permalink to “Static Analysis Security Testing (SAST)”">​</a></h2><p>Static Code Analysis</p><ol><li><p>What is Static Code Analysis?</p><ul><li>Predicting defects in code without running it</li></ul></li><li><p>How Static Code Analysis tools work?</p><ul><li>At the core of most popular static analysis libraries is the concept of an <strong>Abstract Syntax Tree</strong>, or AST for short. An AST is a representation of source code as a tree structure: each source file is a root node, and root-level constructs declared in the file are child nodes of that node. Those child nodes can each have child nodes within them</li></ul></li><li><p>Some of the Static Code Analyses are:</p><ul><li><p>There are many Static Code Analyses for different languages</p></li><li><p>As JavaScript is a dynamically typed language, we can use <a href="https://eslint.org/" target="_blank" rel="noreferrer">ESLint</a> (linter) and <a href="https://prettier.io/" target="_blank" rel="noreferrer">Prettier</a> (formatter) to catch most of the errors</p></li><li><p><a href="https://flow.org/" target="_blank" rel="noreferrer">Flow</a> from Facebook is a Static type checker. It can be used alongside linters and formatters to catch more bugs</p></li><li><p><a href="https://www.typescriptlang.org/" target="_blank" rel="noreferrer">TypeScript</a> extends JavaScript by adding types</p></li><li><p><a href="./Checkmarx.html"><code>Checkmarx</code></a>, <code>JFROG XRAY</code> are some of the other tools</p></li></ul></li><li><p>What are the other techniques to find bugs?</p><ul><li><p><strong><em>Code Coverage Tools</em></strong> - Code coverage provides information about whether, and optionally how often certain parts of an application have been executed. It&#39;s commonly used to determine how thoroughly a test suite exercises a particular codebase. <a href="https://jestjs.io/" target="_blank" rel="noreferrer">JestJS</a> is a testing framework for JavaScript with code coverage</p></li><li><p><strong><em>Software Composition Analysis</em></strong> - Identify Vulnerabilities In Open Source Libraries used as dependencies in the project. <a href="https://github.com/RetireJS/retire.js" target="_blank" rel="noreferrer">RetireJS</a> is one such tool for JavaScript</p></li></ul></li></ol><h2 id="software-composition-analysis-sca" tabindex="-1">Software Composition Analysis (SCA) <a class="header-anchor" href="#software-composition-analysis-sca" aria-label="Permalink to “Software Composition Analysis (SCA)”">​</a></h2><ul><li>Artifactory X-ray</li><li>SonarCube</li><li>Snyk</li></ul><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to “References”">​</a></h2><ul><li><a href="https://github.com/swisskyrepo/PayloadsAllTheThings" target="_blank" rel="noreferrer">Different Vulnerability Payloads</a></li><li><a href="https://github.com/OWASP/API-Security" target="_blank" rel="noreferrer">OWASP API Security</a></li><li><a href="https://cheatsheetseries.owasp.org/" target="_blank" rel="noreferrer">CheatSheet</a></li><li><a href="https://web.stanford.edu/class/cs253/" target="_blank" rel="noreferrer">Stanford - CS 253 Web Security</a></li><li>Insecure apps for testing: <ul><li><a href="https://github.com/bkimminich/juice-shop" target="_blank" rel="noreferrer">Juice Shop</a></li><li><a href="https://github.com/WebGoat/WebGoat" target="_blank" rel="noreferrer">WebGoat</a>: A Java based deliberately insecure application and companion app <strong>WebWolf</strong></li></ul></li></ul><p>Books:</p><ul><li><p><em>The Web Application Hacker&#39;s Handbook: Finding and Exploiting Security Flaws</em> (ISBN-13: 978-1118026472) (2011)</p></li><li><p><em>Alice and Bob Learn Application Security</em> by Tanya Janca (ISBN-13: 978-1119687351) (2020)</p></li></ul>`,19)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"API Gateway","description":"API Gateway","frontmatter":{"title":"API Gateway","description":"API Gateway","prev":"./AWS"},"headers":[],"relativePath":"Concepts/AWS/AWS_API_Gateway.md","filePath":"Concepts/AWS/AWS_API_Gateway.md","lastUpdated":1756574703000}`);var a={name:`Concepts/AWS/AWS_API_Gateway.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="api-gateway" tabindex="-1">API Gateway <a class="header-anchor" href="#api-gateway" aria-label="Permalink to “API Gateway”">​</a></h1><p><em>Example:</em> Building a Serverless API</p><ul><li><p>Client --REST API--&gt; API Gateway --PROXY REQUESTS--&gt; Lambda --CRUD--&gt; DynamoDB</p></li><li><p>AWS Lambda + API Gateway: No infrastructure to manage</p></li><li><p>Support for the WebSocket Protocol</p></li><li><p>Handle API versioning (v1, v2...)</p></li><li><p>Handle different environments (dev, test, prod...)</p></li><li><p>Handle security (Authentication and Authorization)</p></li><li><p>Create API keys, handle request throttling</p></li><li><p>Swagger / Open API import to quickly define APIs</p></li><li><p>Transform and validate requests and responses</p></li><li><p>Generate SDK and API specifications</p></li><li><p>Cache API responses</p></li></ul><h2 id="integrations-high-level" tabindex="-1">Integrations High Level <a class="header-anchor" href="#integrations-high-level" aria-label="Permalink to “Integrations High Level”">​</a></h2><ul><li><strong>Lambda Function</strong><ul><li>Invoke Lambda function</li><li>Easy way to expose REST API backed by AWS Lambda</li></ul></li><li><strong>HTTP</strong><ul><li>Expose HTTP endpoints in the backend</li><li><em>Example:</em> internal HTTP API on premise, Application Load Balancer...</li><li>Why? Add rate limiting, caching, user authentications, API keys, etc...</li></ul></li><li><strong>AWS Service</strong><ul><li>Expose any AWS API through the API Gateway?</li><li><em>Example:</em> start an AWS Step Function workflow, post a message to SQS</li><li>Why? Add authentication, deploy publicly, rate control...</li></ul></li></ul><h2 id="endpoint-types" tabindex="-1">Endpoint Types <a class="header-anchor" href="#endpoint-types" aria-label="Permalink to “Endpoint Types”">​</a></h2><ul><li><strong>Edge-Optimized (default)</strong>: For global clients <ul><li>Requests are routed through the CloudFront Edge locations (improves latency)</li><li>The API Gateway still lives in only one region</li></ul></li><li><strong>Regional</strong>: <ul><li>For clients within the same region</li><li>Could manually combine with CloudFront (more control over the caching strategies and the distribution)</li></ul></li><li><strong>Private</strong>: <ul><li>Can only be accessed from your VPC using an interface VPC endpoint (ENI)</li><li>Use a resource policy to define access</li></ul></li></ul><h2 id="deployment-stages" tabindex="-1">Deployment Stages <a class="header-anchor" href="#deployment-stages" aria-label="Permalink to “Deployment Stages”">​</a></h2><ul><li>Making changes in the API Gateway does not mean they&#39;re effective</li><li>You need to make a &quot;deployment&quot; for them to be in effect</li><li>It&#39;s a common source of confusion</li><li>Changes are deployed to &quot;Stages&quot; (as many as you want)</li><li>Use the naming you like for stages (dev, test, prod)</li><li>Each stage has its own configuration parameters</li><li>Stages can be rolled back as a history of deployments is kept</li></ul><h2 id="stages-v1-and-v2-api-breaking-change" tabindex="-1">Stages v1 and v2 API breaking change <a class="header-anchor" href="#stages-v1-and-v2-api-breaking-change" aria-label="Permalink to “Stages v1 and v2 API breaking change”">​</a></h2><ul><li>Old URL - V1 Client --&gt; <code>https://api.example.com/v1</code> --&gt; API Gateway V1 Stage --&gt; Lambda V1</li><li>New URL - V2 Client --&gt; <code>https://api.example.com/v2</code> --&gt; API Gateway V2 Stage --&gt; Lambda V2</li></ul><h2 id="stage-variables" tabindex="-1">Stage Variables <a class="header-anchor" href="#stage-variables" aria-label="Permalink to “Stage Variables”">​</a></h2><ul><li>Stage variables are like environment variables for API Gateway</li><li>Use them to change often changing configuration values</li><li>They can be used in: <ul><li>Lambda function ARN</li><li>HTTP Endpoint</li><li>Parameter mapping templates</li></ul></li><li>Use cases: <ul><li>Configure HTTP endpoints your stages talk to (dev, test, prod...)</li><li>Pass configuration parameters to AWS Lambda through mapping templates</li></ul></li><li>Stage variables are passed to the &quot;context&quot; object in AWS Lambda</li></ul><h2 id="api-gateway-stage-variables-lambda-aliases" tabindex="-1">API Gateway Stage Variables &amp; Lambda Aliases <a class="header-anchor" href="#api-gateway-stage-variables-lambda-aliases" aria-label="Permalink to “API Gateway Stage Variables &amp; Lambda Aliases”">​</a></h2><ul><li>We create a <strong>stage variable</strong> to indicate the corresponding Lambda alias</li><li>Our API gateway will automatically invoke the right Lambda function!</li></ul><h2 id="canary-deployment" tabindex="-1">Canary Deployment <a class="header-anchor" href="#canary-deployment" aria-label="Permalink to “Canary Deployment”">​</a></h2><ul><li>Possibility to enable canary deployments for any stage (usually prod)</li><li>Choose the % of traffic the canary channel receives Prod Stage</li><li>Metrics &amp; Logs are separate (for better monitoring)</li><li>Possibility to override stage variables for canary</li><li>This is blue / green deployment with AWS Lambda &amp; API Gateway</li></ul><h2 id="integration-types" tabindex="-1">Integration Types <a class="header-anchor" href="#integration-types" aria-label="Permalink to “Integration Types”">​</a></h2><ul><li><p>Integration Type <strong>MOCK</strong></p><ul><li>API Gateway returns a response without sending the request to the backend</li></ul></li><li><p>Integration Type <strong>HTTP / AWS (Lambda &amp; AWS Services)</strong></p><ul><li>you must configure both the integration request and integration response</li><li>Setup data mapping using <strong>mapping templates</strong> for the request &amp; response</li></ul></li><li><p>Client --REST API--&gt; API Gateway + Mapping Templates --AWS Service Integration--&gt; SQS Queue</p></li><li><p>Integration Type <strong>AWS_PROXY (Lambda Proxy)</strong>:</p><ul><li>incoming request from the client is the input to Lambda</li><li>The function is responsible for the logic of request / response</li><li><strong>No mapping template, headers, query string parameters, as arguments</strong></li></ul></li><li><p>Lambda function invocation payload:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">resource</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Resource path</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">path</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Path parameter</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">httpsMethod</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Incoming request&#39;s method name</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">headers</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">String containing incoming request headers</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">multiValueHeaders</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">List of strings containing incoming...</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">queryStringParameters</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">query string parameters</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">multiValueQueryStringParameters</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">List of query string...</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">pathParameters</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">path parameters</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">stageVariables</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Applicable stage variables</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">requestContext</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Request context, including authorization...</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">body</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">A JSON string of the request payload</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">isBase64Encoded</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">A boolean flag</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>Lambda function expected response:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">isBase64Encoded</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">true|false</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">statusCode</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">httpStatusCode</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">headers</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">headername</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">headerValue</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">multiValueHeaders</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">headerName</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">headerValue</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">body</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">...</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>Integration Type <strong>HTTP_PROXY</strong></p><ul><li>No mapping template</li><li>The HTTP request is passed to the backend</li><li>The HTTP response from the backend is forwarded by API Gateway</li></ul></li><li><p>Client --HTTP Request--&gt; API Gateway --HTTP_PROXY (Request/Responses are proxied)--&gt; Application Load Balancer</p></li></ul><h2 id="mapping-templates-aws-http-integration" tabindex="-1">Mapping Templates (AWS &amp; HTTP Integration) <a class="header-anchor" href="#mapping-templates-aws-http-integration" aria-label="Permalink to “Mapping Templates (AWS &amp; HTTP Integration)”">​</a></h2><ul><li>Mapping templates can be used to modify request / responses</li><li>Rename / Modify <strong>query string parameters</strong></li><li>Modify <strong>body content</strong></li><li><strong>Add headers</strong></li><li>Uses Velocity Template Language (VTL): for loop, if etc...</li><li>Filter output results (remove unnecessary data)</li></ul><p>Mapping Example: <strong>JSON to XML with SOAP</strong></p><ul><li>SOAP API are XML based, whereas REST API are JSON based <ul><li>Client --RESTful, JSON Payload--&gt; API Gateway + Mapping Template --XML Payload--&gt; SOAP API</li></ul></li><li>In this case, API Gateway should: <ul><li>Extract data from the request: either path, payload or header</li><li>Build SOAP message based on request data (mapping template)</li><li>Call SOAP service and receive XML response</li><li>Transform XML response to desired format (like JSON), and respond to the user</li></ul></li></ul><p>Mapping Example: <strong>Query String parameters</strong></p><ul><li>Client --HTTP--&gt; API Gateway + MAPPING TEMPLATE --JSON--&gt; Lambda</li></ul><h2 id="aws-api-gateway-swagger-open-api-spec" tabindex="-1">AWS API Gateway Swagger / Open API spec <a class="header-anchor" href="#aws-api-gateway-swagger-open-api-spec" aria-label="Permalink to “AWS API Gateway Swagger / Open API spec”">​</a></h2><ul><li>Common way of defining REST APIs, using API definition as code</li><li>Import existing Swagger / OpenAPI 3.0 spec to API Gateway <ul><li>Method</li><li>Method Request</li><li>Integration Request</li><li>Method Response</li></ul></li><li>AWS extensions for API gateway and setup every single option</li><li>Can export current API as Swagger / OpenAPI spec</li><li>Swagger can be written in YAML or JSON</li><li>Using Swagger we can generate SDK for our applications</li></ul><h2 id="caching-api-responses" tabindex="-1">Caching API responses <a class="header-anchor" href="#caching-api-responses" aria-label="Permalink to “Caching API responses”">​</a></h2><ul><li>Caching reduces the number of calls made to the backend</li><li>Default TTL (time to live) is 300 seconds (min: 0s, max: 3600s)</li><li><strong>Caches are defined per stage</strong></li><li>Possible to override cache settings <strong>per method</strong></li><li>Cache encryption option</li><li>Cache capacity between 0.5GB to 237GB</li><li>Cache is expensive, makes sense in production, may not make sense in dev / test</li></ul><h2 id="api-gateway-cache-invalidation" tabindex="-1">API Gateway Cache Invalidation <a class="header-anchor" href="#api-gateway-cache-invalidation" aria-label="Permalink to “API Gateway Cache Invalidation”">​</a></h2><ul><li><p>Able to flush the entire cache (invalidate it) immediately</p></li><li><p>Clients can invalidate the cache with header: Cache- Control: max-age=0 (with proper IAM authorization)</p></li><li><p>If you don&#39;t impose an InvalidateCache policy (or choose the Require authorization check box in the console), any client can invalidate the API cache</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Version</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">2012-10-17</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Statement</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Effect</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Allow</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Action</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">execute-api:InvalidateCache</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Resource</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">arn:...:api-id/stage-name/GET/resource-path-specifier</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li></ul><h2 id="api-gateway-usage-plans-api-keys" tabindex="-1">API Gateway - Usage Plans &amp; API Keys <a class="header-anchor" href="#api-gateway-usage-plans-api-keys" aria-label="Permalink to “API Gateway - Usage Plans &amp; API Keys”">​</a></h2><ul><li>If you want to make an API available as an offering ($) to your customers</li><li>Usage Plan: <ul><li>who can access one or more deployed API stages and methods</li><li>how much and how fast they can access them</li><li>uses API keys to identify API clients and meter access</li><li>configure throttling limits and quota limits that are enforced on individual client</li></ul></li><li>API Keys: <ul><li>alphanumeric string values to distribute to your customers</li><li><em>Example:</em> <em>WBjHxNtoAb4WPKBC7cGm64CBibIb24b4jt8jJHo9</em></li><li>Can use with usage plans to control access</li><li>Throttling limits are applied to the API keys</li></ul></li><li>Quotas limits is the overall number of maximum requests</li></ul><h2 id="api-gateway-correct-order-for-api-keys" tabindex="-1">API Gateway - Correct Order for API keys <a class="header-anchor" href="#api-gateway-correct-order-for-api-keys" aria-label="Permalink to “API Gateway - Correct Order for API keys”">​</a></h2><p>To configure a usage plan:</p><ol><li>Create one or more APIs, configure the methods to require an API key, and deploy the APIs to stages.</li><li>Generate or import API keys to distribute to application developers (your customers) who will be using your API.</li><li>Create the usage plan with the desired throttle and quota limits.</li><li>Associate API stages and API keys with the usage plan.</li></ol><ul><li>Callers of the API must supply an assigned API key in the <code>x-api-key</code> header in requests to the API.</li></ul><h2 id="api-gateway-logging-tracing" tabindex="-1">API Gateway - Logging &amp; Tracing <a class="header-anchor" href="#api-gateway-logging-tracing" aria-label="Permalink to “API Gateway - Logging &amp; Tracing”">​</a></h2><ul><li>CloudWatch Logs: <ul><li>Enable CloudWatch logging at the Stage level (with Log Level)</li><li>Can override settings on a per API basis (ex: ERROR, DEBUG, INFO)</li><li>Log contains information about request / response body</li></ul></li><li>X-Ray: <ul><li>Enable tracing to get extra information about requests in API Gateway</li><li>X-Ray API Gateway + AWS Lambda gives you the full picture</li></ul></li></ul><h2 id="api-gateway-cloudwatch-metrics" tabindex="-1">API Gateway - CloudWatch Metrics <a class="header-anchor" href="#api-gateway-cloudwatch-metrics" aria-label="Permalink to “API Gateway - CloudWatch Metrics”">​</a></h2><ul><li>Metrics are by stage, Possibility to enable detailed metrics</li><li><strong>CacheHitCount</strong> &amp; <strong>CacheMissCount</strong>: efficiency of the cache</li><li><strong>Count</strong>: The total number API requests in a given period.</li><li><strong>IntegrationLatency</strong>: The time between when API Gateway relays a request to the backend and when it receives a response from the backend.</li><li><strong>Latency</strong>: The time between when API Gateway receives a request from a client and when it returns a response to the client. The latency includes the integration latency and other API Gateway overhead.</li><li><strong>4XXError</strong> (client-side) &amp; <strong>5XXError</strong> (server-side)</li></ul><h2 id="api-gateway-throttling" tabindex="-1">API Gateway Throttling <a class="header-anchor" href="#api-gateway-throttling" aria-label="Permalink to “API Gateway Throttling”">​</a></h2><ul><li><strong>Account Limit</strong><ul><li>API Gateway throttles requests at10000 rps across all API</li><li>Soft limit that can be increased upon request</li></ul></li><li>In case of throttling =&gt; <strong>429 Too Many Requests</strong> (retriable error)</li><li>Can set <strong>Stage limit &amp; Method limits</strong> to improve performance</li><li>Or you can define <strong>Usage Plans</strong> to throttle per customer</li><li>Just like Lambda Concurrency, one API that is overloaded, if not limited, can cause the other APIs to be throttled</li></ul><h2 id="api-gateway-errors" tabindex="-1">API Gateway - Errors <a class="header-anchor" href="#api-gateway-errors" aria-label="Permalink to “API Gateway - Errors”">​</a></h2><ul><li><strong>4xx means Client errors</strong><ul><li>400: Bad Request</li><li>403: Access Denied, WAF filtered</li><li>429: Quota exceeded, Throttle</li></ul></li><li><strong>5xx means Server errors</strong><ul><li>502: Bad Gateway Exception, usually for an incompatible output returned from a Lambda proxy integration backend and occasionally for out-of-order invocations due to heavy loads.</li><li>503: Service Unavailable Exception</li><li>504: Integration Failure - ex Endpoint Request Timed-out Exception, API Gateway requests time out after 29 second maximum</li></ul></li></ul><h2 id="aws-api-gateway-cors" tabindex="-1">AWS API Gateway - CORS <a class="header-anchor" href="#aws-api-gateway-cors" aria-label="Permalink to “AWS API Gateway - CORS”">​</a></h2><ul><li>CORS must be enabled when you receive API calls from another domain.</li><li>The OPTIONS pre-flight request must contain the following headers: <ul><li><em>Access-Control-Allow-Methods</em></li><li><em>Access-Control-Allow-Headers</em></li><li><em>Access-Control-Allow-Origin</em></li></ul></li><li>CORS can be enabled through the console</li></ul><h2 id="api-gateway-security" tabindex="-1">API Gateway - Security <a class="header-anchor" href="#api-gateway-security" aria-label="Permalink to “API Gateway - Security”">​</a></h2><h3 id="iam-permissions" tabindex="-1">IAM Permissions <a class="header-anchor" href="#iam-permissions" aria-label="Permalink to “IAM Permissions”">​</a></h3><ul><li>Create an IAM policy authorization and attach to User / Role</li><li><strong>Authentication = IAM</strong> | <strong>Authorization = IAM Policy</strong></li><li>Good to provide access within AWS (EC2, Lambda, IAM users...)</li><li>Leverages &quot;Sig v4&quot; capability where IAM credential are in headers</li></ul><h3 id="api-gateway-resource-policies" tabindex="-1">API Gateway - Resource Policies <a class="header-anchor" href="#api-gateway-resource-policies" aria-label="Permalink to “API Gateway - Resource Policies”">​</a></h3><ul><li>Resource policies (similar to Lambda Resource Policy)</li><li><strong>Allow for Cross Account Access (combined with IAM Security)</strong></li><li>Allow for a specific source IP address</li><li>Allow for a VPC Endpoint</li></ul><h3 id="cognito-user-pools" tabindex="-1">Cognito User Pools <a class="header-anchor" href="#cognito-user-pools" aria-label="Permalink to “Cognito User Pools”">​</a></h3><ul><li>Cognito fully manages user lifecycle, token expires automatically</li><li>API gateway verifies identity automatically from AWS Cognito</li><li>No custom implementation required</li><li><strong>Authentication = Cognito User Pools | Authorization = API Gateway Methods</strong></li></ul><h3 id="lambda-authorizer-formerly-custom-authorizers" tabindex="-1">Lambda Authorizer (formerly Custom Authorizers) <a class="header-anchor" href="#lambda-authorizer-formerly-custom-authorizers" aria-label="Permalink to “Lambda Authorizer (formerly Custom Authorizers)”">​</a></h3><ul><li><strong>Token-based authorizer</strong> (bearer token): e.g. JWT (JSON Web Token) or Oauth</li><li>A request parameter-based Lambda authorizer (headers, query string, stage var)</li><li>Lambda must return an IAM policy for the user, result policy is cached</li><li><strong>Authentication = External | Authorization = Lambda function</strong></li></ul><h3 id="api-gateway-security-summary" tabindex="-1">API Gateway - Security - Summary <a class="header-anchor" href="#api-gateway-security-summary" aria-label="Permalink to “API Gateway - Security - Summary”">​</a></h3><ul><li>IAM: <ul><li>Great for users / roles already within your AWS account, + resource policy for cross account</li><li>Handle authentication + authorization</li><li>Leverages Signature v4</li></ul></li><li>Custom Authorizer: <ul><li>Great for 3rd party tokens</li><li>Very flexible in terms of what IAM policy is returned</li><li>Handle Authentication verification + Authorization in the Lambda function</li><li>Pay per Lambda invocation, results are cached</li></ul></li><li>Cognito User Pool: <ul><li>You manage your own user pool (can be backed by Facebook, Google login etc...)</li><li>No need to write any custom code</li><li>Must implement authorization in the backend</li></ul></li></ul><h2 id="api-gateway-http-api-vs-rest-api" tabindex="-1">API Gateway - HTTP API vs REST API <a class="header-anchor" href="#api-gateway-http-api-vs-rest-api" aria-label="Permalink to “API Gateway - HTTP API vs REST API”">​</a></h2><ul><li>HTTP APIs <ul><li>low-latency, cost-effective AWS Lambda proxy, HTTP proxy APIs and private integration (no data mapping)</li><li>support OIDC and OAuth 2.0 authorization, and built-in support for CORS</li><li>No usage plans and API keys</li></ul></li><li>REST APIs <ul><li>All features (except Native OpenID Connect / OAuth 2.0)</li></ul></li></ul><table tabindex="0"><thead><tr><th>Authorizers</th><th>HTTP API</th><th>REST API</th></tr></thead><tbody><tr><td>AWS Lambda</td><td></td><td>YES</td></tr><tr><td>IAM</td><td></td><td>YES</td></tr><tr><td>Amazon Cognito</td><td>YES*</td><td>YES</td></tr><tr><td>Native OpenID Connect / OAuth 2.0</td><td>YES</td><td></td></tr></tbody></table><h2 id="api-gateway-websocket-api-overview" tabindex="-1">API Gateway - WebSocket API - Overview <a class="header-anchor" href="#api-gateway-websocket-api-overview" aria-label="Permalink to “API Gateway - WebSocket API - Overview”">​</a></h2><ul><li>What&#39;s WebSocket?</li><li>Two-way interactive communication between a user&#39;s browser and a server</li><li>Server can push information to the client</li><li>This enables stateful application use cases</li><li>WebSocket APIs are often used in <strong>real-time applications</strong> such as chat applications, collaboration platforms, multiplayer games, and financial trading platforms.</li><li>Works with AWS Services (Lambda, DynamoDB) or HTTP endpoints</li></ul><h3 id="connecting-to-the-api" tabindex="-1">Connecting to the API <a class="header-anchor" href="#connecting-to-the-api" aria-label="Permalink to “Connecting to the API”">​</a></h3><p>WebSocket URL: <code>wss://[some-uniqueid].execute-api.[region].amazonaws.com/[stage-name]</code></p><h3 id="client-to-server-messaging" tabindex="-1">Client to Server Messaging <a class="header-anchor" href="#client-to-server-messaging" aria-label="Permalink to “Client to Server Messaging”">​</a></h3><ul><li><p>ConnectionID is re-used:</p><ul><li>WebSocket URL: <code>wss://abcdef.execute-api.us-west-1.amazonaws.com/dev</code></li></ul></li><li><p>Server to Client Messaging</p><ul><li>WebSocket URL: <code>wss://abcdef.execute-api.us-west-1.amazonaws.com/dev</code></li></ul></li><li><p>Connection URL Operations</p><ul><li>Connection URL: <code>wss://abcdef.execute-api.us-west-1.amazonaws.com/dev/@connections/connectionId</code></li></ul></li></ul><table tabindex="0"><thead><tr><th>Operation</th><th>Action</th></tr></thead><tbody><tr><td>POST</td><td>Sends a message from the Server to the connected WS Client</td></tr><tr><td>GET</td><td>Gets the latest connection status of the connected WS Client</td></tr><tr><td>DELETE</td><td>Disconnect the connected Client from the WS connection</td></tr></tbody></table><h2 id="api-gateway-websocket-api-routing" tabindex="-1">API Gateway - WebSocket API - Routing <a class="header-anchor" href="#api-gateway-websocket-api-routing" aria-label="Permalink to “API Gateway - WebSocket API - Routing”">​</a></h2><ul><li>Incoming JSON messages are routed to different backend</li><li>If no routes =&gt; sent to $default</li><li>You request a route selection expression to select the field on JSON to route from</li><li>Sample expression: <code>$request.body.action</code></li><li>The result is evaluated against the route keys available in your API Gateway</li><li>The route is then connected to the backend you&#39;ve setup through API Gateway</li></ul><p>INCOMING DATA:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">service</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">chat</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">action</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">join</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">data</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">room</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">room1234</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p>ROUTE KEY TABLE - API GATEWAY:</p><table tabindex="0"><thead><tr><th>########</th></tr></thead><tbody><tr><td>$connect</td></tr><tr><td>$default</td></tr><tr><td>join</td></tr><tr><td>quit</td></tr><tr><td>delete</td></tr></tbody></table><h2 id="api-gateway-architecture" tabindex="-1">API Gateway - Architecture <a class="header-anchor" href="#api-gateway-architecture" aria-label="Permalink to “API Gateway - Architecture”">​</a></h2><ul><li>Create a single interface for all the microservices in your company</li><li>Use API endpoints with various resources</li><li>Apply a simple domain name and SSL certificates</li><li>Can apply forwarding and transformation rules at the API Gateway level</li></ul>`,76)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
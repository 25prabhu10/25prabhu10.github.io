import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"AWS Elastic Beanstalk","description":"AWS Elastic Beanstalk","frontmatter":{"title":"AWS Elastic Beanstalk","description":"AWS Elastic Beanstalk","prev":"./AWS"},"headers":[],"relativePath":"Concepts/AWS/AWS_Elastic_Beanstalk.md","filePath":"Concepts/AWS/AWS_Elastic_Beanstalk.md","lastUpdated":1756574703000}`);var a={name:`Concepts/AWS/AWS_Elastic_Beanstalk.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="aws-elastic-beanstalk" tabindex="-1">AWS Elastic Beanstalk <a class="header-anchor" href="#aws-elastic-beanstalk" aria-label="Permalink to “AWS Elastic Beanstalk”">​</a></h1><p>Developer problems on AWS</p><ul><li>Managing infrastructure</li><li>Deploying Code</li><li>Configuring all the databases, load balancers, etc</li><li>Scaling concerns</li><li>Most web apps have the same architecture (ALB + ASG)</li><li>All the developers want is for their code to run!</li><li>Possibly, consistently across different applications and environments</li></ul><h2 id="elastic-beanstalk" tabindex="-1">Elastic Beanstalk <a class="header-anchor" href="#elastic-beanstalk" aria-label="Permalink to “Elastic Beanstalk”">​</a></h2><ul><li>Elastic Beanstalk is a developer centric view of deploying an application on AWS</li><li>It uses all the component&#39;s we&#39;ve seen before: EC2, ASG, ELB, RDS, ...</li><li>Managed service <ul><li>Automatically handles capacity provisioning, load balancing, scaling, application health monitoring, instance configuration, ...</li><li>Just the application code is the responsibility of the developer</li></ul></li><li>We still have full control over the configuration</li><li>Beanstalk is free but you pay for the underlying instances</li></ul><h2 id="elastic-beanstalk-components" tabindex="-1">Elastic Beanstalk - Components <a class="header-anchor" href="#elastic-beanstalk-components" aria-label="Permalink to “Elastic Beanstalk - Components”">​</a></h2><ul><li>Application: collection of Elastic Beanstalk components (environments, versions, configurations, ...)</li><li>Application Version: an iteration of your application code</li><li>Environment: <ul><li>Collection of AWS resources running an application version (only one application version at a time)</li><li>Tiers: Web Server Environment Tier &amp; Worker Environment Tier</li><li>You can create multiple environments (dev, test, prod, ...)</li></ul></li></ul><h2 id="elastic-beanstalk-supported-platforms" tabindex="-1">Elastic Beanstalk - Supported Platforms <a class="header-anchor" href="#elastic-beanstalk-supported-platforms" aria-label="Permalink to “Elastic Beanstalk - Supported Platforms”">​</a></h2><ul><li>Go</li><li>Java SE</li><li>Java with Tomcat</li><li>.NET Core on Linux</li><li>.NET on Windows Server</li><li>Node.js</li><li>PHP</li><li>Python</li><li>Ruby</li><li>Packer Builder</li><li>Single Container Docker</li><li>Multi-container Docker</li><li>Preconfigured Docker</li><li>If not supported, you can write your custom platform (advanced)</li></ul><h2 id="beanstalk-deployment-options-for-updates" tabindex="-1">Beanstalk Deployment Options for Updates <a class="header-anchor" href="#beanstalk-deployment-options-for-updates" aria-label="Permalink to “Beanstalk Deployment Options for Updates”">​</a></h2><ul><li>All at once (deploy all in one go) - fastest, but instances aren&#39;t available to serve traffic for a bit (downtime)</li><li>Rolling: update a few instances at a time (bucket), and then move onto the next bucket once the first bucket is healthy</li><li>Rolling with additional batches: like rolling, but spins up new instances to move the batch (so that the old application is still available)</li><li>Immutable: spins up new instances in a new ASG, deploys version to these instances, and then swaps all the instances when everything is healthy</li></ul><h3 id="all-at-once" tabindex="-1">All at once <a class="header-anchor" href="#all-at-once" aria-label="Permalink to “All at once”">​</a></h3><ul><li><strong>Fastest deployment</strong></li><li>Application has <strong>downtime</strong></li><li>Great for quick iterations in development environment</li><li>No additional cost</li></ul><h3 id="rolling" tabindex="-1">Rolling <a class="header-anchor" href="#rolling" aria-label="Permalink to “Rolling”">​</a></h3><ul><li>Application is <strong>running below capacity</strong></li><li>Can set the bucket size</li><li>Application is <strong>running both versions simultaneously</strong></li><li><strong>No additional cost</strong></li><li>Long deployment</li></ul><h3 id="rolling-with-additional-batches" tabindex="-1">Rolling with additional batches <a class="header-anchor" href="#rolling-with-additional-batches" aria-label="Permalink to “Rolling with additional batches”">​</a></h3><ul><li>Application is <strong>running at capacity</strong></li><li>Can set the bucket size</li><li>Application is <strong>running both versions simultaneously</strong></li><li><strong>Small additional cost</strong></li><li>Additional batch is removed at the end of the deployment</li><li>Longer deployment</li><li>Good for prod</li></ul><h3 id="immutable" tabindex="-1">Immutable <a class="header-anchor" href="#immutable" aria-label="Permalink to “Immutable”">​</a></h3><ul><li><strong>Zero downtime</strong></li><li>New Code is <strong>deployed to new instances on a temporary ASG</strong></li><li><strong>High cost, double capacity</strong></li><li><strong>Longest deployment</strong></li><li><strong>Quick rollback in case of failures (just terminate new ASG)</strong></li><li><strong>Great for prod</strong></li></ul><h3 id="blue-green" tabindex="-1">Blue / Green <a class="header-anchor" href="#blue-green" aria-label="Permalink to “Blue / Green”">​</a></h3><ul><li>Similar to Immutable</li><li>Not a &quot;direct feature&quot; of Elastic Beanstalk</li><li>Zero downtime and release facility</li><li>Create a new &quot;stage&quot; environment and deploy v2 there</li><li>The new environment (green) can be validated independently and roll back if issues</li><li>Route 53 can be setup using weighted policies to redirect a little bit of traffic to the stage environment</li><li>Using Beanstalk, &quot;swap URLs&quot; when done with the environment test</li></ul><div class="danger custom-block"><p class="custom-block-title">DNS CHANGE</p><p>It uses new load balancer, so the changes happen at DNS level. This is a problem as DNS changes have to propagate to servers around the world.</p></div><h2 id="elastic-beanstalk-traffic-splitting" tabindex="-1">Elastic Beanstalk - Traffic Splitting <a class="header-anchor" href="#elastic-beanstalk-traffic-splitting" aria-label="Permalink to “Elastic Beanstalk - Traffic Splitting”">​</a></h2><ul><li>Canary Testing</li><li>New application version is deployed to a temporary ASG with the same capacity</li><li>A small % of traffic is sent to the temporary ASG for a configurable amount of time</li><li>Deployment health is monitored</li><li>If there&#39;s a deployment failure, this triggers an automated rollback (very quick)</li><li>No application downtime</li><li>New instances are migrated from the temporary to the original ASG</li><li>Old application version is then terminated</li></ul><blockquote><p>Elastic Beanstalk Deployment Summary from <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.deploy-existing-version.html" target="_blank" rel="noreferrer">AWS Doc</a></p></blockquote><h2 id="elastic-beanstalk-cli" tabindex="-1">Elastic Beanstalk CLI <a class="header-anchor" href="#elastic-beanstalk-cli" aria-label="Permalink to “Elastic Beanstalk CLI”">​</a></h2><ul><li>We can install an additional CLI called the &quot;EB cli&quot; which makes working with Beanstalk from the CLI easier</li><li>Basic commands are: <ul><li><code>eb init</code>: Configure your project directory and the EB CLI</li><li><code>eb create</code>: Create your first env</li><li><code>eb status</code>: see the current status of your env</li><li><code>eb health</code>: view health info about the instances and the state of your overall env (use <code>--refresh</code> to update every 10s)</li><li><code>eb events</code>: see a list of events output by EB</li><li><code>eb logs</code>: pull logs from an instance in your env</li><li><code>eb open</code>: open your env&#39;s website in a browser</li><li><code>eb deploy</code>: once the env is running, deploy an update</li><li><code>eb config</code>: take a look at the configuration options available for your running env</li><li><code>eb terminate</code>: delete the environment</li></ul></li><li>It&#39;s helpful for your automated deployment pipelines!</li></ul><h2 id="elastic-beanstalk-deployment-process" tabindex="-1">Elastic Beanstalk Deployment Process <a class="header-anchor" href="#elastic-beanstalk-deployment-process" aria-label="Permalink to “Elastic Beanstalk Deployment Process”">​</a></h2><ul><li>Describe dependencies (<code>requirements.txt</code> for Python, <code>package.json</code> for Node.js)</li><li>Package code as zip, and describe dependencies <ul><li>Python: <code>requirements.txt</code></li><li>Node.js: <code>package.json</code></li></ul></li><li>Console: upload zip file (creates new app version), and then deploy</li><li>CLI: create new app version using CLI (uploads zip), and then deploy</li><li>Elastic Beanstalk will deploy the zip on each EC2 instance, resolve dependencies and start the application</li></ul><h2 id="beanstalk-lifecycle-policy" tabindex="-1">Beanstalk Lifecycle Policy <a class="header-anchor" href="#beanstalk-lifecycle-policy" aria-label="Permalink to “Beanstalk Lifecycle Policy”">​</a></h2><ul><li>Elastic Beanstalk can store at most 1000 application versions</li><li>If you don&#39;t remove old versions, you won&#39;t be able to deploy anymore</li><li>To phase out old application versions, use a lifecycle policy <ul><li>Based on time (old versions are removed)</li><li>Based on space (when you have too many versions)</li></ul></li><li>Versions that are currently used won&#39;t be deleted</li><li>Option not to delete the source bundle in S3 to prevent data loss</li></ul><h2 id="elastic-beanstalk-extensions" tabindex="-1">Elastic Beanstalk Extensions <a class="header-anchor" href="#elastic-beanstalk-extensions" aria-label="Permalink to “Elastic Beanstalk Extensions”">​</a></h2><ul><li>A zip file containing our code must be deployed to Elastic Beanstalk</li><li>All the parameters set in the UI can be configured with code using files</li><li>Requirements: <ul><li>in the .ebextensions/ directory in the root of source code</li><li>YAML / JSON format</li><li>.config extensions (example: logging.config)</li><li>Able to modify some default settings using: option_settings</li><li>Ability to add resources such as RDS, ElastiCache, DynamoDB, etc...</li></ul></li><li>Resources managed by .ebextensions get deleted if the environment goes away</li></ul><h2 id="elastic-beanstalk-under-the-hood" tabindex="-1">Elastic Beanstalk Under the Hood <a class="header-anchor" href="#elastic-beanstalk-under-the-hood" aria-label="Permalink to “Elastic Beanstalk Under the Hood”">​</a></h2><ul><li>Under the hood, Elastic Beanstalk relies on CloudFormation</li><li>CloudFormation is used to provision other AWS services (we&#39;ll see later)</li><li>Use case: you can define CloudFormation resources in your .ebextensions to provision ElastiCache, an S3 bucket, anything you want!</li><li>Let&#39;s have a sneak peak into it!</li></ul><h2 id="elastic-beanstalk-cloning" tabindex="-1">Elastic Beanstalk Cloning <a class="header-anchor" href="#elastic-beanstalk-cloning" aria-label="Permalink to “Elastic Beanstalk Cloning”">​</a></h2><ul><li>Clone an environment with the exact same configuration</li><li>Useful for deploying a &quot;test&quot; version of your application</li><li>All resources and configuration are preserved: <ul><li>Load Balancer type and configuration</li><li>RDS database type (but the data is not preserved)</li><li>Environment variables</li></ul></li><li>After cloning an environment, you can change settings</li></ul><h2 id="elastic-beanstalk-migration-load-balancer" tabindex="-1">Elastic Beanstalk Migration: Load Balancer <a class="header-anchor" href="#elastic-beanstalk-migration-load-balancer" aria-label="Permalink to “Elastic Beanstalk Migration: Load Balancer”">​</a></h2><ul><li>After creating an Elastic Beanstalk environment, you cannot change the Elastic Load Balancer type (only the configuration)</li><li>To migrate: <ol><li>create a new environment with the same configuration except LB (can&#39;t clone)</li><li>deploy your application onto the new environment</li><li>perform a CNAME swap or Route 53 update</li></ol></li></ul><h2 id="rds-with-elastic-beanstalk" tabindex="-1">RDS with Elastic Beanstalk <a class="header-anchor" href="#rds-with-elastic-beanstalk" aria-label="Permalink to “RDS with Elastic Beanstalk”">​</a></h2><ul><li>RDS can be provisioned with Beanstalk, which is great for dev / test</li><li>This is not great for prod as the database lifecycle is tied to the Beanstalk environment lifecycle</li><li>The best for prod is to separately create an RDS database and provide our EB application with the connection string</li></ul><h2 id="elastic-beanstalk-migration-decouple-rds" tabindex="-1">Elastic Beanstalk Migration: Decouple RDS <a class="header-anchor" href="#elastic-beanstalk-migration-decouple-rds" aria-label="Permalink to “Elastic Beanstalk Migration: Decouple RDS”">​</a></h2><ol><li>Create a snapshot of RDS DB (as a safeguard)</li><li>Go to the RDS console and protect the RDS database from deletion</li><li>Create a new Elastic Beanstalk environment, without RDS, point your application to existing RDS</li><li>perform a CNAME swap (blue/green) or Route 53 update, confirm working</li><li>Terminate the old environment (RDS won&#39;t be deleted)</li><li>Delete CloudFormation stack (in DELETE_FAILED state)</li></ol><h2 id="elastic-beanstalk-single-docker" tabindex="-1">Elastic Beanstalk - Single Docker <a class="header-anchor" href="#elastic-beanstalk-single-docker" aria-label="Permalink to “Elastic Beanstalk - Single Docker”">​</a></h2><ul><li>Run your application as a single docker container</li><li>Either provide: <ul><li>Dockerfile: Elastic Beanstalk will build and run the Docker container</li><li><code>Dockerrun.aws.json</code> (v1): Describe where <em>already built</em> Docker image is <ul><li>Image</li><li>Ports</li><li>Volumes</li><li>Logging</li><li>Etc...</li></ul></li></ul></li><li>Beanstalk in Single Docker Container does not use ECS</li></ul><h2 id="elastic-beanstalk-multi-docker-container" tabindex="-1">Elastic Beanstalk - Multi Docker Container <a class="header-anchor" href="#elastic-beanstalk-multi-docker-container" aria-label="Permalink to “Elastic Beanstalk - Multi Docker Container”">​</a></h2><ul><li>Multi Docker helps run multiple containers per EC2 instance in EB</li><li>This will create for you: <ul><li>ECS Cluster</li><li>EC2 instances, configured to use the ECS Cluster</li><li>Load Balancer (in high availability mode)</li><li>Task definitions and execution</li></ul></li><li>Requires a config <code>Dockerrun.aws.json</code> (v2) at the root of source code</li><li><code>Dockerrun.aws.json</code> is used to generate the ECS task definition</li><li>Your Docker images must be pre-built and stored in ECR for example</li></ul><h2 id="elastic-beanstalk-and-https" tabindex="-1">Elastic Beanstalk and HTTPS <a class="header-anchor" href="#elastic-beanstalk-and-https" aria-label="Permalink to “Elastic Beanstalk and HTTPS”">​</a></h2><ul><li>Beanstalk with HTTPS <ul><li>Idea: Load the SSL certificate onto the Load Balancer</li><li>Can be done from the Console (EB console, load balancer configuration)</li><li>Can be done from the code: <code>.ebextensions/securelistener-alb.config</code></li><li>SSL Certificate can be provisioned using ACM (AWS Certificate Manager) or CLI</li><li>Must configure a security group rule to allow incoming port 443 (HTTPS port)</li></ul></li><li>Beanstalk redirect HTTP to HTTPS <ul><li>Configure your instances to redirect HTTP to HTTPS: <a href="https://github.com/awsdocs/elastic-beanstalk-samples/tree/master/configuration-files/aws-provided/security-configuration/https-redirect" target="_blank" rel="noreferrer">Example configurations</a></li><li>OR configure the Application Load Balancer (ALB only) with a rule</li><li>Make sure health checks are not redirected (so they keep giving 200 OK)</li></ul></li></ul><h2 id="web-server-vs-worker-environment" tabindex="-1">Web Server vs Worker Environment <a class="header-anchor" href="#web-server-vs-worker-environment" aria-label="Permalink to “Web Server vs Worker Environment”">​</a></h2><ul><li>If your application performs tasks that are long to complete, offload these tasks to a dedicated worker environment</li><li>Decoupling your application into two tiers is common</li><li>Example: processing a video, generating a zip file, etc</li><li>You can define periodic tasks in a file <code>cron.yaml</code></li><li>Worker Environment: <ul><li>creates an ASG</li><li>creates a SQS Queue</li><li>Installs the Sqsd daemon on the EC2 instances</li><li>Creates CloudWatch Alarm to dynamically scale instances based on health</li></ul></li></ul><h2 id="elastic-beanstalk-custom-platform-advanced" tabindex="-1">Elastic Beanstalk - Custom Platform (Advanced) <a class="header-anchor" href="#elastic-beanstalk-custom-platform-advanced" aria-label="Permalink to “Elastic Beanstalk - Custom Platform (Advanced)”">​</a></h2><ul><li>Custom Platforms are very advanced, they allow to define from scratch: <ul><li>The Operating System (OS)</li><li>Additional Software</li><li>Scripts that Beanstalk runs on these platforms</li></ul></li><li>Use case: app language is incompatible with Beanstalk &amp; doesn&#39;t use Docker</li><li>To create your own platform: <ul><li>Define an AMI using <code>Platform.yaml</code> file</li><li>Build that platform using the Packer software (open source tool to create AMIs)</li></ul></li><li>Custom Platform vs Custom Image (AMI): <ul><li>Custom Image is to tweak an existing Beanstalk Platform (Python, Node.js, Java...)</li><li>Custom Platform is to create an entirely new Beanstalk Platform</li></ul></li></ul>`,53)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
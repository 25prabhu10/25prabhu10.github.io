import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"World Wide Web (WWW)","description":"A system of interlinked hypertext documents and resources, accessed via the internet","frontmatter":{"title":"World Wide Web (WWW)","description":"A system of interlinked hypertext documents and resources, accessed via the internet"},"headers":[],"relativePath":"Concepts/Web/World_Wide_Web.md","filePath":"Concepts/Web/World_Wide_Web.md","lastUpdated":1756574703000}`);var a={name:`Concepts/Web/World_Wide_Web.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="world-wide-web-www" tabindex="-1">World Wide Web (WWW) <a class="header-anchor" href="#world-wide-web-www" aria-label="Permalink to “World Wide Web (WWW)”">​</a></h1><p>The World Wide Web (WWW) or web is a system of interlinked hypertext documents and resources, accessed via the <a href="./Internet.html">internet</a></p><ul><li>It is but one part of the internet, though it&#39;s the most visible part</li></ul><p>Brief History:</p><ul><li><p>1989-91: The idea of the web (Sir Tim Berners-Lee, CERN)</p><ul><li>He published <a href="https://info.cern.ch/Proposal.html" target="_blank" rel="noreferrer">&quot;Information Management: A Proposal&quot;</a></li><li>He wrote <code>TCPServer.c</code> (initial port <code>2784</code>) and <code>WorldWideWen.app</code> (browser)</li></ul></li><li><p>1991: Line-mode browser (Nicola Pellow, CERN)</p></li><li><p>1992: ViolaWWW web browser (Pei Wei, University of California at Berkeley)</p></li><li><p>1993: NCSA Mosaic web browser (Marc Andreessen, Eric Bina)</p></li><li><p>1993: The <code>&lt;img&gt;</code> tag (WWW-Talk mailing list) (Marc Andreessen)</p></li><li><p>1994: <a href="https://www.w3.org/" target="_blank" rel="noreferrer">W3C</a> organization was founded (MIT/CERN/DARPA/EC)</p></li><li><p>1994: Netscape Navigator 1.0 (Marc Andreessen, James H. Clark)</p></li><li><p>1995: Internet Explorer 1.0 (Microsoft)</p></li><li><p>1995: Personal Home Page (PHP) Tools, 1.0 (Rasmus Lerdorf)</p></li><li><p>1996: JavaScript (Brendan Eich), CSS (Håkon Wium Lie), Microsoft FrontPage, Macromedia Flash</p></li><li><p>1998: Accessibility (Section 508 update, WAI, WCAG)</p><ul><li>2008: WCAG 2.0</li><li>2018: WCAG 2.1</li></ul></li><li><p>2000-02: ASP.NET 1.0 (Scott Guthrie, Mark Anders)</p></li><li><p>2004: Ruby on Rails (David Heinemeier Hansson (DHH))</p></li><li><p>2005-06: JavaScript ascend - Web 2.0</p><ul><li>2005: <a href="https://designftw.mit.edu/lectures/apis/ajax_adaptive_path.pdf" target="_blank" rel="noreferrer">AJAX: A new approach to web applications</a> by by Jesse James Garrett</li><li>2006: jQuery (John Resig)</li></ul></li><li><p>2007: Browser dev tools (Joe Hewitt, Firebug browser extension)</p></li><li><p>2009: Node.js (Ryan Dahl)</p></li><li><p>2010: SPA frameworks</p></li><li><p>2012-15:</p><ul><li>2012: TypeScript</li><li>2013: Webpack</li><li>2014: Kubernetes</li></ul></li><li><p>2017: WebAssembly (Mozilla, Google, Microsoft, Webkit project)</p></li></ul><h2 id="rendering-web-page" tabindex="-1">Rendering Web Page <a class="header-anchor" href="#rendering-web-page" aria-label="Permalink to “Rendering Web Page”">​</a></h2><p>The process of <strong>page rendering</strong> may include many steps. The broadest definition includes all the steps from the <strong>user opening a site in the browser</strong> (by clicking on the link or typing it manually in the URL address bar) to the <strong>full page shown</strong></p><ul><li><strong><a href="./HTTP.html#what-happens-when-you-browse-the-web">What happens when you browse the web?</a></strong></li></ul><h3 id="rendering-patterns-for-web-apps" tabindex="-1">Rendering Patterns for Web Apps <a class="header-anchor" href="#rendering-patterns-for-web-apps" aria-label="Permalink to “Rendering Patterns for Web Apps”">​</a></h3><p>Sites have evolved into complex web applications with rich features; a one-size-fits-all approach is no longer sufficient</p><ul><li>Each site or application has different goals, requiring different rendering methods</li><li>While some approaches are more adaptable than others, a universal solution isn&#39;t effective in most cases</li></ul><p>Determine to whom the application is being made for:</p><table tabindex="0"><thead><tr><th></th><th>B2B (Profit center)</th><th>B2C (Profit center)</th><th>Internal Product (Cost center)</th></tr></thead><tbody><tr><td>Important</td><td>Smooth UI</td><td>Fast initial loading</td><td>Easiness and cost of development and maintainging</td></tr><tr><td></td><td></td><td>SEO</td><td></td></tr><tr><td></td><td></td><td>Performance on low-power devices</td><td></td></tr><tr><td></td><td></td><td>Smooth UI</td><td></td></tr><tr><td>Less Important</td><td>Fast intial loading</td><td>Easiness and cost of development and maintainging</td><td>Smooth UI</td></tr><tr><td></td><td>Performance on low-power devices</td><td></td><td>Fast initial loading</td></tr><tr><td></td><td>Easiness and cost of development and maintainging</td><td></td><td></td></tr><tr><td>Not Important</td><td>SEO</td><td></td><td>SEO</td></tr><tr><td></td><td></td><td></td><td>Performance on low-power devices</td></tr></tbody></table><h3 id="static-website" tabindex="-1">Static Website <a class="header-anchor" href="#static-website" aria-label="Permalink to “Static Website”">​</a></h3><ul><li>Serve static HTML, CSS &amp; JavaScript files</li><li>Upload them into a storage bucket or CDN</li><li>Point Domain name to the storage location</li><li>Static Site Generators (SSG): Hugo, Jekyll, 11ty</li><li>Not useful for dynamic content</li></ul><h3 id="multi-page-application-mpa" tabindex="-1">Multi-Page Application (MPA) <a class="header-anchor" href="#multi-page-application-mpa" aria-label="Permalink to “Multi-Page Application (MPA)”">​</a></h3><ul><li>Ruby on rails</li><li>Django</li><li>Larvel</li><li>CMS: Wordpress</li><li>Not app like</li></ul><h3 id="single-page-application-spa" tabindex="-1">Single-Page Application (SPA) <a class="header-anchor" href="#single-page-application-spa" aria-label="Permalink to “Single-Page Application (SPA)”">​</a></h3><p>In a standard React/Angular/Vue application, the browser receives an empty HTML shell from the server along with the JavaScript instructions to construct the UI. This is called client-side rendering because the initial rendering work happens on the user&#39;s device</p><p>Client Side Rendering (CSR)</p><ul><li>React.js</li><li>Angular</li><li>Vue</li><li>Huge bundle size</li></ul><h3 id="server-side-rendering-ssr" tabindex="-1">Server-Side Rendering (SSR) <a class="header-anchor" href="#server-side-rendering-ssr" aria-label="Permalink to “Server-Side Rendering (SSR)”">​</a></h3><p>In server-side rendering, the HTML of the page is generated on a server for each request. The generated HTML, JSON data, and JavaScript instructions to make the page interactive are then sent to the client</p><ul><li>On the client, the HTML is used to show a fast non-interactive page, while React uses the JSON data and JavaScript instructions to make components interactive (for example, attaching event handlers to a button). This process is called <strong>hydration</strong></li></ul><p>Applications may be partially pre-rendered on the server, its called SSR with (Re)hydration</p><p>Isomorphic, Universal, or SSR (All the same thing!)</p><ul><li>Isomorphic application, runs both server and client. For each request it runs a virtual app, that generates the static pages</li></ul><p>MPA + SPA = SSR</p><ul><li>Metaframework: Next.js, Nuxt, Svelte-Kit</li><li>Servers are required</li></ul><p>Advantages:</p><ul><li><p>Improved SEO</p></li><li><p>Faster time-to-content (faster load times):</p><ul><li>Server-rendered HTML doesn&#39;t need to wait until all JavaScript has been downloaded and executed to be displayed, so the user will see a fully-rendered page sooner</li><li>For initial visit, data fetching is done on the server side, which likely has a faster connection to your database than the client</li><li>Improved Core Web Vitals metrics</li><li>Better initial User Experience</li></ul></li><li><p>Time-to-Interactive is equal to First-Contentful-Paint</p><ul><li>We do not need to execute the JS code to make the page interactive because the page is fully pre-rendered on the server side</li></ul></li><li><p>Additional budget for client-side JavaScript, as there is JS needed to render the page</p></li></ul><p>Disadvantages:</p><ul><li><p>Slow Time-to-First-Byte: Since the rendering is happening on the server side, the response from the server may be delayed because of:</p><ul><li>Multiple simultaneous users cause excess load on the server</li><li>Slow network</li><li>Server code not optimised</li></ul></li><li><p>Full page reloads</p></li><li><p>Increased server load</p></li><li><p>Development constraints (like browser APIs are unavailable on the server)</p></li><li><p>Increased mental overhead and more complex server configuration</p></li></ul><h4 id="streaming-ssr" tabindex="-1">Streaming SSR <a class="header-anchor" href="#streaming-ssr" aria-label="Permalink to “Streaming SSR”">​</a></h4><p>Streaming implies chunks of HTML are streamed from the server to the client as generated</p><ul><li>As the client starts receiving &quot;bytes&quot; of HTML earlier, even for large pages, the <strong>TTFB</strong> is reduced and relatively constant</li><li>All major browsers start parsing and rendering streamed content or the partial response earlier</li><li>As the rendering is progressive, it results in a <strong>fast FCP</strong></li></ul><h3 id="static-site-generation-ssg" tabindex="-1">Static Site Generation (SSG) <a class="header-anchor" href="#static-site-generation-ssg" aria-label="Permalink to “Static Site Generation (SSG)”">​</a></h3><p>In Static Site Generation, the HTML is generated on the server, but unlike server-side rendering, there is no server at runtime. Instead, content is generated once, at build time, when the application is deployed, and the HTML is stored in a CDN and re-used for each request</p><ul><li>Jamstack site</li></ul><h3 id="incremental-static-regeneration" tabindex="-1">Incremental Static Regeneration <a class="header-anchor" href="#incremental-static-regeneration" aria-label="Permalink to “Incremental Static Regeneration”">​</a></h3><ul><li>Complex to Self-host</li></ul><h3 id="partial-hydration" tabindex="-1">Partial Hydration <a class="header-anchor" href="#partial-hydration" aria-label="Permalink to “Partial Hydration”">​</a></h3><ul><li>Code Splitting</li></ul><h3 id="islands" tabindex="-1">Islands <a class="header-anchor" href="#islands" aria-label="Permalink to “Islands”">​</a></h3><ul><li>Astro</li></ul><h3 id="resumability" tabindex="-1">Resumability <a class="header-anchor" href="#resumability" aria-label="Permalink to “Resumability”">​</a></h3><ul><li>Qwik</li></ul><h2 id="web-technologies" tabindex="-1">Web Technologies <a class="header-anchor" href="#web-technologies" aria-label="Permalink to “Web Technologies”">​</a></h2><h3 id="web-standards" tabindex="-1">Web Standards <a class="header-anchor" href="#web-standards" aria-label="Permalink to “Web Standards”">​</a></h3><p>Web standards are guidelines and specifications that define best practices for building and maintaining websites and web applications</p><ul><li>They ensure that web content is accessible, usable, and interoperable across different browsers and devices</li><li>Web standards are developed and maintained by organizations such as the World Wide Web Consortium (W3C) and the Internet Engineering Task Force (IETF)</li></ul><p>Key Web Standards:</p><ul><li><strong>HTML (HyperText Markup Language)</strong>: Defines the structure and content of web pages</li><li><strong>CSS (Cascading Style Sheets)</strong>: Controls the presentation and layout of web pages</li><li><strong>JavaScript</strong>: Enables interactive and dynamic behavior on web pages</li><li><strong>HTTP (Hypertext Transfer Protocol)</strong>: Defines how web browsers and servers communicate</li><li><strong>URL (Uniform Resource Locator)</strong>: Specifies the address of web resources</li><li><strong>Web APIs (Application Programming Interfaces)</strong>: Provide access to browser functionality and services</li><li><strong>WebRTC (Real-Time Communication)</strong>: Enables real-time communication between browsers</li><li><strong>WebAssembly</strong>: A binary instruction format for a stack-based virtual machine that runs in web browsers</li><li><strong>Web Accessibility</strong>: Ensures that web content is accessible to people with disabilities</li><li><strong>Web Security</strong>: Protects web applications and users from security threats</li><li><strong>Web Performance</strong>: Optimizes the speed and efficiency of web applications</li></ul><h2 id="real-time-communication-rtc" tabindex="-1">Real-Time Communication (RTC) <a class="header-anchor" href="#real-time-communication-rtc" aria-label="Permalink to “Real-Time Communication (RTC)”">​</a></h2><p>Real-time communication (RTC) refers to the transmission of data between two or more endpoints in real-time</p><ul><li>It is the near simultaneous exchange of information over any type of telecommunications service from the sender to the receiver in a connection with negligible latency (e.g., VoIP, instant messaging, video conferencing, online gaming)</li></ul><h3 id="webrtc" tabindex="-1">WebRTC <a class="header-anchor" href="#webrtc" aria-label="Permalink to “WebRTC”">​</a></h3><p>Real-Time Communication for the Web (WebRTC):</p><ul><li>With WebRTC, you can add real-time communication capabilities to your application that works on top of an open standard</li><li>It supports video, voice, and generic data to be sent between peers, allowing developers to build powerful communication solutions</li><li>The technology is available on all modern browsers and platforms</li></ul><h2 id="web-design" tabindex="-1">Web Design <a class="header-anchor" href="#web-design" aria-label="Permalink to “Web Design”">​</a></h2><p>What is web design?</p><ul><li><p>Web Design:</p><ul><li><p>Appearance</p></li><li><p>Forward-facing functionality</p></li><li><p>Web graphic design</p></li><li><p>Interface design</p></li><li><p>Authoring</p></li><li><p>User experience design (UX)</p></li><li><p>SEO</p></li></ul></li><li><p>Web Development:</p><ul><li>Behind the scenes</li><li>Code</li><li>Content Strategy</li><li>Information architecture</li><li>Front-end and Back-end development</li><li>Infrastructure</li><li>system architecture</li></ul></li><li><p>Web design can be taken as whole refereeing to web design and web development</p></li><li><p>The goal or purpose of web design is to create <strong>informational user experiences</strong></p></li></ul><p>Web design process starts from:</p><ol><li>Per-process</li><li>Planning Content Strategy</li><li>Pre-build Testing</li><li>Content, Design, Development, and Build</li><li>Post-build Testing</li><li>Optimization (Content, Design, and Development)</li><li>Launch and Reset</li></ol><h3 id="site-map" tabindex="-1">Site Map <a class="header-anchor" href="#site-map" aria-label="Permalink to “Site Map”">​</a></h3><p>A site map is a visual or textual model of a website&#39;s content that allows users and search engines to navigate the site&#39;s structure and find information quickly</p><p><em>Example:</em></p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>Home</span></span>
<span class="line"><span>├── About Us</span></span>
<span class="line"><span>│   ├── Our Team</span></span>
<span class="line"><span>│   └── Our Story</span></span>
<span class="line"><span>├── Services</span></span>
<span class="line"><span>│   ├── Web Development</span></span>
<span class="line"><span>│   ├── Mobile App Development</span></span>
<span class="line"><span>│   └── SEO Services</span></span>
<span class="line"><span>├── Blog</span></span>
<span class="line"><span>│   ├── Latest Posts</span></span>
<span class="line"><span>│   └── Categories</span></span>
<span class="line"><span>└── Contact Us</span></span>
<span class="line"><span>    ├── Contact Form</span></span>
<span class="line"><span>    └── Location</span></span></code></pre></div><h3 id="wireframe" tabindex="-1">Wireframe <a class="header-anchor" href="#wireframe" aria-label="Permalink to “Wireframe”">​</a></h3><p>A wireframe is a visual representation of a website&#39;s layout that outlines the structure and content of each page without design elements such as colors, images, or typography</p><ul><li>It helps designers and developers plan the site&#39;s layout, navigation, and functionality before adding visual design elements</li></ul><p><em>Example:</em></p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>+------------------------------------------------+</span></span>
<span class="line"><span>|                    Header                      |</span></span>
<span class="line"><span>|  Logo      Home  About Us  Services  Contact   |</span></span>
<span class="line"><span>+------------------------------------------------+</span></span>
<span class="line"><span>|                  Hero Section                  |</span></span>
<span class="line"><span>|  Headline                                      |</span></span>
<span class="line"><span>|  Subheadline                                   |</span></span>
<span class="line"><span>|  [Call to Action Button]                       |</span></span>
<span class="line"><span>+------------------------------------------------+</span></span>
<span class="line"><span>|                About Us Section                |</span></span>
<span class="line"><span>|  Brief Description                             |</span></span>
<span class="line"><span>|  [Link to About Us Page]                       |</span></span>
<span class="line"><span>+------------------------------------------------+</span></span>
<span class="line"><span>|                Services Section                |</span></span>
<span class="line"><span>|  Service 1 | Service 2 | Service 3             |</span></span>
<span class="line"><span>|  Web Dev   | Mobile App | SEO                  |</span></span>
<span class="line"><span>+------------------------------------------------+</span></span>
<span class="line"><span>|                  Blog Section                  |</span></span>
<span class="line"><span>|  Featured Blog Post                            |</span></span>
<span class="line"><span>|  [Link to Blog Page]                           |</span></span>
<span class="line"><span>+------------------------------------------------+</span></span>
<span class="line"><span>|                    Footer                      |</span></span>
<span class="line"><span>|  Social Media Links | Contact Info | Copyright |</span></span>
<span class="line"><span>+------------------------------------------------+</span></span></code></pre></div><h3 id="seo" tabindex="-1">SEO <a class="header-anchor" href="#seo" aria-label="Permalink to “SEO”">​</a></h3><p>Search Engine Optimization (SEO) is the practice of increasing the quantity and quality of traffic to your website through organic search engine results</p><ul><li><p><strong>On-Page SEO</strong>: Refers to the practice of optimizing web pages to improve a website&#39;s search engine rankings and earn organic traffic</p><ul><li>Includes optimizing content, HTML source code, and images</li><li>Focuses on improving the relevance and quality of the content on the page</li><li>Page title, meta description, headings, URL structure, alt text for images, internal linking, and keyword optimization</li></ul></li><li><p><strong>Off-Page SEO</strong>: Refers to actions taken outside of your own website to impact your rankings within search engine results pages (SERPs)</p></li><li><p><strong>Technical SEO</strong>: Refers to the process of optimizing your website for the crawling and indexing phase</p></li><li><p><strong>Local SEO</strong>: Refers to the process of optimizing your online presence to attract more business from relevant local searches</p></li><li><p><strong>Mobile SEO</strong>: Refers to the practice of optimizing your website for users on smartphones and tablets</p></li></ul><p>The <a href="#head"><code>&lt;head&gt;</code></a> element is where you can add metadata that helps search engines understand the content of your page</p><h2 id="key-metrics" tabindex="-1">Key Metrics <a class="header-anchor" href="#key-metrics" aria-label="Permalink to “Key Metrics”">​</a></h2><p>Key metrics for web pages are essential for understanding and improving website performance</p><ul><li><a href="./../../Languages/HTML/Performance_Metrics.html">Performance Metrics</a> can help in deciding the rendering pattern</li></ul><p>Here are some of the most important metrics:</p><ol><li><p><strong>Traffic Metrics</strong>:</p><ul><li><strong>Page Views</strong>: The total number of times a page has been viewed</li><li><strong>Unique Visitors</strong>: The number of distinct individuals visiting the site during a given period</li><li><strong>Sessions</strong>: A group of interactions by a user within a specific timeframe</li></ul></li><li><p><strong>Engagement Metrics</strong>:</p><ul><li><strong>Bounce Rate</strong>: The percentage of visitors who leave the site after viewing only one page</li><li><strong>Average Session Duration</strong>: The average time a user spends on the site</li><li><strong>Pages per Session</strong>: The average number of pages viewed during a session</li><li><strong>Time on Page</strong>: The average time spent on a particular page</li></ul></li><li><p><strong>Acquisition Metrics</strong>:</p><ul><li><strong>Traffic Sources</strong>: Where visitors are coming from (e.g., search engines, direct traffic, social media, referral sites)</li><li><strong>New vs. Returning Visitors</strong>: The ratio of first-time visitors to returning visitors</li></ul></li><li><p><strong>Conversion Metrics</strong>:</p><ul><li><strong>Conversion Rate</strong>: The percentage of visitors who complete a desired action (e.g., making a purchase, signing up for a newsletter)</li><li><strong>Goal Completions</strong>: The number of times visitors complete a specific goal (e.g., form submissions, downloads)</li><li><strong>Sales and Revenue</strong>: Total sales and revenue generated from the website</li></ul></li><li><p><strong>SEO Metrics</strong>:</p><ul><li><strong>Organic Search Traffic</strong>: The number of visitors coming from search engine results</li><li><strong>Keyword Rankings</strong>: The position of the website in search engine results for specific keywords</li><li><strong>Backlinks</strong>: The number and quality of external links pointing to the website</li></ul></li><li><p><strong>Technical Performance Metrics</strong>:</p><ul><li><strong>Page Load Time</strong>: The time it takes for a page to fully load</li><li><strong>Mobile Responsiveness</strong>: How well the website performs on mobile devices</li><li><strong>Site Uptime</strong>: The percentage of time the website is operational and accessible</li></ul></li><li><p><strong>Content Metrics</strong>:</p><ul><li><strong>Top Landing Pages</strong>: Pages through which visitors most often enter the site</li><li><strong>Top Exit Pages</strong>: Pages from which visitors most often leave the site</li><li><strong>Popular Content</strong>: Content that receives the most views and engagement</li></ul></li><li><p><strong>User Behaviour Metrics</strong>:</p><ul><li><strong>Click-Through Rate (CTR)</strong>: The percentage of users who click on a specific link out of the total users who view a page or ad</li><li><strong>Scroll Depth</strong>: How far down a page visitors scroll</li></ul></li><li><p><strong>Customer Satisfaction Metrics</strong>:</p><ul><li><strong>Net Promoter Score (NPS)</strong>: A measure of customer loyalty and satisfaction</li><li><strong>Customer Reviews and Ratings</strong>: Feedback and ratings left by users</li></ul></li></ol><p>Monitoring these metrics can help website owners and digital marketers optimize their sites for better user experience, higher engagement, and improved conversion rates</p><h2 id="web-crawlers" tabindex="-1">Web Crawlers <a class="header-anchor" href="#web-crawlers" aria-label="Permalink to “Web Crawlers”">​</a></h2><p>Web crawlers, also known as web spiders, web robots, or simply bots, are automated programs that systematically browse the World Wide Web to index and collect information about web pages</p><ul><li>They are essential tools for search engines, such as Google, Bing, and Yahoo, to build and update their indexes, which enable efficient and relevant search results</li></ul><p>Common Web Crawlers:</p><ul><li>Googlebot: Used by Google, one of the most well-known and advanced web crawlers</li><li>Bingbot: Microsoft&#39;s web crawler for the Bing search engine</li><li>Slurp Bot: Yahoo&#39;s web crawler</li><li>DuckDuckBot: The web crawler for the DuckDuckGo search engine</li></ul><h3 id="functions-of-web-crawlers" tabindex="-1">Functions of Web Crawlers <a class="header-anchor" href="#functions-of-web-crawlers" aria-label="Permalink to “Functions of Web Crawlers”">​</a></h3><ul><li>Indexing Content: Crawlers scan web pages to index their content, which helps search engines retrieve and display relevant results for users&#39; queries</li><li>Link Discovery: They follow hyperlinks on web pages to discover new content and sites</li><li>Content Updates: Crawlers periodically revisit websites to check for updates or changes, ensuring that the index remains current</li><li>Data Collection: Some crawlers collect data for specific purposes, such as market research, monitoring web compliance, or content aggregation</li></ul><h3 id="how-web-crawlers-work" tabindex="-1">How Web Crawlers Work <a class="header-anchor" href="#how-web-crawlers-work" aria-label="Permalink to “How Web Crawlers Work”">​</a></h3><ol><li>Starting Point: Crawlers begin with a list of URLs, often provided by a seed list</li><li>Fetching Pages: They fetch the content of the web pages at these URLs</li><li>Parsing Pages: The content is parsed to extract useful information, such as keywords, links, and metadata</li><li>Following Links: Crawlers follow the links found on the fetched pages, adding new URLs to their list of pages to visit</li><li>Storing Data: The extracted data is stored in a database, which search engines use to serve search results</li></ol><h3 id="ethical-and-technical-considerations" tabindex="-1">Ethical and Technical Considerations <a class="header-anchor" href="#ethical-and-technical-considerations" aria-label="Permalink to “Ethical and Technical Considerations”">​</a></h3><ul><li><p><strong><a href="https://metacpan.org/pod/WWW::RobotRules" target="_blank" rel="noreferrer">Robots.txt</a></strong>: Websites can control the behaviour of web crawlers through the <code>robots.txt</code> file, which specifies which parts of the site should not be crawled</p></li><li><p><strong>Crawl Rate</strong>: To prevent overloading servers, well-behaved crawlers limit their request rate</p></li><li><p><strong>Privacy</strong>: Crawlers must respect privacy and ethical guidelines, avoiding sensitive or personal information unless explicitly allowed</p></li><li><p>CSR is bad for SEO, as web crawlers didn&#39;t execute JS code they are faced with a blank page from which they cannot extract too much SEO related information</p></li><li><p>Many modern web crawlers:</p><ul><li>Can execute JS code</li><li>Have JS budget. If your JS bundle is too big, they may not execute or complete it. As a result, your web page may not look like you want it to look</li></ul></li><li><p>Google revealed some information on Google I/O:</p><ul><li>The first wave requests source code, crawls and indexes any present HTML and CSS, add any present links to the crawl queue, and downloads page response codes</li><li>The second wave can occur a few hours to even a few weeks later; Google returns to the page when additional resources are available to render fully and index the JS-generated content</li></ul></li></ul>`,94)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
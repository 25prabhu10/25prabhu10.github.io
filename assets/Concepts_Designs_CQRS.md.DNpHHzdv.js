import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"CQRS","description":"Command and Query Responsibility Segregation (CQRS)","frontmatter":{"title":"CQRS","description":"Command and Query Responsibility Segregation (CQRS)"},"headers":[],"relativePath":"Concepts/Designs/CQRS.md","filePath":"Concepts/Designs/CQRS.md","lastUpdated":1756574703000}`);var a={name:`Concepts/Designs/CQRS.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="cqrs" tabindex="-1">CQRS <a class="header-anchor" href="#cqrs" aria-label="Permalink to “CQRS”">​</a></h1><p>Command and Query Responsibility Segregation (CQRS): a pattern that separates read and update operations for a data store. Implementing CQRS in your application can maximize its performance, scalability, and security.</p><p>The flexibility created by migrating to CQRS allows a system to better evolve over time and prevents update commands from causing merge conflicts at the domain level.</p><ul><li><code>MediatR</code> package</li><li>Create a folder called <code>Queries</code></li><li>There add a class that gets item: Use <code>records</code></li></ul><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> GetTodoById</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // Query / Command</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // All the data we need to execute</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> record</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Query</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">):</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Response</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // Handler</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // All the business logic to execute. Returns a response</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Handler</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> IRequestHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Query</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Response</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> readonly</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Repository</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> _repository</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Handler</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Repository</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> repository</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      _repository</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> repository</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Response</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;">Query</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> CancellationToken</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> cancellationToken</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">      // All the business logic</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">      var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> todo</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> _repository</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Todos</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">FirstOrDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Id</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // Response</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // The data we want to return</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> record</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Response</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Completed</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p>References:</p><ul><li><a href="https://web.archive.org/web/20190211113420/http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/" target="_blank" rel="noreferrer">CQRS, Task Based UIs, Event Sourcing agh!</a></li><li><a href="https://web.archive.org/web/20160729165044/https://goodenoughsoftware.net/2012/03/02/cqrs/" target="_blank" rel="noreferrer">Greg Young&#39;s Blog</a>: CQRS <ul><li><p>CQRS is not a silver bullet</p></li><li><p>CQRS is not a top level architecture</p></li><li><p>CQRS is not new</p></li><li><p>CQRS is not shiny</p></li><li><p>CQRS will not make your jump shot any better</p></li><li><p>CQRS is not intrinsically linked to DDD</p></li><li><p>CQRS is not Event Sourcing</p></li><li><p>CQRS does not require a message bus</p></li><li><p>CQRS is not a guiding principle / CQS is</p></li><li><p>CQRS is not a good wife</p></li><li><p>CQRS is learnable in 5 minutes</p></li><li><p>CQRS is a small tactical pattern</p></li><li><p>CQRS can open many doors.</p></li><li><p>And yes you can support <a href="https://datatracker.ietf.org/doc/html/rfc2549" target="_blank" rel="noreferrer">RFC 2549</a> using CQRS</p></li></ul></li></ul><p>Checkout this <a href="https://www.youtube.com/channel/UC3RKA4vunFAfrfxiJhPEplw/videos" target="_blank" rel="noreferrer">YouTube channel</a></p><h2 id="mediator" tabindex="-1">Mediator <a class="header-anchor" href="#mediator" aria-label="Permalink to “Mediator”">​</a></h2><p>The Mediator design pattern defines an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently.</p><h2 id="repository-pattern-generic-repository-pattern-and-unit-of-work-pattern" tabindex="-1">Repository pattern, Generic Repository Pattern, and Unit of work pattern <a class="header-anchor" href="#repository-pattern-generic-repository-pattern-and-unit-of-work-pattern" aria-label="Permalink to “Repository pattern, Generic Repository Pattern, and Unit of work pattern”">​</a></h2>`,11)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"Programming Languages","description":"Programming Languages","frontmatter":{"title":"Programming Languages","description":"Programming Languages","date":"2025-02-25T00:00:00.000Z"},"headers":[],"relativePath":"Languages/Programming-Languages.md","filePath":"Languages/Programming-Languages.md","lastUpdated":1756574703000}`);var a={name:`Languages/Programming-Languages.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="programming-languages" tabindex="-1">Programming Languages <a class="header-anchor" href="#programming-languages" aria-label="Permalink to “Programming Languages”">​</a></h1><h2 id="list-of-programming-languages" tabindex="-1">List of Programming Languages <a class="header-anchor" href="#list-of-programming-languages" aria-label="Permalink to “List of Programming Languages”">​</a></h2><table tabindex="0"><thead><tr><th>Language</th><th>Application Area</th><th>Paradigm</th><th>Year</th><th>Creator</th><th>Origin of Name</th></tr></thead><tbody><tr><td>FORTRAN</td><td>Scientific and Engineering Applications</td><td>Procedural</td><td>1957</td><td>John W. Backus at IBM</td><td>FORmula TRAnslating System</td></tr><tr><td>LISP</td><td>Artificial Intelligence</td><td>Functional</td><td>1958</td><td>John McCarthy (designed), Steve Russell (implemented)</td><td>LISt Processing</td></tr><tr><td>COBOL</td><td>Business data processing</td><td>Procedural</td><td>1959</td><td>The CODASYL Committee</td><td>Common Business-Oriented Language</td></tr><tr><td>Pascal</td><td>Teaching Programming</td><td>Procedural</td><td>1970</td><td>Niklaus Wirth, Kathleen Jensen</td><td>Blaise Pascal</td></tr><tr><td>C</td><td>System Programming</td><td>Procedural</td><td>1972</td><td>Dennis Ritchie</td><td>predecessor language was named B</td></tr><tr><td>Prolog</td><td>Artificial Intelligence</td><td>Logic</td><td>1972</td><td>Alain Colmerauer</td><td>PROgrammation en LOgique (French)</td></tr><tr><td>SQL</td><td>Database Management</td><td>Declarative</td><td>1974</td><td>Donald D. Chamberlin, Raymond F. Boyce at IBM</td><td>Structured Query Language</td></tr><tr><td>Bourne Shell (sh)</td><td>System Administration</td><td>Procedural</td><td>1977</td><td>Stephen R. Bourne</td><td>Stephen R. Bourne</td></tr><tr><td>Ada</td><td>Real-time systems</td><td>Multi-paradigm</td><td>1980</td><td>Jean Ichbiah at CII Honeywell Bull</td><td>Ada Lovelace</td></tr><tr><td>Smalltalk</td><td>Object-Oriented Programming (GUI)</td><td>Object-Oriented</td><td>1980</td><td>Adele Goldberg, Dan Ingalls, Alan Kay at Xerox PARC</td><td>Objects “talk” to one another via messages</td></tr><tr><td>MATLAB</td><td>Numerical Computing</td><td>Multi-paradigm</td><td>1984</td><td>Cleve Moler</td><td>MATrix LABoratory</td></tr><tr><td>LaTeX</td><td>Typesetting</td><td>Macro</td><td>1985</td><td>Leslie Lamport</td><td>Lamport&#39;s TeX</td></tr><tr><td>C++</td><td>System Programming, Game Development</td><td>Multi-paradigm</td><td>1985</td><td>Bjarne Stroustrup</td><td>Incremental modification of C (++ is the C increment operator)</td></tr><tr><td>Perl</td><td>System Administration, Web Development</td><td>Multi-paradigm</td><td>1987</td><td>Larry Wall</td><td>Practical Extraction and Reporting Language</td></tr><tr><td>Haskell</td><td>Functional Programming</td><td>Functional</td><td>1990</td><td>Simon Peyton Jones</td><td>Haskell Curry, a logician</td></tr><tr><td>Python</td><td>Web Development, Data Science, Machine Learning</td><td>Multi-paradigm</td><td>1991</td><td>Guido van Rossum</td><td>Monty Python comedy group</td></tr><tr><td>Lua</td><td>Game Development, Web Development</td><td>Multi-paradigm</td><td>1993</td><td>Roberto Ierusalimschy, Luiz Henrique de Figueiredo, Waldemar Celes</td><td>Moon in Portuguese</td></tr><tr><td>Java</td><td>Web Development, Android Development</td><td>Object-Oriented</td><td>1995</td><td>James Gosling at Sun Microsystems</td><td>Named after the coffee</td></tr><tr><td>JavaScript</td><td>Web Development, Game Development</td><td>Multi-paradigm</td><td>1995</td><td>Brendan Eich at Netscape</td><td>JavaScript is not related to Java</td></tr><tr><td>PHP</td><td>Web Development</td><td>Multi-paradigm</td><td>1995</td><td>Rasmus Lerdorf</td><td>Personal Home Page (PHP: Hypertext Preprocessor)</td></tr><tr><td>Ruby</td><td>Web Development</td><td>Multi-paradigm</td><td>1995</td><td>Yukihiro Matsumoto</td><td>Ruby is a gemstone</td></tr><tr><td>CSS</td><td>Web Development</td><td>Declarative</td><td>1996</td><td>Håkon Wium Lie, Bert Bos</td><td>Cascading Style Sheets</td></tr><tr><td>C#</td><td>Web Development, Game Development</td><td>Multi-paradigm</td><td>2000</td><td>Anders Hejlsberg, Microsoft (ECMA)</td><td>Pronounced as C sharp</td></tr><tr><td>Go</td><td>System Programming, Web Development</td><td>Multi-paradigm</td><td>2009</td><td>Robert Griesemer, Rob Pike, Ken Thompson at Google</td><td>Go is a common English word</td></tr><tr><td>Rust</td><td>System Programming</td><td>Multi-paradigm</td><td>2010</td><td>Graydon Hoare at Mozilla</td><td>Rust is a fungus</td></tr><tr><td>Kotlin</td><td>Android Development</td><td>Multi-paradigm</td><td>2011</td><td>JetBrains</td><td>Named after Kotlin Island</td></tr><tr><td>TypeScript</td><td>Web Development</td><td>Multi-paradigm</td><td>2012</td><td>Anders Hejlsberg, Microsoft</td><td>TypeScript is a superset of JavaScript</td></tr><tr><td>Zig</td><td>System Programming</td><td>Multi-paradigm</td><td>2016</td><td>Andrew Kelley</td><td>Zig is a programming language</td></tr></tbody></table><h2 id="programming-language-paradigms" tabindex="-1">Programming Language Paradigms <a class="header-anchor" href="#programming-language-paradigms" aria-label="Permalink to “Programming Language Paradigms”">​</a></h2><p>Read more about <a href="./../Concepts/Designs/Programming_Paradigms/">Programming Paradigms</a></p><h2 id="source-files" tabindex="-1">Source Files <a class="header-anchor" href="#source-files" aria-label="Permalink to “Source Files”">​</a></h2><p>A source file is a file containing code, written in a particular programming language, that is used to create a program. Source files are typically text files, containing text that is readable by humans. Source files are usually stored on disk, and are read by the compiler or interpreter to create the program</p><h2 id="compiler" tabindex="-1">Compiler <a class="header-anchor" href="#compiler" aria-label="Permalink to “Compiler”">​</a></h2><p>A compiler is a program that translates source code into object code. The compiler reads the source file, and generates an object file containing machine code. The compiler also performs other tasks, such as syntax checking, optimization, and code generation</p><h2 id="interpreter" tabindex="-1">Interpreter <a class="header-anchor" href="#interpreter" aria-label="Permalink to “Interpreter”">​</a></h2><p>An interpreter is a program that reads source code and executes it directly. The interpreter reads the source file, and executes the code line by line. The interpreter also performs other tasks, such as syntax checking, optimization, and code generation</p><h2 id="object-files" tabindex="-1">Object Files <a class="header-anchor" href="#object-files" aria-label="Permalink to “Object Files”">​</a></h2><p>An object file is a file containing machine code, created by the compiler from the source file. Object files are typically binary files, containing machine code that is not readable by humans. Object files are usually stored on disk, and are read by the linker to create the program</p><h2 id="linker" tabindex="-1">Linker <a class="header-anchor" href="#linker" aria-label="Permalink to “Linker”">​</a></h2><p>A linker is a program that combines object files into an executable file. The linker resolves references between object files, and combines them into a single executable file. The linker also performs other tasks, such as allocating memory for variables, and setting up the program&#39;s entry point</p><h2 id="executable-files" tabindex="-1">Executable Files <a class="header-anchor" href="#executable-files" aria-label="Permalink to “Executable Files”">​</a></h2><p>An executable file is a file containing machine code, created by the linker from the object files. Executable files are typically binary files, containing machine code that is not readable by humans. Executable files are usually stored on disk, and are run by the operating system to create the program</p><h2 id="loader" tabindex="-1">Loader <a class="header-anchor" href="#loader" aria-label="Permalink to “Loader”">​</a></h2><p>A loader is a program that loads an executable file into memory, and starts its execution. The loader reads the executable file from disk, and loads it into memory. The loader also performs other tasks, such as setting up the program&#39;s stack and heap, and initializing the program&#39;s data</p><h2 id="syntax-and-semantics" tabindex="-1">Syntax and Semantics <a class="header-anchor" href="#syntax-and-semantics" aria-label="Permalink to “Syntax and Semantics”">​</a></h2><p>Grammar rules of a programming language are called syntax. Semantics is the meaning of the syntax</p><h2 id="programming-language-paradigms-1" tabindex="-1">Programming Language Paradigms <a class="header-anchor" href="#programming-language-paradigms-1" aria-label="Permalink to “Programming Language Paradigms”">​</a></h2><ul><li><a href="./../Concepts/Designs/Programming_Paradigms/">Programming Language Paradigms</a></li></ul><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to “Resources”">​</a></h2><ul><li><a href="https://rosettacode.org/wiki/Rosetta_Code" target="_blank" rel="noreferrer">Same problem solved in different languages</a></li></ul>`,25)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"Finite State Machine","description":null,"frontmatter":{"title":"Finite State Machine","description":null,"date":"2024-11-13T00:00:00.000Z"},"headers":[],"relativePath":"Concepts/Designs/Finte_State_Machine.md","filePath":"Concepts/Designs/Finte_State_Machine.md","lastUpdated":1739650350000}`);var a={name:`Concepts/Designs/Finte_State_Machine.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="finite-state-machine-fsm" tabindex="-1">Finite State Machine (FSM) <a class="header-anchor" href="#finite-state-machine-fsm" aria-label="Permalink to “Finite State Machine (FSM)”">​</a></h1><p>A finite state machine or <strong>finite automaton</strong> is a mathematical model of computation. It is an abstract machine that can be in exactly one of a finite number of states at any given time. The FSM can change from one state to another in response to some inputs; the change from one state to another is called a <em>transition</em>. An FSM is defined by a list of its states, its initial state, and the conditions for each transition</p><ul><li>Part of the &quot;automata theory&quot;</li><li>Used in many applications like compilers, network protocols, and digital circuits</li><li>Used to design the control unit of computers</li></ul><p><em>Example:</em> Traffic lights</p><ul><li>States: Red, Yellow, Green</li><li>Transitions: Red -&gt; Green -&gt; Yellow -&gt; Red</li><li>Inputs: Traffic, Timer</li></ul><h2 id="characteristics-of-fsm" tabindex="-1">Characteristics of FSM <a class="header-anchor" href="#characteristics-of-fsm" aria-label="Permalink to “Characteristics of FSM”">​</a></h2><ul><li>We have a fixed set of states that the machine can be in</li><li>The machine can only be in one state at a time</li><li>A sequence of inputs is sent to the machine</li><li>Each state has a set of transitions and every transition is associated with an input and pointing to a state</li></ul><h2 id="types-of-fsm" tabindex="-1">Types of FSM <a class="header-anchor" href="#types-of-fsm" aria-label="Permalink to “Types of FSM”">​</a></h2><ol><li><strong>Deterministic Finite Automaton (DFA)</strong></li><li><strong>Non-Deterministic Finite Automaton (NFA)</strong></li><li><strong>epsilon-NFA (ε-NFA)</strong>: An NFA that can transition to a new state without consuming any input</li><li><strong>Mealy Machine</strong></li><li><strong>Mealy Machine</strong>: A Mealy machine is a finite-state machine whose output values are determined both by its current state and the current inputs</li><li><strong>Moore Machine</strong>: A Moore machine is a finite-state machine whose output values are determined only by its current state</li></ol><h3 id="deterministic-finite-automaton-dfa" tabindex="-1">Deterministic Finite Automaton (DFA) <a class="header-anchor" href="#deterministic-finite-automaton-dfa" aria-label="Permalink to “Deterministic Finite Automaton (DFA)”">​</a></h3><p>DFA is a finite state machine that accepts/rejects finite strings of symbols and only produces a unique computation (or run) of the automaton for each input string. It is deterministic in the sense that it produces the unique computation for any given input string</p><ul><li>It is the simplest model of computation</li><li>It has a very limited memory</li></ul>`,12)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
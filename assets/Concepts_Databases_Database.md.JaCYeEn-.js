import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"Database","description":"Database is a collection of data that is stored and organized in a way that can be easily accessed, managed and updated","frontmatter":{"title":"Database","description":"Database is a collection of data that is stored and organized in a way that can be easily accessed, managed and updated","date":"2024-10-20T00:00:00.000Z"},"headers":[],"relativePath":"Concepts/Databases/Database.md","filePath":"Concepts/Databases/Database.md","lastUpdated":1756574703000}`);var a={name:`Concepts/Databases/Database.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="database" tabindex="-1">Database <a class="header-anchor" href="#database" aria-label="Permalink to “Database”">​</a></h1><p>A <strong>database</strong> is a collection of data that is stored and organized in a way that can be easily accessed, managed and updated. Databases are used to store and manage data for various applications, such as websites, mobile apps, and desktop software</p><ul><li>A <em>database</em> is nothing more than a set of related information</li><li>A <em>database management system (DBMS)</em> is a software that allows users to define, create, maintain and control access to the database <ul><li>Primary goal of a DBMS is to provide an <em>efficient</em> and <em>convenient</em> method for defining and managing databases</li></ul></li></ul><h2 id="before-databases" tabindex="-1">Before Databases <a class="header-anchor" href="#before-databases" aria-label="Permalink to “Before Databases”">​</a></h2><h2 id="structure-vs-unstructured-data" tabindex="-1">Structure vs. Unstructured Data <a class="header-anchor" href="#structure-vs-unstructured-data" aria-label="Permalink to “Structure vs. Unstructured Data”">​</a></h2><p>Data can be stored in different formats, depending on the type of data and how it is used</p><ol><li><p><strong>Structured Data</strong>: Data that is organized in a predefined manner, such as in a table with rows and columns</p><p><em>Example</em>: Relational databases</p></li><li><p><strong>Unstructured Data</strong>: Data that does not have a predefined structure or organization</p><p><em>Example</em>: Text, images, videos, audio files</p></li></ol><h2 id="non-relational-database-systems" tabindex="-1">Non-Relational Database Systems <a class="header-anchor" href="#non-relational-database-systems" aria-label="Permalink to “Non-Relational Database Systems”">​</a></h2><p>Databases before the advent of relational databases were non-relational. They were based on the hierarchical or network model. These databases were designed to handle specific types of data and were not as flexible as relational databases</p><ul><li><p><strong>Hierarchical Database</strong>: Data is organized in a tree-like structure, with parent-child relationships</p><ul><li><em>Single-parent</em> hierarchy (one-to-many relationship)</li></ul><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>  Company</span></span>
<span class="line"><span>   /    \\</span></span>
<span class="line"><span>  Dept1  Dept2</span></span>
<span class="line"><span> /    \\   |   \\</span></span>
<span class="line"><span>Emp1 Emp2 Emp3 Emp4</span></span></code></pre></div></li><li><p><strong>Network Database</strong>: Data is organized in a graph-like structure, with many-to-many relationships</p><ul><li>Exposes sets of records and sets of links that define relationships between different records</li><li><em>Multiple-parent</em> hierarchy (many-to-many relationship)</li></ul><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>Employee1</span></span>
<span class="line"><span>    |</span></span>
<span class="line"><span>    |</span></span>
<span class="line"><span>Project1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Employee2</span></span>
<span class="line"><span>    |</span></span>
<span class="line"><span>    |</span></span>
<span class="line"><span>Project2</span></span></code></pre></div></li></ul><h2 id="relational-database-systems" tabindex="-1">Relational Database Systems <a class="header-anchor" href="#relational-database-systems" aria-label="Permalink to “Relational Database Systems”">​</a></h2><p>A <strong>relational database</strong> is a type of database that stores and provides access to data points that are related to one another</p><p>The relational database model was introduced by <strong>E.F. Codd in 1970</strong> of IBM&#39;s research laboratory</p><ul><li>Published a paper titled <strong>&quot;A Relational Model of Data for Large Shared Data Banks&quot;</strong></li><li>It is based on the concept of tables, where data is stored in rows and columns</li><li>Rather than using pointers to navigate between related entities, redundant data is used to link related records in different tables</li><li>The data can be accessed or reassembled in many different ways without having to reorganize the database tables</li></ul><h3 id="key-concepts" tabindex="-1">Key Concepts <a class="header-anchor" href="#key-concepts" aria-label="Permalink to “Key Concepts”">​</a></h3><ul><li><p><strong>Table</strong>: A table is a collection of data organized into rows and columns</p><ul><li>Modelled after a real-world entity</li></ul></li><li><p><strong>Column</strong>: A column is a set of data values of a particular type</p><ul><li>Some attribute of the entity</li></ul></li><li><p><strong>Row</strong>: A row is a single record in a table</p><ul><li>A single instance of the entity</li></ul></li><li><p><strong>Cell</strong>: A cell is a single data value in a table</p><ul><li>A single value for a single instance</li><li>The intersection of a row and a column</li></ul></li><li><p><strong>Field</strong>: A field is a single piece of data in a table</p></li><li><p><strong>Record</strong>: A record is a complete set of fields in a table</p></li><li><p><strong>Primary Key</strong>: A primary key is a unique identifier for each row in a table</p></li><li><p><strong>Foreign Key</strong>: A foreign key is a column that references a primary key in another table</p></li><li><p><strong>Index</strong>: An index is a data structure that improves the speed of data retrieval operations on a database table</p></li><li><p><strong>View</strong>: A view is a virtual table that is based on the result of a <code>SELECT</code> query</p></li><li><p><strong>Transaction</strong>: A transaction is a single unit of work that is performed on a database</p></li><li><p>Foreign key</p></li><li><p>Referential integrity</p></li><li><p>One-to-many relationship</p></li><li><p>One-to-one relationship</p></li><li><p>Many-to-many relationship</p></li><li><p>Data type</p></li><li><p>Null value</p></li><li><p>Default value</p></li><li><p>Auto increment column</p></li><li><p>Relational database</p></li><li><p>Table</p></li><li><p>Column</p></li><li><p>Row</p></li><li><p>Cell</p></li><li><p>Primary key</p></li><li><p>Composite primary key</p></li><li><p>Non-primary key (unique key)</p></li><li><p>Index</p></li></ul><h3 id="types-of-relationships" tabindex="-1">Types of Relationships <a class="header-anchor" href="#types-of-relationships" aria-label="Permalink to “Types of Relationships”">​</a></h3><ol><li><p><strong>One-to-One Relationship</strong>: A relationship where each record in one table is related to only one record in another table</p><p><em>Example</em>: A person has only one passport</p></li><li><p><strong>One-to-Many Relationship</strong>: A relationship where each record in one table is related to one or more records in another table</p><p><em>Example</em>: A customer can have multiple orders</p></li><li><p><strong>Many-to-Many Relationship</strong>: A relationship where each record in one table is related to one or more records in another table, and vice versa</p><p><em>Example</em>: A student can enrol in multiple courses, and a course can have multiple students</p></li></ol><h2 id="data-models" tabindex="-1">Data Models <a class="header-anchor" href="#data-models" aria-label="Permalink to “Data Models”">​</a></h2><p>A <strong>data model</strong> is a conceptual representation of the data structures that are required by a database</p><ol><li><p><strong>Entity-Relationship Model</strong>: A data model that describes the relationships between entities in a database</p><ul><li>The entity-relationship (E-R) data model uses a collection of basic objects, called <em>entities</em>, and <em>relationships</em> among these objects</li><li>An entity is a &quot;thing&quot; or &quot;object&quot; in the real world that is distinguishable from other objects</li></ul></li><li><p><strong>Relational Model</strong>: A data model that describes the relationships between tables in a database</p><ul><li>The relational model uses a collection of tables to represent both data and the relationships among those data</li><li>Each table has multiple columns, and each column has a unique name</li><li>Tables are also known as <strong>relations</strong></li></ul></li><li><p><strong>Semi-Structured Model</strong>: A data model that allows for the representation of data that does not fit neatly into a tabular format</p><ul><li>This data model permits the specification of data where individual data items of the same type may have different attributes</li><li><em>JSON</em> and <em>XML</em> are examples of semi-structured data formats</li></ul></li><li><p><strong>Object-Oriented Model</strong>: A data model that represents data as objects, similar to object-oriented programming</p></li></ol><h3 id="relational-data-model" tabindex="-1">Relational Data Model <a class="header-anchor" href="#relational-data-model" aria-label="Permalink to “Relational Data Model”">​</a></h3><p>Data are represented in the form of tables</p><ul><li>Each table has multiple columns, and each column has a unique name</li><li>Each row in a table represents one piece of information (one record)</li></ul><h3 id="data-abstraction" tabindex="-1">Data Abstraction <a class="header-anchor" href="#data-abstraction" aria-label="Permalink to “Data Abstraction”">​</a></h3><p><strong>Data abstraction</strong> is the process of hiding the complex details of data storage and retrieval operations</p><p>Different levels of data abstraction:</p><ul><li><p><strong>Physical Level</strong>: Describes how data is stored in the database (e.g., data structures, file formats)</p><ul><li>Lowest level of abstraction</li></ul></li><li><p><strong>Logical Level</strong>: Describes <strong>what</strong> data is stored in the database and the relationships among the data</p><ul><li>Describes the structure of the database</li><li>Independent of the physical storage of data (physical data independence)</li></ul></li><li><p><strong>View Level</strong>: Describes <strong>how</strong> data is presented to the user</p><ul><li>Highest level of abstraction</li><li>Describes only a part of the database</li><li>Not all users need to see all the data in the database</li></ul></li></ul><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>+------------------------------------+</span></span>
<span class="line"><span>|            View Level              |</span></span>
<span class="line"><span>|                                    |</span></span>
<span class="line"><span>| View 1  View 2  View 3  ... View n |</span></span>
<span class="line"><span>|                                    |</span></span>
<span class="line"><span>+------------------------------------+</span></span>
<span class="line"><span>                 |</span></span>
<span class="line"><span>                 |</span></span>
<span class="line"><span></span></span>
<span class="line"><span>           Logical Level</span></span>
<span class="line"><span></span></span>
<span class="line"><span>                 |</span></span>
<span class="line"><span>                 |</span></span>
<span class="line"><span></span></span>
<span class="line"><span>          Physical Level</span></span></code></pre></div><p>The database system allows application developers to store and retrieve data using the abstractions of the data model, and converts the abstract operations into operations on the low-level implementation</p><h2 id="acid-properties" tabindex="-1">ACID Properties <a class="header-anchor" href="#acid-properties" aria-label="Permalink to “ACID Properties”">​</a></h2><p><strong>ACID</strong> is a set of properties that guarantee that <a href="#transaction">database transactions</a> are processed reliably</p><ol><li><a href="#atomicity">Atomicity</a></li><li><a href="#consistency">Consistency</a></li><li><a href="#isolation">Isolation</a></li><li><a href="#durability">Durability</a></li></ol><h3 id="transaction" tabindex="-1">Transaction <a class="header-anchor" href="#transaction" aria-label="Permalink to “Transaction”">​</a></h3><p>What is a Transaction?</p><p>Transaction is a sequence of operations that are executed as a single unit</p><ul><li>A collection of queries</li><li>One unit of work</li><li>E.g., Account deposit (<code>SELECT</code>, <code>UPDATE</code>, <code>INSERT</code>)</li></ul><p>Transaction Life-cycle:</p><ul><li>Transaction <code>BEGIN</code></li><li><code>COMMIT</code> or <code>ROLLBACK</code></li><li>Transaction unexpected ending = <code>ROLLBACK</code> (e.g. crash)</li></ul><p>Nature of Transactions:</p><ul><li>Usually Transactions are used to change and modify data</li><li>However, it is perfectly normal to have a read only transaction</li><li>Example, you want to generate a report and you want to get consistent snapshot based at the time of transaction</li><li>We will learn more about this in the Isolation section</li></ul><p><em>Example</em>:</p><p>Lets say you have a bank account and you want to transfer money from your account to another account. This is a transaction. You will have to do the following steps:</p><table tabindex="0"><thead><tr><th>ACCOUNT_ID</th><th>BALANCE</th></tr></thead><tbody><tr><td>1</td><td>$900</td></tr><tr><td>2</td><td>$600</td></tr></tbody></table><p>Send $100 from account 1 to account 2</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">BEGIN</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> TRANSACTION</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">   SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> BALANCE </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> ACCOUNT </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> ACCOUNT_ID </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> AND</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> BALANCE </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 100</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> ACCOUNT </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> BALANCE </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> BALANCE </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> ACCOUNT_ID </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">      UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> ACCOUNT </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> BALANCE </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> BALANCE </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> ACCOUNT_ID </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">COMMIT</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> TRANSACTION</span></span></code></pre></div><h3 id="atomicity" tabindex="-1">Atomicity <a class="header-anchor" href="#atomicity" aria-label="Permalink to “Atomicity”">​</a></h3><p><strong>Atomicity</strong> ensures that <strong>all operations</strong> within a transaction are <strong>completed successfully</strong>, or <strong>none</strong> of them are completed at all</p><ul><li>All queries in a <strong>transaction must succeed</strong></li><li>If one query fails, all prior successful queries in the transaction should rollback</li><li>If the database went down prior to a commit of a transaction, all the successful queries in the transactions should rollback</li></ul><p><em>Example</em>:</p><p>You are sending money from your account to another account. You have initiated a transaction but the computer crashes before the transaction is completed</p><p>In this case:</p><ul><li>The first account has been debited but the other account has not been credited</li><li>This is really bad as we just lost data, and the information is inconsistent</li><li>An atomic transaction is a transaction that will rollback all queries if one or more queries failed</li><li>The database should clean this up after restart</li></ul><h3 id="consistency" tabindex="-1">Consistency <a class="header-anchor" href="#consistency" aria-label="Permalink to “Consistency”">​</a></h3><p><strong>Consistency</strong> ensures that the database remains in a <strong>consistent state before and after</strong> a transaction</p><ul><li>The database should enforce all constraints</li><li>The database should not allow any invalid data to be inserted</li><li>The database should not allow any data that violates the integrity constraints</li></ul><p><em>Example</em>:</p><p>While transferring funds, there is a moment between the subtraction from one account and the addition to another account that the total amount of funds represented in the database is altered and may become inconsistent with a recorded total. This is acceptable, as long as the transaction, as a whole, is consistent when it is committed</p><h3 id="isolation" tabindex="-1">Isolation <a class="header-anchor" href="#isolation" aria-label="Permalink to “Isolation”">​</a></h3><p><strong>Isolation</strong> ensures that the operations within a <strong>transaction are not affected by other transactions</strong> that are running concurrently</p><ul><li>Can my in-flight transaction see changes made by other transactions?</li><li>Transactions should be isolated from each other</li><li>Transactions should not interfere with each other</li><li>Transactions should not see the intermediate states of other transactions</li></ul><p>Types of Isolation Levels:</p><ol><li><p><strong>Read Uncommitted</strong>: The lowest isolation level, where transactions can see uncommitted changes made by other transactions</p></li><li><p><strong>Read Committed</strong>: Transactions can only see committed changes made by other transactions</p></li><li><p><strong>Repeatable Read</strong>: Transactions can see changes made by other transactions, but they cannot see changes made to the same data by other transactions</p></li><li><p><strong>Serializable</strong>: The highest isolation level, where transactions are completely isolated from each other</p></li></ol><h4 id="isolation-read-phenomena" tabindex="-1">Isolation Read phenomena <a class="header-anchor" href="#isolation-read-phenomena" aria-label="Permalink to “Isolation Read phenomena”">​</a></h4><ol><li><p><strong>Dirty Read</strong>: A transaction reads data that has been written by another transaction but not yet committed</p></li><li><p><strong>Non-Repeatable Read</strong>: A transaction reads the same data multiple times and gets different results because another transaction has modified the data in between the reads</p></li><li><p><strong>Phantom Read</strong>: A transaction reads a set of rows that satisfy a certain condition, but when it tries to read the same set of rows again, it finds that the set of rows has changed because another transaction has inserted or deleted rows that satisfy the condition</p></li><li><p><strong>Lost Update</strong>: Two transactions read the same data, and then update the data based on the value they read. When they commit, one of the updates is lost because the other transaction overwrote it</p></li></ol><h3 id="durability" tabindex="-1">Durability <a class="header-anchor" href="#durability" aria-label="Permalink to “Durability”">​</a></h3><p><strong>Durability</strong> ensures that once a transaction has been committed, the changes made by the transaction are <strong>permanent</strong> and <strong>cannot be lost</strong></p><ul><li>The database should be able to recover from any failure and restore the database to the state it was in before the failure</li></ul><p><em>Example</em>:</p><p>After you have transferred funds from one account to another, the transaction is committed. The database should ensure that the changes made by the transaction are permanent and irreversible even if the system crashes</p><h2 id="database-management-system-dbms" tabindex="-1">Database Management System (DBMS) <a class="header-anchor" href="#database-management-system-dbms" aria-label="Permalink to “Database Management System (DBMS)”">​</a></h2><p>A <strong>database management system (DBMS)</strong> is a software system that allows users to define, create, maintain, and control access to a database</p><h3 id="client-server-architecture" tabindex="-1">Client-Server Architecture <a class="header-anchor" href="#client-server-architecture" aria-label="Permalink to “Client-Server Architecture”">​</a></h3><p>In a <strong>client-server architecture</strong>, the database is stored on a server, and clients access the database through a network connection</p><p>3 Main Hardware Components:</p><ul><li><strong>Client</strong>: The user interface that interacts with the database</li><li><strong>Server</strong>: The computer that hosts the database</li><li><strong>Network</strong>: The communication channel that connects the client and server</li></ul><p>How a client-server architecture works:</p><ol><li><p>The client sends a request to the server containing a database query or command</p><ul><li>Database drivers are used to connect the client to the server</li></ul></li><li><p>The server passes the request to the database management system (DBMS)</p></li><li><p>The DBMS processes the request and sends a response back to the server</p></li><li><p>The server sends the response back to the client</p></li><li><p>The client displays the response to the user</p></li></ol><h3 id="dbms-components" tabindex="-1">DBMS Components <a class="header-anchor" href="#dbms-components" aria-label="Permalink to “DBMS Components”">​</a></h3><ul><li><strong>Query Processor</strong>: Processes queries and commands</li><li><strong>Database Engine</strong>: Manages the storage and retrieval of data</li><li><strong>Database Server</strong>: Hosts the database and manages client connections</li><li><strong>Database Client</strong>: Provides a user interface to interact with the database</li></ul><h2 id="instances-and-schemas" tabindex="-1">Instances and Schemas <a class="header-anchor" href="#instances-and-schemas" aria-label="Permalink to “Instances and Schemas”">​</a></h2><ul><li><p><strong>Instance</strong>: A collection of data stored in the database at a particular moment in time</p></li><li><p><strong>Schema</strong>: The structure that represents the logical view of the entire database</p></li></ul><h2 id="sql-structured-query-language" tabindex="-1">SQL (Structured Query Language) <a class="header-anchor" href="#sql-structured-query-language" aria-label="Permalink to “SQL (Structured Query Language)”">​</a></h2><p><strong>SQL</strong> (Structured Query Language) is a standard language for interacting with relational databases and is used to perform various operations on databases</p><ul><li>The application software communicates with the DBMS by sending SQL queries through the data access API</li><li>When the DBMS receives a query, it provides a service like returning the requested data (the query results) to the client</li></ul><h2 id="entity-relationship-model" tabindex="-1">Entity-Relationship Model <a class="header-anchor" href="#entity-relationship-model" aria-label="Permalink to “Entity-Relationship Model”">​</a></h2><p>The <strong>entity-relationship model</strong> is a data model that describes the relationships between entities in a database using a collection of basic objects called entities and relationships among these objects</p><ul><li><strong>Entity</strong>: A thing or object in the real world that is distinguishable from other objects</li><li><strong>Relationship</strong>: Describes how entities are related to each other</li></ul><h3 id="entity-relationship-diagram-erd" tabindex="-1">Entity-Relationship Diagram (ERD) <a class="header-anchor" href="#entity-relationship-diagram-erd" aria-label="Permalink to “Entity-Relationship Diagram (ERD)”">​</a></h3><p>An <strong>entity-relationship diagram (ERD)</strong> is a visual representation of the entities and relationships in a database that helps to understand the structure of the database</p><ul><li><strong>Entity</strong>: A table in the database</li><li><strong>Attribute</strong>: A column in a table</li><li><strong>Relationship</strong>: A connection between two entities</li></ul><h2 id="database-paradigms" tabindex="-1">Database Paradigms <a class="header-anchor" href="#database-paradigms" aria-label="Permalink to “Database Paradigms”">​</a></h2><ol><li><p>Key-value: Redis, Memcache, etc.</p><ul><li>Caching</li><li>Pub/Sub</li><li>Leaderboards</li></ul></li><li><p>Wide Column: Apache Cassandra, Apache HBase</p><ul><li>Time-series</li><li>Historical Records</li><li>High-write, low-read</li></ul></li><li><p>Document: MongoDB, Firebase Database, Amazon DynamoDB, Apache CouchDB</p><ul><li>Most Apps</li><li>Games</li><li>IOT</li></ul></li><li><p>RDBMS: MySQL, PostgreSQL, SQL Server, CockroachDB</p><ul><li>Most Apps</li><li>Not ideal for unstructured data</li></ul></li><li><p>Graph: Neo4j, Dgraph</p><ul><li>Graphs</li><li>Knowledge Graphs</li><li>Recommendation Engines</li></ul></li><li><p>Search: Apache Lucene, Elasticsearch, Apache Solr, Algolia, meilisearch</p><ul><li>Search Engines</li><li>Typeahead</li></ul></li><li><p>Multi-Model: Fauna</p></li></ol><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to “References”">​</a></h2><ul><li>CODASYL (Conference/Committee on Data Systems Languages)</li><li>Hierarchical</li></ul>`,95)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
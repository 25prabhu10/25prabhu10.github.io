import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"Backend Questions","description":"","frontmatter":{},"headers":[],"relativePath":"Non-Sorted/Interview/BackEnd.md","filePath":"Non-Sorted/Interview/BackEnd.md","lastUpdated":1756574703000}`);var a={name:`Non-Sorted/Interview/BackEnd.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="backend-questions" tabindex="-1">Backend Questions <a class="header-anchor" href="#backend-questions" aria-label="Permalink to “Backend Questions”">​</a></h1><ol><li>What are the characteristics of a RESTful API? Give an example e.g. if returning a list of customer accounts <ul><li>it is stateless</li><li>use HTTP verbs as Fielding originally defined</li><li>express URLs with nouns rather than verbs</li><li>make expressive use of HTTP Status Codes</li><li>choose wisely between XML (increasingly rare), JSON, and HATEOAS (rapidly growing)</li><li>are well-documented and reliable</li><li>support <code>X-HTTP-METHOD-Override</code> to accommodate picky proxies</li><li>track version</li><li>handle errors carefully and explicitly</li><li>log activity</li><li>paginate, filter, and sort results</li><li>limit rates</li><li>explicitly design in other commercially-significant API-specific features</li></ul></li></ol><ul><li>What APIs have you built in the past? (drill down into candidates knowledge of the application architecture, what design decisions were made? what could be improved?)</li><li>What are some considerations one should take when building APIs?</li><li>How would you authenticate a public facing API? Follow up question, have you used token based authentication? explain how it works?</li><li>How much .NET Core experience do you have?</li><li>What have you built with .NET Core?</li><li>What you can you tell me about OWASP?</li></ul><h2 id="application-to-solve-for" tabindex="-1">Application To Solve for <a class="header-anchor" href="#application-to-solve-for" aria-label="Permalink to “Application To Solve for”">​</a></h2><p>The mobile apps IOS and Android consume a microservice platform backend to retrieve the data</p><p>There are separate backend API for functions such as login, accounts list, retrieval, transaction history etc.</p><p>Consider that the user is already logged in has seen a list of all his accounts and now clicked in one particular account to see its details which led to the screen</p><p>To render the screen the app makes a call to a single public facing API endpoint. let&#39;s call it &quot;transactions Edge API&quot;. to this endpoint it passes a security context + an account identifier and receives a limited transaction history + future (scheduled) transactions for that account</p><p>The transactions edge API in turn consumes 3 separate middle tier (restricted zone) APIs that provide the following services:</p><ul><li><p>Retrieve list of accessible accounts for any customer identifier (sourced from SAP)</p></li><li><p>Retrieve transaction history for any account identifier (sourced from SAP)</p></li><li><p>Retrieve future (scheduled) transactions for any account identifier (sourced from Oracle DB)</p></li></ul><ol><li><p>Sketch a solution architecture diagram (lines and boxes) showing:</p><ul><li>The native app client (e.g. iOS or Android app)</li><li>The public facing API</li><li>The middle tier APIs</li><li>SAP</li><li>Oracle DB</li></ul></li><li><p>propose endpoint specification for each of the public facing and middle tier API calls using REST principles</p><p>For each specify:</p><ul><li>HTTP verb and route</li><li>Samples of JSON request/response payload structure</li></ul></li></ol><p>Follow Up Questions:</p><ol><li><p>How might you implement security on the public and point? assume the customer has already authenticated themselves to the native app using the login credentials via separate API</p></li><li><p>How do you prevent a malicious scholar accessing transactions for an account but do not own</p></li><li><p>What http code should be returned if customer ID and account id don&#39;t match?</p></li><li><p>You receive reports of slow calls for the web tier API. what steps do you take to investigate / remediate?</p></li><li><p>The customer&#39;s account list is expensive to retrieve and changes in frequently. what performance optimisation options might we consider?</p></li><li><p>Consider that there are cost / performance constraints on the calls made to SAP. for example: say it will only give us transactions in batch of 50 per call with a paging key. how do we implement an experience where the customer can keep scrolling back through their history loading more transactions as required?</p></li><li><p>You receive reports of a memory leak in the sky dual transactions API the one accessing Oracle in production what steps do you take to investigate/remediate?</p></li></ol><p>Coding On Paper:</p><ol><li><p>Code a c# Web API controller class to implement the following endpoints:</p><ul><li><p>Request: <code>GET /customers/{identifier}/identity</code></p></li><li><p>Response: <code>HTTP 200 OK</code></p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">FirstName</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Jonathan</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">LastName</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Brown</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">PreferredName</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Johnny</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>Request: <code>PUT /customers/{identifier}/identity</code></p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">PreferredName</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">John</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>Response: <code>HTTP 204 NO CONTENT</code></p></li></ul></li><li><p>Assume that the following class and interface are defined:</p><ul><li><p>Public class customer identity public string <code>firstName</code> public string <code>lastName</code> public string preferred name</p></li><li><p>Public interface I customer service customer identity get customer string identifier void update customer string identifier string preferred name</p></li><li><p>Assume the Web API project is using an IOC container supporting constructor injection of dependencies to controller</p></li></ul></li></ol>`,15)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
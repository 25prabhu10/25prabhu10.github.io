import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"Clean Architecture","description":null,"frontmatter":{"title":"Clean Architecture","description":null},"headers":[],"relativePath":"Concepts/Architecture/Clean_Architecture.md","filePath":"Concepts/Architecture/Clean_Architecture.md","lastUpdated":1756574703000}`);var a={name:`Concepts/Architecture/Clean_Architecture.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="clean-architecture" tabindex="-1">Clean Architecture <a class="header-anchor" href="#clean-architecture" aria-label="Permalink to “Clean Architecture”">​</a></h1><p><a href="https://github.com/jhuangtw/xg2xg" target="_blank" rel="noreferrer">Google</a></p><p>A domain-centric approach to organizing dependencies</p><p>Formerly known as:</p><ul><li>Onion Architecture</li><li>Hexagonal Architecture</li><li>Ports and Adapters</li></ul><p>With Clean Architecture, the <strong>Domain</strong> and <strong>Application</strong> layers are at the center of the design (<strong>Core</strong> of the system)</p><ul><li><p>Dependence on infrastructure concerns is minimized; keeping focus on domain logic</p></li><li><p><strong>Core</strong> should not be dependent on data access and other infrastructure. All dependencies point inwards</p><ul><li>This is achieved by adding interfaces or abstractions within <strong>Core</strong> that are implemented by layers outside of <strong>Core</strong>.</li></ul></li><li><p>Independent of frameworks</p></li><li><p>Testable</p></li><li><p>Independent of UI</p></li><li><p>Independent of database</p></li><li><p>Independent anything external</p></li></ul><p>Layers:</p><ul><li><p>Domain Layer:</p><ul><li>Contains enterprise logic and types</li><li>Can be shared across many systems</li></ul></li><li><p>Application Layer:</p><ul><li>Contains business logic and types</li><li>Specific to that system</li></ul></li><li><p>Presentation Layer:</p><ul><li>Depend on Core system, But not on Infrastructure</li></ul></li><li><p>Infrastructure Layer:</p><ul><li>Depend on Core system, But not on Presentation</li></ul></li></ul><p>Clean Architecture Rules:</p><ol><li>Model all business rules and entities in the Core project</li><li>All dependencies flow towards the Core project</li><li>Inner projects define interfaces; outer projects implement them</li></ol><p>What belongs in the <strong>Core project</strong>:</p><ul><li>Interfaces</li><li>Aggregates, Entities</li><li>Value Objects</li><li>Domain Services</li><li>Domain Exceptions</li><li>Domain Events, Event Handlers</li><li>Specifications</li><li>Validators</li><li>Enums</li><li>Custom Guards</li></ul><p>What belongs in the <strong>Infrastructure project</strong>:</p><ul><li>Repositories, DbContext Classes, Cached Repositories</li><li>API Clients</li><li>File Systems Accessors, Azure Storage Accessors</li><li>Emailing Implementation, SMS Implementation</li><li>System Clock</li></ul><p>What belongs in the <strong>Web/API</strong> project:</p><ul><li>API Endpoints, Razor Pages, Controllers, Views</li><li>API Models, ViewModels</li><li>Filters</li><li>Model Binders</li><li>Tag Helpers</li><li><strong>Composition Root</strong></li></ul><p>The &quot;Shared Kernel&quot;:</p><ul><li>Domain-Driven Design term</li><li>Holds common types shared between DDD apps</li><li>Typically referenced by Core projects</li><li>Ideally distributed as NuGet Packages</li></ul><p>What belongs in the <strong>Shared Kernel</strong> project:</p><ul><li>Base Entity, Base Value Object, Base Domain Event, Base Specification</li><li>Common Interfaces, Common Exceptions</li><li>Common Auth</li><li>Common Guards</li><li>Common Libraries, DI, Logging, Validators</li><li><strong>No Infrastructure Dependencies</strong></li></ul><p>N-Tier/N-Layer Architecture:</p><ul><li>UI --&gt; Business --&gt; Data Access --&gt; DB</li></ul><h2 id="t" tabindex="-1">T <a class="header-anchor" href="#t" aria-label="Permalink to “T”">​</a></h2><ul><li><p>src</p><ul><li><p>Domain:</p><ul><li>Types, Entities, Exceptions</li><li>Domain specific: Such as Finance domain will have finance specific things like currency, rates, currency representation etc..</li><li>Less application logic</li></ul></li><li><p>Application:</p><ul><li>Application specific things. What the application is being built for</li><li></li></ul></li><li><p>Infrastructure</p></li><li><p>WebUI</p></li></ul></li><li><p>tests</p><ul><li>Unit Tests</li><li>Integration Tests</li></ul></li></ul><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-label="Permalink to “Resources”">​</a></h2><ul><li><p><a href="https://jasontaylor.dev/clean-architecture-getting-started/" target="_blank" rel="noreferrer">Clean Architecture with .NET Core: Getting Started</a></p></li><li><p><a href="https://www.youtube.com/watch?v=_lwCVE_XgqI" target="_blank" rel="noreferrer">Clean Architecture with ASP.NET Core 2.1 | Jason Taylor</a></p></li><li><p><a href="https://www.tldraw.com/" target="_blank" rel="noreferrer">Tiny Little Drawing app</a></p></li><li><p><a href="https://excalidraw.com/" target="_blank" rel="noreferrer">Drawing app</a></p></li></ul>`,27)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
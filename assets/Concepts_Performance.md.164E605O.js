import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"Performance","description":"Strategies for analysing Performance problems","frontmatter":{"title":"Performance","description":"Strategies for analysing Performance problems","date":"2023-01-09T00:00:00.000Z","lastmod":"2023-01-09T00:00:00.000Z"},"headers":[],"relativePath":"Concepts/Performance.md","filePath":"Concepts/Performance.md","lastUpdated":1690829560000}`);var a={name:`Concepts/Performance.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="performance" tabindex="-1">Performance <a class="header-anchor" href="#performance" aria-label="Permalink to “Performance”">​</a></h1><p>Strategies for analysing Performance problems:</p><ul><li><p>When it&#39;s slow, what is it doing?</p></li><li><p>What is the WHOLE PROGRAM trying to do?</p></li></ul><p>Micro-optimizations such as:</p><ul><li>It always produces the same result: <strong>cache it!</strong></li><li>It is not even required: <strong>remove!</strong></li><li>Best optimization is not to run a certain line at all</li></ul><p>You need the call stack:</p><ul><li>You want to see a stacktrace when it runs slow</li><li>What initiated the slow code?</li><li>And why?</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> cProfile</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> app.py</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># or</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> pytest-profiling</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">pytest</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --profile-svg</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -k</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">keywor</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># or</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">py-spy</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> record</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> profile-svg</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --pid</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 7</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --subprocesses</span></span></code></pre></div><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to “References”">​</a></h2><ul><li><a href="https://www.youtube.com/watch?v=RRCGywYTsxI" target="_blank" rel="noreferrer">Why is it Slow? Strategies for Solving Performance Issues</a>: Caleb Hattingh at Kapiche</li></ul>`,10)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"API Security","description":"Securing API endpoints","frontmatter":{"title":"API Security","description":"Securing API endpoints"},"headers":[],"relativePath":"Concepts/Application_Security/API.md","filePath":"Concepts/Application_Security/API.md","lastUpdated":1756574703000}`);var a={name:`Concepts/Application_Security/API.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="api-security" tabindex="-1">API Security <a class="header-anchor" href="#api-security" aria-label="Permalink to “API Security”">​</a></h1><p>API security is nothing but securing the API endpoints from attackers and building your APIs in a secure fashion.</p><p>APIs inherit most of the problems with session/session-less management.</p><p>A vulnerable API could lead to:</p><ul><li>Unauthorized Access</li><li>Data Leakage</li><li>Sanctioning Fuzzy Input</li><li>Injection Vulnerabilities</li><li>Parameter Tampering, etc.</li></ul><h2 id="broken-function-and-object-level-authorisation" tabindex="-1">Broken Function And Object Level Authorisation <a class="header-anchor" href="#broken-function-and-object-level-authorisation" aria-label="Permalink to “Broken Function And Object Level Authorisation”">​</a></h2><ul><li><p>Function level authorisation is poor implementation of resource scope</p></li><li><p>Object level authorisation is poor implementation of resource access</p></li></ul><h2 id="excessive-data-exposure" tabindex="-1">Excessive Data Exposure <a class="header-anchor" href="#excessive-data-exposure" aria-label="Permalink to “Excessive Data Exposure”">​</a></h2><ul><li>Excessive data (sensitive) returned by API when not intended</li></ul><h2 id="lack-of-resource-rate-limiting" tabindex="-1">Lack Of Resource Rate-Limiting <a class="header-anchor" href="#lack-of-resource-rate-limiting" aria-label="Permalink to “Lack Of Resource Rate-Limiting”">​</a></h2><ul><li>Rate-limiting is crucial to API abuse and/or DOS</li></ul><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">X-RateLimit-Limit</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> 1000</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">X-RateLimit-Remaining</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> 992</span></span></code></pre></div><h2 id="mass-assignment" tabindex="-1">Mass Assignment <a class="header-anchor" href="#mass-assignment" aria-label="Permalink to “Mass Assignment”">​</a></h2><ul><li><p>Use of functions that automatically bind input from client into variables or objects</p></li><li><p>Filter data</p></li></ul><p><a href="https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html" target="_blank" rel="noreferrer">Mass Assignment exploit</a></p><h2 id="security-misconfiguration" tabindex="-1">Security Misconfiguration <a class="header-anchor" href="#security-misconfiguration" aria-label="Permalink to “Security Misconfiguration”">​</a></h2><p>Security misconfiguration with APIs often are very common with generic HTTP issues:</p><ul><li>Application stack hardening</li><li>Missing security patches for frameworks</li><li>Unnecessary features enabled (e.g. HTTP verbs)</li><li>TLS missing</li><li>Security headers missing</li><li>CORS headers missing or incorrect</li><li>Error messages include stack trace etc.</li></ul><h2 id="missing-object-level-access-control" tabindex="-1">Missing Object Level Access Control <a class="header-anchor" href="#missing-object-level-access-control" aria-label="Permalink to “Missing Object Level Access Control”">​</a></h2><ul><li>Object level access control acts as an authorization mechanism.</li><li>Access control is generally set up at the code level to determine which objects a given user can and cannot access.</li></ul><p>Prevention Methods</p><ul><li>Ensure the authorization mechanism is set up based on the application&#39;s user policies and data level access hierarchy.</li><li>Perform checks to see whether users have access to perform the requested action for each function.</li><li>Use difficult to predict globally unique identifiers to ID records.</li><li>Ensure there are tests in place to evaluate the access control mechanism.</li></ul><div class="danger custom-block"><p class="custom-block-title">Vulnerabilities</p><p>Failure to set up object level access control can leave records or other objects open to unauthorized access or modification.</p></div><h2 id="security-testing-tools" tabindex="-1">Security Testing Tools <a class="header-anchor" href="#security-testing-tools" aria-label="Permalink to “Security Testing Tools”">​</a></h2><table tabindex="0"><thead><tr><th>Security Issues</th><th>Tools to Test</th></tr></thead><tbody><tr><td>Injection Flaw (SQLi, LDAP, CRLF)</td><td>Burp Suite, Proxy, SQLmap, Astra Security Scan</td></tr><tr><td>Broken Authentication</td><td>Burp Suite, Manual Testing, Astra Security Scan</td></tr><tr><td>Data Exposure</td><td>Acunetix, DirBuster, Astra Security Scan</td></tr><tr><td>XSS</td><td>Burp Suite, Manual Testing, Astra Security Scan</td></tr></tbody></table><h2 id="api-security-testing" tabindex="-1">API Security Testing <a class="header-anchor" href="#api-security-testing" aria-label="Permalink to “API Security Testing”">​</a></h2><ol><li><p>Test for API Input Fuzzing:</p><ul><li><p>Fuzzing simply means <strong>providing random data to the API until it spills something out</strong> (some info, some error message or anything to imply that random data has been processed by the API)</p></li><li><p><em>Example:</em> For numerical inputs, try: 0, -ve numbers or very large numbers. For string inputs, try: SQL queries or system commands or random characters</p></li><li><p>Fuzzapi: Automate testing</p></li></ul></li><li><p>Test for API Injection Attacks:</p><ol><li><p>SQL Injection (SQLi):</p><ul><li>SQLi attacks are successful when the unsanitized API input is processed by the DB.</li><li><em>Example:</em> Inputs like, <code>or 1=1--</code>, <code>and 1=1--</code>, URL based: <code>http://example.com/api/auth-token/user=admin&#39;or 1=1--</code></li><li>Sqlmap: Automate testing</li></ul></li><li><p>Command Injection:</p><ul><li>When OS commands are provided as inputs and these commands then get executed on the server.</li><li><em>Example:</em> For a Linux system: <code>rm /</code> removes root directory, when URL encoded this command looks like this <code>rm%20/</code>. URL: <code>http://example.com/view?name=file.txt;rm%20/</code></li><li>Commix: Automate testing</li></ul></li><li><p>Test for Parameter Tampering:</p><ul><li><p>Parameters sent through an API request may be vulnerable to tampering. Attacker can change the values of a product and buy it for free.</p></li><li><p><em>Example:</em> If there is a hidden field in the form submitted by the user:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">hidden</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">price</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">100.00</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span></code></pre></div><ul><li>Attacker can change the value from 100.00 to 1 and get the product at very low cost.</li></ul></li></ul></li><li><p>Test for Unhandled HTTP Methods</p><ul><li>If a server dose not support an HTTP method, typically it should show an error.</li><li>But this not the case always especially for vulnerable APIs</li><li>If the server dose not support an HTTP method it should respond with <strong>405 Method Not Allowed</strong></li></ul></li></ol></li></ol>`,27)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
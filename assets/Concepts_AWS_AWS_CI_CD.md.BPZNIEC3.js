import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"AWS CI CD","description":"AWS CI CD","frontmatter":{"title":"AWS CI CD","description":"AWS CI CD","prev":"./AWS"},"headers":[],"relativePath":"Concepts/AWS/AWS_CI_CD.md","filePath":"Concepts/AWS/AWS_CI_CD.md","lastUpdated":1756574703000}`);var a={name:`Concepts/AWS/AWS_CI_CD.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="aws-ci-cd" tabindex="-1">AWS CI CD <a class="header-anchor" href="#aws-ci-cd" aria-label="Permalink to “AWS CI CD”">​</a></h1><h2 id="cicd-continuous-integration-and-continuous-delivery" tabindex="-1">CICD (Continuous-Integration and Continuous-Delivery) <a class="header-anchor" href="#cicd-continuous-integration-and-continuous-delivery" aria-label="Permalink to “CICD (Continuous-Integration and Continuous-Delivery)”">​</a></h2><ul><li><p>We now know how to create resources in AWS manually (Fundamentals)</p></li><li><p>We know how to interact with AWS programmatically (CLI)</p></li><li><p>We&#39;ve seen how to deploy code to AWS using Elastic Beanstalk</p></li><li><p>All these manual steps make it very likely for us to do mistakes!</p></li><li><p>What we&#39;d like is to push our code &quot;in a repository&quot; and have it deployed onto the AWS</p><ul><li>Automatically</li><li>The right way</li><li>Making sure it&#39;s tested before deploying</li><li>With possibility to go into different stages (dev, test, pre-prod, prod)</li><li>With manual approval where needed</li></ul></li><li><p>To be a proper AWS developer... we need to learn AWS CICD</p></li><li><p>This section is all about automating the deployment we&#39;ve done so far while adding increased safety.</p></li><li><p>It correspond to a whole part of the AWS Certification</p></li><li><p>We&#39;ll learn about</p><ul><li>AWS CodeCommit: storing our code</li><li>AWS CodePipeline: automating our pipeline from code to ElasticBeanstalk</li><li>AWS CodeBuild: building and testing our code</li><li>AWS CodeDeploy: deploying the code to EC2 fleets (not Beanstalk)</li></ul></li></ul><h2 id="continuous-integration" tabindex="-1">Continuous Integration <a class="header-anchor" href="#continuous-integration" aria-label="Permalink to “Continuous Integration”">​</a></h2><ul><li>Developers push the code to a code repository often (GitHub / CodeCommit / Bitbucket / etc...)</li><li>A testing / build server checks the code as soon as it&#39;s pushed (CodeBuild / Jenkins CI / etc...)</li><li>The developer gets feedback about the tests and checks that have passed / failed</li><li>Find bugs early, fix bugs</li><li>Deliver faster as the code is tested</li><li>Deploy often</li><li>Happier developers, as they&#39;re unblocked</li></ul><h2 id="continuous-delivery" tabindex="-1">Continuous Delivery <a class="header-anchor" href="#continuous-delivery" aria-label="Permalink to “Continuous Delivery”">​</a></h2><ul><li>Ensure that the software can be released reliably whenever needed.</li><li>Ensures deployments happen often and are quick</li><li>Shift away from &quot;one release every 3 months&quot; to &quot;5 releases a day&quot;</li><li>That usually means automated deployment <ul><li>CodeDeploy</li><li>Jenkins CD</li><li>Spinnaker Application</li><li>Etc...</li></ul></li></ul><h2 id="technology-stack-for-cicd" tabindex="-1">Technology Stack for CICD <a class="header-anchor" href="#technology-stack-for-cicd" aria-label="Permalink to “Technology Stack for CICD”">​</a></h2><p>Code --&gt; Build --&gt; Test --&gt; Deploy --&gt; Provision</p><h2 id="codecommit" tabindex="-1">CodeCommit <a class="header-anchor" href="#codecommit" aria-label="Permalink to “CodeCommit”">​</a></h2><ul><li><p>Version control is the ability to understand the various changes that happened to the code over time (and possibly roll back).</p></li><li><p>All these are enabled by using a version control system such as Git</p></li><li><p>A Git repository can live on one&#39;s machine, but it usually lives on a central online repository</p></li><li><p>Benefits are:</p><ul><li>Collaborate with other developers</li><li>Make sure the code is backed-up somewhere</li><li>Make sure it&#39;s fully viewable and auditable</li></ul></li><li><p>Git repositories can be expensive.</p></li><li><p>The industry includes:</p><ul><li>GitHub: free public repositories, paid private ones</li><li>BitBucket</li><li>Etc...</li></ul></li><li><p>And AWS CodeCommit:</p><ul><li>private Git repositories</li><li>No size limit on repositories (scale seamlessly)</li><li>Fully managed, highly available</li><li>Code only in AWS Cloud account =&gt; increased security and compliance</li><li>Secure (encrypted, access control, etc...)</li><li>Integrated with Jenkins / CodeBuild / other CI tools</li></ul></li></ul><h3 id="codecommit-security" tabindex="-1">CodeCommit Security <a class="header-anchor" href="#codecommit-security" aria-label="Permalink to “CodeCommit Security”">​</a></h3><ul><li>Interactions are done using Git (standard)</li><li>Authentication in Git: <ul><li>SSH Keys: AWS Users can configure SSH keys in their IAM Console</li><li>HTTPS: Done through the AWS CLI Authentication helper or Generating HTTPS credentials</li><li>MFA (multi factor authentication) can be enabled for extra safety</li></ul></li><li>Authorization in Git: <ul><li>IAM Policies manage user / roles rights to repositories</li></ul></li><li>Encryption: <ul><li>Repositories are automatically encrypted at rest using KMS</li><li>Encrypted in transit (can only use HTTPS or SSH - both secure)</li></ul></li><li>Cross Account access: <ul><li>Do not share your SSH keys</li><li>Do not share your AWS credentials</li><li>Use IAM Role in your AWS Account and use AWS STS (with AssumeRole API)</li></ul></li></ul><h3 id="codecommit-vs-github" tabindex="-1">CodeCommit vs GitHub <a class="header-anchor" href="#codecommit-vs-github" aria-label="Permalink to “CodeCommit vs GitHub”">​</a></h3><p>Similarities:</p><ul><li>Both are git repositories</li><li>Both support code review (pull requests)</li><li>GitHub and CodeCommit can integrated with AWS CodeBuild</li><li>Both support HTTPS and SSH method of authentication</li></ul><p>Differences:</p><ul><li>Security: <ul><li>GitHub: GitHub Users</li><li>CodeCommit: AWS IAM users &amp; roles,</li></ul></li><li>Hosted: <ul><li>GitHub: hosted by GitHub</li><li>GitHub Enterprise: self hosted on your servers</li><li>CodeCommit: managed &amp; hosted by AWS</li></ul></li><li>UI: <ul><li>GitHub UI is fully featured</li><li>CodeCommit UI is minimal</li></ul></li></ul><h3 id="codecommit-notifications" tabindex="-1">CodeCommit Notifications <a class="header-anchor" href="#codecommit-notifications" aria-label="Permalink to “CodeCommit Notifications”">​</a></h3><ul><li>You can trigger notifications in CodeCommit using AWS SNS (Simple Notification Service) or AWS Lambda or AWS CloudWatch Event Rules</li><li>Use cases for notifications SNS / AWS Lambda notifications: <ul><li>Deletion of branches</li><li>Trigger for pushes that happens in master branch</li><li>Notify external Build System</li><li>Trigger AWS Lambda function to perform codebase analysis (maybe credentials got committed in the code?)</li></ul></li><li>Use cases for CloudWatch Event Rules: <ul><li>Trigger for pull request updates (created / updated / deleted / commented)</li><li>Commit comment events</li><li>CloudWatch Event Rules goes into an SNS topic</li></ul></li></ul><h3 id="create-a-repository" tabindex="-1">Create a Repository <a class="header-anchor" href="#create-a-repository" aria-label="Permalink to “Create a Repository”">​</a></h3><ol><li><p>Search for <code>CodeCommit</code> --&gt; Create repository</p></li><li><p>Repository settings:</p><ul><li>Repository name:</li><li>Description (optional):</li><li>Tags</li><li>Enable Amazon CodeGuru Reviewer for Java and Python - optional</li></ul></li><li><p>Connection steps:</p><ul><li>HTTPS:</li><li>SSH:</li><li>HTTPS (GRC):</li></ul></li></ol><h2 id="codepipeline" tabindex="-1">CodePipeline <a class="header-anchor" href="#codepipeline" aria-label="Permalink to “CodePipeline”">​</a></h2><ul><li>Continuous delivery</li><li>Visual workflow</li><li>Source: GitHub / CodeCommit / Amazon S3</li><li>Build: CodeBuild / Jenkins / etc...</li><li>Load Testing: 3rd party tools</li><li>Deploy: AWS CodeDeploy / Beanstalk / CloudFormation / ECS...</li><li>Made of stages: <ul><li>Each stage can have sequential actions and / or parallel actions</li><li>Stages examples: Build / Test / Deploy / Load Test / etc...</li><li>Manual approval can be defined at any stage</li></ul></li></ul><h3 id="aws-codepipeline-artifacts" tabindex="-1">AWS CodePipeline Artifacts <a class="header-anchor" href="#aws-codepipeline-artifacts" aria-label="Permalink to “AWS CodePipeline Artifacts”">​</a></h3><ul><li>Each pipeline stage can create &quot;artifacts&quot;</li><li>Artifacts are passed stored in Amazon S3 and passed on to the next stage</li></ul><h3 id="codepipeline-troubleshooting" tabindex="-1">CodePipeline Troubleshooting <a class="header-anchor" href="#codepipeline-troubleshooting" aria-label="Permalink to “CodePipeline Troubleshooting”">​</a></h3><ul><li>CodePipeline state changes happen in AWS CloudWatch Events, which can in return create SNS notifications. <ul><li>Ex: you can create events for failed pipelines</li><li>Ex: you can create events for cancelled stages</li></ul></li><li>If CodePipeline fails a stage, your pipeline stops and you can get information in the console</li><li>AWS CloudTrail can be used to audit AWS API calls</li><li>If Pipeline can&#39;t perform an action, make sure the &quot;IAM Service Role&quot; attached does have enough permissions (IAM Policy)</li></ul><h2 id="codebuild" tabindex="-1">CodeBuild <a class="header-anchor" href="#codebuild" aria-label="Permalink to “CodeBuild”">​</a></h2><ul><li><p>Fully managed build service</p></li><li><p>Alternative to other build tools such as Jenkins</p></li><li><p>Continuous scaling (no servers to manage or provision - no build queue)</p></li><li><p>Pay for usage: the time it takes to complete the builds</p></li><li><p>Leverages Docker under the hood for reproducible builds</p></li><li><p>Possibility to extend capabilities leveraging our own base Docker images</p></li><li><p>Secure: Integration with KMS for encryption of build artifacts, IAM for build permissions, and VPC for network security, CloudTrail for API calls logging</p></li><li><p>Source Code from GitHub / CodeCommit / CodePipeline / S3...</p></li><li><p>Build instructions can be defined in code (buildspec.yml file)</p></li><li><p>Output logs to Amazon S3 &amp; AWS CloudWatch Logs</p></li><li><p>Metrics to monitor CodeBuild statistics</p></li><li><p>Use CloudWatch Events to detect failed builds and trigger notifications</p></li><li><p>Use CloudWatch Alarms to notify if you need &quot;thresholds&quot; for failures</p></li><li><p>CloudWatch Events / AWS Lambda as a Glue</p></li><li><p>SNS notifications</p></li><li><p>Ability to reproduce CodeBuild locally to troubleshoot in case of errors</p></li><li><p>Builds can be defined within CodePipeline or CodeBuild itself</p></li></ul><h3 id="codebuild-support-environments" tabindex="-1">CodeBuild Support environments <a class="header-anchor" href="#codebuild-support-environments" aria-label="Permalink to “CodeBuild Support environments”">​</a></h3><ul><li>Java</li><li>Ruby</li><li>Python</li><li>Go</li><li>Node.js</li><li>Android</li><li>.NET Core</li><li>PHP</li><li>Docker: extend any environment you like</li></ul><h3 id="codebuild-buildspec" tabindex="-1">CodeBuild BuildSpec <a class="header-anchor" href="#codebuild-buildspec" aria-label="Permalink to “CodeBuild BuildSpec”">​</a></h3><ul><li>buildspec.yml file must be at the root of your code</li><li>Define environment variables: <ul><li>Plaintext variables</li><li>Secure secrets: use SSM Parameter store</li></ul></li><li>Phases (specify commands to run): <ul><li>Install: install dependencies you may need for your build</li><li>Pre build: final commands to execute before build</li><li>Build: actual build commands</li><li>Post build: finishing touches (zip output for example)</li></ul></li><li>Artifacts: What to upload to S3 (encrypted with KMS)</li><li>Cache: Files to cache (usually dependencies) to S3 for future build speedup</li></ul><h3 id="codebuild-local-build" tabindex="-1">CodeBuild Local Build <a class="header-anchor" href="#codebuild-local-build" aria-label="Permalink to “CodeBuild Local Build”">​</a></h3><ul><li>In case of need of deep troubleshooting beyond logs...</li><li>You can run CodeBuild locally on your desktop (after installing Docker)</li><li>For this, leverage the <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/use-codebuild-agent.html" target="_blank" rel="noreferrer">CodeBuild Agent</a></li></ul><h3 id="create-a-codebuild" tabindex="-1">Create a CodeBuild <a class="header-anchor" href="#create-a-codebuild" aria-label="Permalink to “Create a CodeBuild”">​</a></h3><ol><li><p>Create build project:</p><ul><li>Project name:</li><li>Description (optional):</li><li>Build badge (optional):</li><li>Enable concurrent build limit (optional):</li><li>Source: <ul><li>Source provider: (AWS CodeCommit) (Amazon S3) (GitHub) (Bitbucket) (GitHub Enterprise)</li><li>Repository:</li><li>Reference type: (Branch) (Git tag) (Commit ID)</li></ul></li><li>Environment image: (Managed image) (Custom image)</li><li>Operating system: (Ubuntu - recommended) (Amazon Linux 2) (Windows Server 2019)</li><li>Runtime: Standard</li><li>Image: Select the latest</li><li>Image version: Select the latest</li><li>Environment type: (Linux)</li><li>Privileged</li><li>Service role: (New service role) (Existing service role)</li><li>Role name:</li><li>Additional configuration: ...</li><li>Buildspec: <ul><li>Build specification: (Use a buildspec file) (Insert build commands)</li><li>Buildspec name (optional): (default name is buildspec.yml)</li></ul></li><li>Batch configuration:</li><li>Artificats:</li><li>Artifacts: <ul><li>Type: (No artifacts) (Amazon S3)</li></ul></li><li>Logs: <ul><li>CloudWatch logs (optional):</li><li>Group name:</li><li>Stream name:</li><li>S3 logs (optional):</li></ul></li></ul></li><li><p>Create a <code>buildspec.yml</code> file and place it in the root of your repository:</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0.2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">phases</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">  install</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">    runtime-versions</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">      nodejs</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">    commands</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> echo &quot;installing something&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">  pre_build</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">    commands</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> echo &quot;we are in the pre build phase&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">  build</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">    commands</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> echo &quot;we are in the build block&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> echo &quot;we will run some tests&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> grep -Fq &quot;Congratulations&quot; index.html</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">  post_build</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">    commands</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      -</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> echo &quot;we are in the post build phase&quot;</span></span></code></pre></div></li><li><p>Start build and verify</p></li></ol><h3 id="codebuild-in-vpc" tabindex="-1">CodeBuild in VPC <a class="header-anchor" href="#codebuild-in-vpc" aria-label="Permalink to “CodeBuild in VPC”">​</a></h3><ul><li>By default, your CodeBuild containers are launched outside your VPC</li><li>Therefore, by default it cannot access resources in a VPC</li><li>You can specify a VPC configuration: <ul><li>VPC ID</li><li>Subnet IDs</li><li>Security Group IDs</li></ul></li><li>Then your build can access resources in your VPC (RDS, ElastiCache, EC2, ALB..)</li><li>Use cases: integration tests, data query, internal load balancers</li></ul><h2 id="aws-codedeploy" tabindex="-1">AWS CodeDeploy <a class="header-anchor" href="#aws-codedeploy" aria-label="Permalink to “AWS CodeDeploy”">​</a></h2><ul><li>We want to deploy our application automatically to many EC2 instances</li><li>These instances are not managed by Elastic Beanstalk</li><li>There are several ways to handle deployments using open source tools (Ansible, Terraform, Chef, Puppet, etc...)</li><li>We can use the managed Service AWS CodeDeploy</li></ul><h2 id="aws-codedeploy-steps-to-make-it-work" tabindex="-1">AWS CodeDeploy - Steps to make it work <a class="header-anchor" href="#aws-codedeploy-steps-to-make-it-work" aria-label="Permalink to “AWS CodeDeploy - Steps to make it work”">​</a></h2><ul><li><p>Each EC2 Machine (or On Premise machine) must be running the CodeDeploy Agent</p></li><li><p>The agent is continuously polling AWS CodeDeploy for work to do</p></li><li><p>CodeDeploy sends appspec.yml file</p></li><li><p>Application is pulled from GitHub or S3</p></li><li><p>EC2 will run the deployment instructions</p></li><li><p>CodeDeploy Agent will report of success / failure of deployment on the instance</p></li><li><p>EC2 instances are grouped by deployment group (dev / test / prod)</p></li><li><p>Lots of flexibility to define any kind of deployments</p></li><li><p>CodeDeploy can be chained into CodePipeline and use artifacts from there</p></li><li><p>CodeDeploy can re-use existing setup tools, works with any application, auto scaling integration</p></li><li><p>Note: Blue / Green only works with EC2 instances (not on premise)</p></li><li><p>Support for AWS Lambda deployments (we&#39;ll see this later)</p></li><li><p>CodeDeploy does not provision resources</p></li></ul><h3 id="aws-codedeploy-primary-components" tabindex="-1">AWS CodeDeploy Primary Components <a class="header-anchor" href="#aws-codedeploy-primary-components" aria-label="Permalink to “AWS CodeDeploy Primary Components”">​</a></h3><ul><li>Application: unique name</li><li>Compute platform: EC2/On-Premise or Lambda</li><li>Deployment configuration: Deployment rules for success / failures <ul><li>EC2/On-Premise: you can specify the minimum number of healthy instances for the deployment.</li><li>AWS Lambda: specify how traffic is routed to your updated Lambda function versions.</li></ul></li><li>Deployment group: group of tagged instances (allows to deploy gradually)</li><li>Deployment type: In-place deployment or Blue/green deployment:</li><li>IAM instance profile: need to give EC2 the permissions to pull from S3 / GitHub</li><li>Application Revision: application code + appspec.yml file</li><li>Service role: Role for CodeDeploy to perform what it needs</li><li>Target revision: Target deployment application version</li></ul><h3 id="aws-codedeploy-appspec" tabindex="-1">AWS CodeDeploy AppSpec <a class="header-anchor" href="#aws-codedeploy-appspec" aria-label="Permalink to “AWS CodeDeploy AppSpec”">​</a></h3><ul><li>File section: how to source and copy from S3 / GitHub to filesystem</li><li>Hooks: set of instructions to do to deploy the new version (hooks can have timeouts). The order is: <ul><li>ApplicationStop</li><li>DownloadBundle</li><li>BeforeInstall</li><li>AfterInstall</li><li>ApplicationStart</li><li>ValidateService: really important</li></ul></li></ul><h3 id="aws-codedeploy-deploy-hooks-order" tabindex="-1">AWS CodeDeploy Deploy &amp; Hooks Order <a class="header-anchor" href="#aws-codedeploy-deploy-hooks-order" aria-label="Permalink to “AWS CodeDeploy Deploy &amp; Hooks Order”">​</a></h3><ol><li>ApplicationStop</li><li>DownloadBundle</li><li>BeforeInstall</li><li>Install</li><li>AfterInstall</li><li>ApplicationStart</li><li>ValidateService</li><li>BeforeAllowTraffic</li><li>AllowTraffic</li><li>AfterAllowTraffic</li></ol><h3 id="aws-codedeploy-deployment-config" tabindex="-1">AWS CodeDeploy Deployment Config <a class="header-anchor" href="#aws-codedeploy-deployment-config" aria-label="Permalink to “AWS CodeDeploy Deployment Config”">​</a></h3><ul><li>Configs: <ul><li>One a time: one instance at a time, one instance fails =&gt; deployment stops</li><li>Half at a time: 50%</li><li>All at once: quick but no healthy host, downtime. Good for dev</li><li>Custom: min healthy host = 75%</li></ul></li><li>Failures: <ul><li>Instances stay in &quot;failed state&quot;</li><li>New deployments will first be deployed to &quot;failed state&quot; instances</li><li>To rollback: redeploy old deployment or enable automated rollback for failures</li></ul></li><li>Deployment Targets: <ul><li>Set of EC2 instances with tags</li><li>Directly to an ASG</li><li>Mix of ASG / Tags so you can build deployment segments</li><li>Customization in scripts with DEPLOYMENT_GROUP_NAME environment variables</li></ul></li></ul><h2 id="codedeploy-to-ec2" tabindex="-1">CodeDeploy to EC2 <a class="header-anchor" href="#codedeploy-to-ec2" aria-label="Permalink to “CodeDeploy to EC2”">​</a></h2><ul><li>Define how to deploy the application using appspec.yml + deployment strategy</li><li>Will do in-place update to your fleet of EC2 instances</li><li>Can use hooks to verify the deployment after each deployment phase</li></ul><h3 id="codedeploy-to-asg" tabindex="-1">CodeDeploy to ASG <a class="header-anchor" href="#codedeploy-to-asg" aria-label="Permalink to “CodeDeploy to ASG”">​</a></h3><ul><li>In place updates: <ul><li>Updates current existing EC2 instances</li><li>Instances newly created by an ASG will also get automated deployments</li></ul></li><li>Blue / green deployment: <ul><li>A new auto-scaling group is created (settings are copied)</li><li>Choose how long to keep the old instances</li><li>Must be using an ELB</li></ul></li></ul><h3 id="codedeploy-roll-backs" tabindex="-1">CodeDeploy - roll backs <a class="header-anchor" href="#codedeploy-roll-backs" aria-label="Permalink to “CodeDeploy - roll backs”">​</a></h3><ul><li>You can specify automated rollback options</li><li>Roll back when a deployment fails</li><li>Roll back when alarm thresholds are met</li><li>Disable rollbacks - Do not perform rollbacks for this deployment.</li><li>If a roll back happens, CodeDeploy redeploys the last known good revision as a new deployment.</li></ul><h2 id="codestar" tabindex="-1">CodeStar <a class="header-anchor" href="#codestar" aria-label="Permalink to “CodeStar”">​</a></h2><ul><li>CodeStar is an integrated solution that regroups: GitHub, CodeCommit, CodeBuild, CodeDeploy, CloudFormation, CodePipeline, CloudWatch</li><li>Helps quickly create &quot;CICD-ready&quot; projects for EC2, Lambda, Beanstalk</li><li>Supported languages: C#, Go, HTML 5, Java, Node.js, PHP, Python, Ruby</li><li>Issue tracking integration with: JIRA / GitHub Issues</li><li>Ability to integrate with Cloud9 to obtain a web IDE (not all regions)</li><li>One dashboard to view all your components</li><li>Free service, pay only for the underlying usage of other services</li><li>Limited Customization</li></ul><h3 id="create-a-codestar-project" tabindex="-1">Create a CodeStar Project <a class="header-anchor" href="#create-a-codestar-project" aria-label="Permalink to “Create a CodeStar Project”">​</a></h3><ol><li><p>Goto CodeStar --&gt; Create project</p></li><li><p>Templates:</p><ul><li>Application type: (Web service) ...</li><li>AWS service: (AWS Elastic Beanstalk) (AWS EC2) (AWS Lambda) ...</li></ul></li><li><p>Project details:</p><ul><li>Project name:</li><li>Project ID:</li><li>Project repository: (CodeCommit) (GitHub)</li><li>Repository name:</li><li>EC2 Configuration: <ul><li>Instance type: t2.micro</li><li>VPC:</li><li>Subnet:</li><li>Key pair:</li></ul></li></ul></li><li><p>Review</p></li></ol>`,62)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
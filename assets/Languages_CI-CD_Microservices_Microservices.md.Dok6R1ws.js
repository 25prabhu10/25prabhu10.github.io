import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"Microservices","description":"An architectural style of small, independent services to build large applications","frontmatter":{"title":"Microservices","description":"An architectural style of small, independent services to build large applications","date":"2023-03-24T00:00:00.000Z","lastmod":"2024-07-13T00:00:00.000Z"},"headers":[],"relativePath":"Languages/CI-CD/Microservices/Microservices.md","filePath":"Languages/CI-CD/Microservices/Microservices.md","lastUpdated":1727192602000}`);var a={name:`Languages/CI-CD/Microservices/Microservices.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="microservices" tabindex="-1">Microservices <a class="header-anchor" href="#microservices" aria-label="Permalink to “Microservices”">​</a></h1><p>Microservices is an architectural style for building applications as a collection of small, independent services. Imagine it like a large, complex machine being broken down into smaller, specialized tools that work together</p><p>Key principles of microservices are:</p><ul><li><p><strong>Independent and Autonomous</strong>: Each microservice should be self-contained and operate independently. This means they have their codebase, database, and business logic</p></li><li><p><strong>Loose Coupling</strong>: Microservices should rely as little as possible on each other. They communicate through well-defined APIs (Application Programming Interfaces) instead of being tightly interwoven</p></li><li><p><strong>Small and Focused</strong>: Microservices are designed to be small and focused on a single function. This makes them easier to understand, develop, test, and deploy</p></li><li><p><strong>Technology Agnostic</strong>: Microservices can be built with different programming languages and technologies, allowing developers to choose the best tool for the job</p></li><li><p><strong>Discoverable</strong>: Microservices need to be discoverable by other services in the system. This is often achieved through <strong>service registries</strong></p></li></ul><p>Following these principles allows for the following:</p><ul><li><p><strong>Faster Development and Deployment</strong>: Changes to one microservice can be made and deployed independently without affecting the entire application</p></li><li><p><strong>Scalability</strong>: Different application parts can be scaled up or down independently based on their needs</p></li><li><p><strong>Increased Fault Tolerance</strong>: If one microservice fails, it should not bring down the entire application</p></li><li><p><strong>Improved Maintainability</strong>: Smaller, focused services are easier to understand and maintain</p></li></ul><p>Meanwhile, in monolithic architecture, a single, self-contained application, all the functionalities are tightly coupled within one unit</p><p>In monolithic applications:</p><ul><li>All components are part of a single unit</li><li>Everything is developed, deployed, and scaled as 1 unit</li><li>App usually must be written with one tech stack</li><li>Teams need to be careful not to affect each other&#39;s work</li><li>Single artifact, hence redeploy the entire application on each update</li></ul><p>Key differences between monolithic and microservices architectures:</p><table tabindex="0"><thead><tr><th></th><th>Monolithic</th><th>Microservices</th></tr></thead><tbody><tr><td>Structure</td><td><strong>Single, unified codebase</strong> for the entire application</td><td>Collection of small, <strong>independent services</strong></td></tr><tr><td>Deployment</td><td>The entire application needs to be <strong>deployed together</strong></td><td>Services can be <strong>deployed independently</strong></td></tr><tr><td>Scalability</td><td>Scaling the entire application can be complex</td><td>Individual services can be scaled independently</td></tr><tr><td>Development</td><td>Changes require modifications to the entire codebase</td><td>Changes can be made to individual services</td></tr><tr><td>Complexity</td><td><strong>Simpler to understand</strong> and manage for small applications</td><td>These can be more <strong>complex to manage</strong> due to their distributed nature</td></tr></tbody></table><ul><li>Choosing the right approach depends on factors like the size and complexity of the application</li></ul><p>While microservices offer advantages, there are also challenges to consider:</p><ul><li><p><strong>Increased Complexity</strong>: Managing many independent services can be more complex than a single monolithic codebase. This includes distributed tracing, monitoring, and configuration management</p></li><li><p><strong>Distributed Data Management</strong>: Data consistency across services can be tricky. Techniques like CQRS (Command Query Responsibility Segregation) and Event Sourcing can help</p></li><li><p><strong>Debugging and Monitoring</strong>: Troubleshooting issues become more complex as requests flow across multiple services. Distributed tracing tools are essential</p></li><li><p><strong>Integration Challenges</strong>: Microservices need to communicate effectively through APIs. Defining and maintaining stable APIs requires ongoing effort</p></li><li><p><strong>Development Team Culture</strong>: Microservices thrive with a DevOps culture that encourages collaboration and independent ownership</p></li><li><p><strong>Potential for Redundancy</strong>: Duplication of functionality across services can occur if not carefully planned</p></li></ul><p>While these challenges exist, with careful planning and tooling, microservices can be a powerful way to build scalable and maintainable applications</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>The Options</span></span>
<span class="line"><span></span></span>
<span class="line"><span>             ^</span></span>
<span class="line"><span>             |</span></span>
<span class="line"><span>             | Distributed BBoM           Microservices</span></span>
<span class="line"><span>             |</span></span>
<span class="line"><span>Distribution |</span></span>
<span class="line"><span>             |</span></span>
<span class="line"><span>             | Big Ball of Mud (BBoM)     Modular Monolith</span></span>
<span class="line"><span>             |</span></span>
<span class="line"><span>              -----------------------------------------------&gt;</span></span>
<span class="line"><span>                               Modularisation</span></span></code></pre></div><p>Are you sure?</p><h2 id="service-registry" tabindex="-1">Service Registry <a class="header-anchor" href="#service-registry" aria-label="Permalink to “Service Registry”">​</a></h2><p>How applications and services locate each other</p><h2 id="load-balancer" tabindex="-1">Load Balancer <a class="header-anchor" href="#load-balancer" aria-label="Permalink to “Load Balancer”">​</a></h2><p>Efficiently distributes network traffic across a group of backend services</p><h2 id="circuit-breaker" tabindex="-1">Circuit Breaker <a class="header-anchor" href="#circuit-breaker" aria-label="Permalink to “Circuit Breaker”">​</a></h2><p>Stops an application from performing an operation that is likely to fail</p><h2 id="api-gateway" tabindex="-1">API Gateway <a class="header-anchor" href="#api-gateway" aria-label="Permalink to “API Gateway”">​</a></h2><p>A server that is the single entry point into the system</p><h2 id="external-configuration" tabindex="-1">External Configuration <a class="header-anchor" href="#external-configuration" aria-label="Permalink to “External Configuration”">​</a></h2><p>Keeps the configuration information in a centralized external store</p><h2 id="bounded-context" tabindex="-1">Bounded Context <a class="header-anchor" href="#bounded-context" aria-label="Permalink to “Bounded Context”">​</a></h2><p>The boundary of a model that represents its concepts, relationships, and rules</p><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to “References”">​</a></h2><ul><li><a href="https://redis.com/blog/5-microservices-misconceptions/?utm_source=marketo&amp;utm_medium=email&amp;utm_campaign=March_2023_newsletter&amp;mkt_tok=OTE1LU5GRC0xMjgAAAGKjJhaOSj_kmp5uYNVRxI3cr5ViVBgiFI6mr87hD69pBGwrwvDbZzEzlmO7XbYqcbrEQ-w2Wm6NOHSinzvW8YwguMCP8kupyLp48LE4VIZH43xzdc" target="_blank" rel="noreferrer">5 Microservices Misconceptions</a></li></ul>`,31)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
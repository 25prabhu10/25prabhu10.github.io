import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"RDBMS","description":"Relational Database Management System (RDBMS)","frontmatter":{"title":"RDBMS","description":"Relational Database Management System (RDBMS)","date":"2023-02-04T00:00:00.000Z","lastmod":"2024-08-22T00:00:00.000Z"},"headers":[],"relativePath":"Concepts/Databases/RDBMS.md","filePath":"Concepts/Databases/RDBMS.md","lastUpdated":1756574703000}`);var a={name:`Concepts/Databases/RDBMS.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="relational-database-management-system-rdbms" tabindex="-1">Relational Database Management System (RDBMS) <a class="header-anchor" href="#relational-database-management-system-rdbms" aria-label="Permalink to “Relational Database Management System (RDBMS)”">​</a></h1><blockquote><p>A Relational Model of Data for Large Shared Data Banks - Ted Codd (1970)</p></blockquote><ul><li>A few related tables form a relational database</li><li><em>Relational Algebra</em> allows us to retrieve data efficiently</li></ul><p>Relationships: tell you how much of the data from foreign key field can be seen in the primary key column of the table that data is related to and vice-versa</p><ul><li>Cardinality constraints</li></ul><p>Types of relationships:</p><ul><li><p>One-to-Many relationships: one value from a column under a table can be found many times in the column in the other table</p></li><li><p>One-to-One</p></li><li><p>Many-to-Many</p></li></ul><p>Query Execution Diagram? Explain?</p><h2 id="transactional" tabindex="-1">Transactional <a class="header-anchor" href="#transactional" aria-label="Permalink to “Transactional”">​</a></h2><p>Transaction is:</p><ul><li>A collection of queries</li><li>Treated as one unit of work</li><li>E.g. Account deposit (<code>SELECT</code>, <code>UPDATE</code>, <code>UPDATE</code>)</li></ul><p>A transactional database is one in which all changes and queries appear to be <strong>Atomic</strong>, <strong>Consistent</strong>, <strong>Isolated</strong>, and <strong>Durable</strong> (<a href="#acid">ACID</a>)</p><p>Transaction Lifespan:</p><ul><li>Transaction <code>BEGIN</code></li><li>Transaction <code>COMMIT</code></li><li>Transaction <code>ROLLBACK</code></li><li>Transaction unexpected ending = <code>ROLLBACK</code> (e.g. crash)</li></ul><p>Nature of Transactions:</p><ul><li>Usually Transactions are used to change and modify data</li><li>However, it is perfectly normal to have a read only transaction</li><li>Example, you want to generate a report and you want to get consistent snapshot based at the time of transaction</li></ul><p><em>Example:</em></p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- Transaction</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- ACCOUNT_ID BALANCE</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">--    1         $1000</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">--    2         $500</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- Send $100 From Account 1 to Account 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> TX1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- Check if ACCOUNT 1 contains the amount</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> BALANCE </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> ACCOUNT </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> ID </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- If BALANCE &gt; 100 then send amount</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> ACCOUNT </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> BALANCE </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> BALANCE </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> ID </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> ACCOUNT </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> BALANCE </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> BALANCE </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> ID </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">COMMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> TX1</span></span></code></pre></div><h3 id="acid" tabindex="-1">ACID <a class="header-anchor" href="#acid" aria-label="Permalink to “ACID”">​</a></h3><ol><li><a href="#atomicity">Atomicity</a></li><li><a href="#isolation">Isolation</a></li><li><a href="#consistency">Consistency</a></li><li><a href="#durability">Durability</a></li></ol><h4 id="atomicity" tabindex="-1">Atomicity <a class="header-anchor" href="#atomicity" aria-label="Permalink to “Atomicity”">​</a></h4><ul><li>All queries in a transaction must succeed</li><li>If one query fails, all prior successful queries in the transaction should rollback</li><li>If the database went down prior to a commit of a transaction, all the successful queries in the transactions should rollback</li></ul><p><em>Example:</em></p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- Transaction</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- ACCOUNT_ID BALANCE</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">--    1         $1000</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">--    2         $500</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- Send $100 From Account 1 to Account 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> TX1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- Check if ACCOUNT 1 contains the amount</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> BALANCE </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> ACCOUNT </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> ID </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- If BALANCE &gt; 100 then send amount</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> ACCOUNT </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> BALANCE </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> BALANCE </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> ID </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- Database crashed, last update failed</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- ACCOUNT_ID BALANCE</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">--    1         $900</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">--    2         $500</span></span></code></pre></div><ul><li>After we restarted the machine the first account has been debited but the other account has not been credited</li><li>This is really bad as we just lost data, and the information is inconsistent</li><li>An atomic transaction is a transaction that will rollback all queries if one or more queries failed</li><li>The database should clean this up after restart</li></ul><h4 id="isolation" tabindex="-1">Isolation <a class="header-anchor" href="#isolation" aria-label="Permalink to “Isolation”">​</a></h4><ul><li>Can my in-flight transaction see changes made by other transactions?</li></ul><p>Read phenomena: The ANSI/ISO standard SQL 92 refers to three different read phenomena when a transaction retrieves data that another transaction might have updated</p><p><em>Example:</em></p><table tabindex="0"><thead><tr><th>id</th><th>name</th><th>age</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>20</td></tr><tr><td>2</td><td>Bob</td><td>25</td></tr></tbody></table><ol><li><p>Dirty reads: A <em>dirty read</em> (aka uncommitted dependency) occurs when a transaction retrieves a row that has been <strong>updated by another transaction</strong> that is <strong>not yet committed</strong></p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- Transaction 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- retrieves 20</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- Transaction 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 21</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- no commit here</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- Transaction 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- READ UNCOMMITTED retrieves 21 (dirty read)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- READ COMMITTED retrieves 20 (dirty read has been avoided)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- REPEATABLE READ retrieves 20 (dirty read has been avoided)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- SERIALIZABLE retrieves 20 (dirty read has been avoided)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">COMMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- Transaction 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">ROLLBACK</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span></code></pre></div></li><li><p>Non-repeatable reads: A <em>non-repeatable read</em> occurs when a transaction retrieves a row twice and that row is updated by another <strong>transaction that is committed</strong> in between</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- Transaction 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- retrieves 20</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- Transaction 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 21</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">COMMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- Transaction 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- READ UNCOMMITTED retrieves 21 (non-repeatable read)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- READ COMMITTED retrieves 21 (non-repeatable read)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- REPEATABLE READ retrieves 20 (non-repeatable read has been avoided)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- SERIALIZABLE retrieves 20 (non-repeatable read has been avoided)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">COMMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span></code></pre></div></li><li><p>Phantom reads: A <em>phantom read</em> occurs when a transaction retrieves a set of rows twice and new rows are <strong>inserted into or removed</strong> from that set by another transaction that is committed in between</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- Transaction 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 17</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- Transaction 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Carol</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">26</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">COMMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- Transaction 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 17</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- READ UNCOMMITTED retrieves Alice, Bob and Carol (phantom read)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- READ COMMITTED retrieves Alice, Bob and Carol (phantom read)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- REPEATABLE READ retrieves Alice, Bob and Carol (phantom read)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- SERIALIZABLE retrieves Alice and Bob (phantom read has been avoided)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">COMMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span></code></pre></div></li></ol><ul><li><p>Lost updates:</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- Transaction 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- Transaction 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 50</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">COMMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- Transaction 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- retrieves 70</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- expected 30</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">-- UPDATE in transaction was lost</span></span></code></pre></div></li><li><p>Isolation Levels for in-flight transactions:</p><ul><li><p><strong>Read uncommitted</strong>: No Isolation, any change from the outside is visible to the transaction, committed or not</p></li><li><p><strong>Read committed</strong>: Each query in a transaction only sees committed changes by other transactions</p></li><li><p><strong>Repeatable Read</strong>: The transaction will make sure that when a query reads a row, that row will remain unchanged while its running</p></li><li><p><strong>Snapshot</strong>: Each query in a transaction only sees changes that have been committed up to the start of the transaction. It&#39;s like a snapshot version of the database at that moment</p></li><li><p><strong>Serializable</strong>: Transactions are run as if they serialized one after the other</p></li><li><p><strong>Each DBMS implements Isolation level differently</strong></p></li></ul></li><li><p>Isolation levels vs read phenomena:</p></li></ul><table tabindex="0"><thead><tr><th>Isolation level</th><th style="text-align:center;">Dirty read</th><th style="text-align:center;">Non-repeatable read</th><th style="text-align:center;">Phantom read</th></tr></thead><tbody><tr><td>Serializable</td><td style="text-align:center;">no</td><td style="text-align:center;">no</td><td style="text-align:center;">no</td></tr><tr><td>Repeatable read</td><td style="text-align:center;">no</td><td style="text-align:center;">no</td><td style="text-align:center;">yes</td></tr><tr><td>Read committed</td><td style="text-align:center;">no</td><td style="text-align:center;">yes</td><td style="text-align:center;">yes</td></tr><tr><td>Read uncommitted</td><td style="text-align:center;">yes</td><td style="text-align:center;">yes</td><td style="text-align:center;">yes</td></tr></tbody></table><p>Database Implementation of Isolation:</p><ul><li><p>Each DBMS implements Isolation level differently</p></li><li><p><strong>Pessimistic</strong>: Row level locks, table locks, page locks to avoid lost updates</p></li><li><p><strong>Optimistic</strong>: No locks, just track if things changed and fail the transaction if so</p></li><li><p>Repeatable read &quot;locks&quot; the rows it reads but it could be expensive if you read a lot of rows, postgres implements RR as snapshot. That is why you don&#39;t get phantom reads with postgres in repeatable read</p></li><li><p>Serializable are usually implemented with optimistic concurrency control, you can implement it pessimistically with SELECT FOR UPDATE</p></li></ul><h4 id="consistency" tabindex="-1">Consistency <a class="header-anchor" href="#consistency" aria-label="Permalink to “Consistency”">​</a></h4><ul><li><p>Consistency in Data:</p><ul><li>Defined by the user</li><li>Referential integrity (foreign keys)</li><li>Atomicity</li><li>Isolation</li></ul><p><em>Example:</em></p><ul><li>Pictures</li></ul><table tabindex="0"><thead><tr><th style="text-align:center;">ID (<strong>PK</strong>)</th><th style="text-align:center;">BLOB</th><th style="text-align:center;">LIKES</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">xx</td><td style="text-align:center;">2</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">xx</td><td style="text-align:center;">1</td></tr></tbody></table><ul><li>Picture_Likes</li></ul><table tabindex="0"><thead><tr><th>USER (<strong>PK</strong>)</th><th style="text-align:center;">PICTURE_ID (<strong>PK</strong>)(<strong>FK</strong>)</th></tr></thead><tbody><tr><td>Jon</td><td style="text-align:center;">1</td></tr><tr><td>Edmond</td><td style="text-align:center;">1</td></tr><tr><td>Jon</td><td style="text-align:center;">2</td></tr></tbody></table><ul><li><p>Spot inconsistency in this data</p></li><li><p>Pictures</p></li></ul><table tabindex="0"><thead><tr><th style="text-align:center;">ID (<strong>PK</strong>)</th><th style="text-align:center;">BLOB</th><th style="text-align:center;">LIKES</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">xx</td><td style="text-align:center;">5</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">xx</td><td style="text-align:center;">1</td></tr></tbody></table><ul><li>Picture_Likes</li></ul><table tabindex="0"><thead><tr><th>USER (<strong>PK</strong>)</th><th style="text-align:center;">PICTURE_ID (<strong>PK</strong>)(<strong>FK</strong>)</th></tr></thead><tbody><tr><td>Jon</td><td style="text-align:center;">1</td></tr><tr><td>Edmond</td><td style="text-align:center;">1</td></tr><tr><td>Jon</td><td style="text-align:center;">2</td></tr><tr><td>Edmond</td><td style="text-align:center;">4</td></tr></tbody></table></li><li><p>Consistency in reads:</p><ul><li>If a transaction committed a change will a new transaction immediately see the change?</li><li>Affects the system as a whole</li><li>Relational and NoSQL databases suffer from this</li><li>Eventual consistency</li></ul></li></ul><h2 id="database-design-data-modelling" tabindex="-1">Database Design / Data Modelling <a class="header-anchor" href="#database-design-data-modelling" aria-label="Permalink to “Database Design / Data Modelling”">​</a></h2><ol><li><p>It&#39;s an ongoing process where basic Database is designed:</p><ul><li>Understand business data</li><li>Create a logical design <ul><li>Tables, Indexes, Columns (ER Diagram)</li></ul></li></ul></li><li><p>Normalization is done:</p><ul><li>Eliminate / Reduce: <ul><li>Data Redundancy</li><li>Data Anomalies</li><li>Data Inconsistency</li></ul></li></ul></li></ol><table tabindex="0"><thead><tr><th>De-normalized Database</th><th>Normalized Database</th></tr></thead><tbody><tr><td>Less Joins</td><td>More Joins</td></tr><tr><td>More Storage</td><td>Less Storage</td></tr><tr><td>High Data Redundancy</td><td>Low Data Redundancy</td></tr></tbody></table><ul><li><p>Database designer: plot the entire database system on a canvas using a visualization tool</p></li><li><p>Entity-Relationship (ER) diagram</p></li><li><p>Relational Schema: an existing idea of how the database must be organized</p><ul><li><p>Represents the concept database administrators must implement</p></li><li><p>Depict how a database is organized</p></li><li><p>Blueprints, or a plan for a database</p></li><li><p>Database Schema</p><ul><li>Table name</li><li>Primary Key: (column name will be underlined)</li><li>Foreign Key: (add (FK) in after the column name)</li><li>Other fields</li></ul></li></ul></li><li><p>Database Management = database design + creation + manipulation</p></li><li><p>Database Administrator: maintenance of database</p></li></ul><h2 id="normalization" tabindex="-1">Normalization <a class="header-anchor" href="#normalization" aria-label="Permalink to “Normalization”">​</a></h2><h2 id="schema" tabindex="-1">Schema <a class="header-anchor" href="#schema" aria-label="Permalink to “Schema”">​</a></h2><h2 id="database" tabindex="-1">Database <a class="header-anchor" href="#database" aria-label="Permalink to “Database”">​</a></h2><p>Main goal: organize huge amounts of data that can be quickly retrieved</p><ul><li><p><em>Entity</em>: the smallest unit that can contain a meaningful set of data</p><ul><li>An object we want to model &amp; store information about</li></ul></li><li><p>Data inside a column is known as <em>data value</em></p></li><li><p>Data values in a row make up a <em>record</em> (or <em>row</em>)(horizontal entity), a <em>record</em> is each entry that exists in a table</p></li><li><p><em>Field</em> (or <em>column</em>)(vertical entity)(entity instance): a column in a table containing specific information about every record in the table</p></li></ul><h2 id="table" tabindex="-1">Table <a class="header-anchor" href="#table" aria-label="Permalink to “Table”">​</a></h2><p>Tables are data organized in columns and rows</p><ul><li>An entity or database object</li></ul><p>A column (or a set of columns) whose value exists and is <strong>unique</strong> for every record in a table is called a <strong>primary key</strong></p><ul><li>Each table can have 1 and <strong>only 1 primary key</strong></li><li><strong>Cannot contain <code>NULL</code></strong> values</li><li>Primary key may be composed of a set of columns</li><li>Primary keys are the unique identifiers of a table</li><li>Not all tables will have a primary key</li></ul><p>Foreign key: identifies the relationships between tables, not the tables themselves</p><p>Unique Key: to specify that given field shouldn&#39;t have duplicate data</p><table tabindex="0"><thead><tr><th>Values</th><th>Primary Key</th><th>Unique Key</th></tr></thead><tbody><tr><td><code>NULL</code> values</td><td>no</td><td>yes</td></tr><tr><td>Number of keys</td><td>1</td><td>0, 1 or more</td></tr><tr><td>Multiple columns</td><td>yes</td><td>yes</td></tr></tbody></table><h2 id="view" tabindex="-1">View <a class="header-anchor" href="#view" aria-label="Permalink to “View”">​</a></h2><h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to “Index”">​</a></h2><p>Index is a lookup table for specific columns</p><ul><li>Indexes are expensive</li></ul><h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to “Reference”">​</a></h2><ul><li><a href="https://drawsql.app/" target="_blank" rel="noreferrer">drawSQL - Beautiful database diagrams</a></li></ul>`,60)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"Object-Oriented Programming (OOP)","description":"Object-oriented programming is a programming paradigm based on the concept of \\"objects\\"","frontmatter":{"title":"Object-Oriented Programming (OOP)","description":"Object-oriented programming is a programming paradigm based on the concept of \\"objects\\""},"headers":[],"relativePath":"Concepts/Designs/Programming_Paradigms/Object-Oriented_Programming.md","filePath":"Concepts/Designs/Programming_Paradigms/Object-Oriented_Programming.md","lastUpdated":1756574703000}`);var a={name:`Concepts/Designs/Programming_Paradigms/Object-Oriented_Programming.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="object-oriented-programming-oop" tabindex="-1">Object-Oriented Programming (OOP) <a class="header-anchor" href="#object-oriented-programming-oop" aria-label="Permalink to “Object-Oriented Programming (OOP)”">​</a></h1><p>Object-oriented programming is a programming paradigm based on the concept of <strong>&quot;<a href="#objects">objects</a>&quot;</strong>, which can contain data and code: data in the form of fields, and code, in the form of procedures</p><p>How to think like a programmer to solve problems:</p><ul><li><strong>Analysis</strong>: Understand the problem</li><li><strong>Design</strong>: Plan your solution</li><li><strong>Programming</strong>: Build the solution</li></ul><h2 id="objects" tabindex="-1">Objects <a class="header-anchor" href="#objects" aria-label="Permalink to “Objects”">​</a></h2><p>Objects are instances of a <a href="#classes">class</a></p><ul><li>Objects are instantiated from Classes</li><li>Objects are the building blocks of object-oriented programming</li><li>Attributes, properties, characteristics, state, fields, variables</li></ul><p>Objects are often referred to as Nouns:</p><ul><li>Things, People, Places, Ideas, Concepts</li><li>Can &quot;The&quot; be placed in front of it: &quot;The mug&quot;, &quot;The bank account&quot;, &quot;The time&quot;</li><li>Not verbs: &quot;The texting&quot;, or &quot;The ringing&quot; as they describe the behaviour of an object, not the object itself</li></ul><p>All objects have:</p><ol><li><p><strong>Identity</strong>: A unique identifier</p><ul><li>Olivia&#39;s coffee mug</li></ul></li><li><p><strong>Attributes</strong>: Properties, characteristics, state, fields, variables</p><ul><li>colour, size, fullness</li></ul></li><li><p><strong>Behaviours</strong>: Operations, methods, functions</p><ul><li><code>fill()</code>, <code>empty()</code>, <code>clean()</code></li></ul></li></ol><p>What is object assignment rule?</p><ul><li>Objects are assigned by reference, not by value</li><li>When you assign an object to a variable, you are assigning a reference to the object, not the object itself</li></ul><h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to “Classes”">​</a></h2><p>Class is the code template for creating program <a href="#objects">Objects</a></p><ul><li>A Class can be used to create multiple objects</li><li>A Class itself is not an Object</li></ul><p>Class Components:</p><ol><li><p>Name (type): What is it? (<code>RoundCookie</code>, <code>Car</code>)</p></li><li><p>Attributes (properties, data): What describes it? (<code>weight</code>, <code>colour</code>, <code>icing</code>)</p></li><li><p>Behaviour (operations): What can it do? (<code>decorate()</code>, <code>consume()</code>)</p></li></ol><h3 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to “Properties”">​</a></h3><p>Properties are the characteristics of an object</p><ul><li>Also known as attributes, fields, variables, or data members</li></ul><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to “Methods”">​</a></h3><p>A program procedure that can return a value</p><ul><li>Methods are functions that are defined as part of a class</li><li>They can only access data known to it&#39;s object</li></ul><h2 id="fundamental-ideas" tabindex="-1">Fundamental Ideas <a class="header-anchor" href="#fundamental-ideas" aria-label="Permalink to “Fundamental Ideas”">​</a></h2><p>There are 4 fundamental ideas in OOP:</p><ol><li><a href="#abstraction">Abstraction</a></li><li><a href="#encapsulation">Encapsulation</a></li><li><a href="#inheritance">Inheritance</a></li><li><a href="#polymorphism">Polymorphism</a></li></ol><h3 id="abstraction" tabindex="-1">Abstraction <a class="header-anchor" href="#abstraction" aria-label="Permalink to “Abstraction”">​</a></h3><p>Abstraction refers to only showing essential details and keep everything else hidden</p><ul><li><p><strong>Reduce complexity</strong> by <strong>hiding unnecessary details</strong></p></li><li><p>Modelling the relevant attributes and interactions of entities as classes to define an abstract representation of a system</p></li><li><p>Interface and Implementation:</p><ul><li>The interface refers to the way sections of code can communicate with one another. This typically is done through methods that each class can access</li><li>The implementation of these methods, or how these methods are coded, should be hidden</li><li>If classes are entangled, then one change creates a ripple effect that causes many more changes</li><li>Creating an interface through which classes can interact ensures that each piece can be individually developed</li><li>Abstraction allows the program to be worked on incrementally and prevents it from becoming entangled and complex</li><li>Determine specific points of contact that can act as an interface between classes, and only worry about the implementation when coding it</li></ul></li><li><p>Focus on essential qualities of something rather than one specific example</p></li><li><p>Understanding the idea</p></li><li><p>Discard what&#39;s unimportant</p></li></ul><p><em>Example:</em> To send an email using the class <code>EmailService</code>, we don&#39;t need to know how the email is sent. We only need to know the method <code>sendEmail()</code> to send the email</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> EmailService</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> sendEmail</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    connect</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Code to send email</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    disconnect</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  private</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> connect</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Code to connect to email server</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  private</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Code to authenticate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  private</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> disconnect</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Code to disconnect</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="encapsulation" tabindex="-1">Encapsulation <a class="header-anchor" href="#encapsulation" aria-label="Permalink to “Encapsulation”">​</a></h3><p>Encapsulation refers to bundling data with methods that can operate on that data within a class. Essentially, it is the idea of hiding data within a class, preventing anything outside that class from directly interacting with it</p><ul><li><p>Hiding the internal state and functionality of an object and only allowing access through a public set of functions</p></li><li><p>Keeps the programmer in control of access to data</p></li><li><p>Prevents the program from ending up in any strange or unwanted states</p></li><li><p>Containing the elements of an object, not just keep them together, but also protect them</p></li><li><p>We bundle an object&#39;s attributes or data along with the methods that operate on that data within the same unit or the same class</p></li><li><p>Restricting access to some of the object&#39;s components</p></li><li><p><strong>Black Box Testing</strong>: Closing off the inner workings of the cookie jar and only revealing specific inputs and outputs. You don&#39;t need to know how the &#39;request cookie&#39; method is implemented under the hood to use it</p></li><li><p>It&#39;s not about being secretive. It&#39;s about reducing dependencies between different parts of the application</p></li><li><p>Changes in one place won&#39;t cause a domino effect and require multiple changes elsewhere</p></li></ul><p><em>Example:</em> Lets say we have a <code>BankAccount</code> class with a <code>balance</code> attribute. We don&#39;t want to allow the balance to be set to a negative value. We can use encapsulation to ensure that the balance is only updated through a method that checks if the new balance is valid</p><ul><li>This prevents the balance from being set to an invalid value</li></ul><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> BankAccount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  private</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> balance</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Deposit</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> amount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">amount</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      balance</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +=</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> amount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Withdraw</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> amount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">amount</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> balance</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> amount</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">      balance</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> -=</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> amount</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> GetBalance</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> balance</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="inheritance" tabindex="-1">Inheritance <a class="header-anchor" href="#inheritance" aria-label="Permalink to “Inheritance”">​</a></h3><p>Inheritance is the principle that allows classes to <strong>derive from other classes</strong></p><ul><li>Ability to create new abstractions based on existing abstractions</li><li>Base new object or class on an existing one</li><li>Inherit the existing attributes and methods</li><li>Great form of <strong>code reuse</strong></li></ul><p>Inheritance involves creating new classes (subclasses or derived classes) based on existing classes (superclasses or base classes). Subclasses inherit properties and behaviours from their superclasses and can also add new features or override existing ones</p><ul><li>Superclass (Parent/Base class) --&gt; Inherited by --&gt; Subclass (Child/Derived class)</li><li>Inheritance is often described in terms of an <strong>&quot;is-a&quot; relationship</strong> (a subclass is a type of superclass)</li></ul><p><em>Example:</em> A <code>Car</code> class can be a superclass, and a <code>SUV</code> class can be a subclass. The <code>SUV</code> class inherits the properties and behaviours of the <code>Car</code> class</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Car</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Drive</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Code to drive the car</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Stop</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Code to stop the car</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> SUV</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Car</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> OffRoad</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Code to drive off-road</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p>Types of Inheritance:</p><ol><li><strong>Multiple Inheritance</strong>: Inherit from multiple Base classes (can get confusing). C++, Python</li><li><strong>Single Inheritance</strong>: Inherit from single Super class. Java, C#, Swift, Ruby</li></ol><h3 id="fragile-base-class-problem" tabindex="-1">Fragile Base Class Problem <a class="header-anchor" href="#fragile-base-class-problem" aria-label="Permalink to “Fragile Base Class Problem”">​</a></h3><p>The fragile base class problem is a software design issue that arises in object-oriented programming when changes made to a base class can inadvertently break the functionality of derived classes. This problem occurs due to the tight <a href="#coupling">coupling</a> between the base class and the derived classes in inheritance hierarchies</p><ol><li><p><strong>Inheritance Coupling</strong>: Inheritance creates a tight coupling between the base class (superclass) and the derived classes (subclasses). Any changes made to the base class can potentially affect the behaviour of the derived classes</p></li><li><p><strong>Limited Extensibility</strong>: The fragile base class problem limits the extensibility of the software system, as modifications to the base class can become increasingly risky and costly over time. Developers may avoid making changes due to the fear of breaking existing functionality (<em>brittle software</em>)</p></li></ol><p>Mitigation strategies:</p><ul><li><strong>Favour <a href="#composition">Composition</a> over Inheritance</strong>: Use composition to create relationships between classes instead of inheritance. This approach can help reduce the coupling between classes and make the system more flexible and maintainable</li><li>Software developers can use design principles such as the <strong>Open/Closed Principle (OCP)</strong> and the <strong>Dependency Inversion Principle (DIP)</strong> to design classes that are more extensible and less prone to the fragile base class proble</li></ul><h3 id="polymorphism" tabindex="-1">Polymorphism <a class="header-anchor" href="#polymorphism" aria-label="Permalink to “Polymorphism”">​</a></h3><p>Polymorphism describes methods that are able to take on many forms</p><ul><li>Polymorphism means having many forms <ul><li><strong>Poly</strong>: Many</li><li><strong>Morph</strong>: Form</li></ul></li></ul><p>Polymorphism is the ability of an object to take on many forms. It allows methods to do different things based on the object that they are acting upon</p><ul><li>Ability to implement inherited properties or methods in different ways across multiple abstractions</li></ul><p>There are multiple form of polymorphism:</p><ol><li><p><strong>Dynamic Polymorphism</strong>: Uses the same interface for methods on different types of objects</p><ul><li>Occurs during the runtime of the program</li><li>Describes when a method signature is in both a subclass and a superclass</li><li>The methods share the same name but have different implementation</li><li><strong>Method overriding</strong>: When a subclass provides a specific implementation of a method that is already provided by one of its superclasses</li><li>Inherit from the same abstract class with same methods</li><li>Inheritance, abstract classes, and interfaces are all possible implementations of polymorphism</li></ul><p><em>Example:</em> A <code>Shape</code> class with a <code>draw()</code> method. A <code>Circle</code> class and a <code>Square</code> class that inherit from the <code>Shape</code> class. The <code>Circle</code> class and \`Square</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Shape</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> virtual</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Draw</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Code to draw the shape</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Circle</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Shape</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Draw</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Code to draw a circle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Square</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Shape</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Draw</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // Code to draw a square</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> square</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Square</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">square</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Draw</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // Draw a square</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> circle</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Circle</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">circle</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Draw</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // Draw a circle</span></span></code></pre></div></li><li><p><strong>Static (Compile-Time) Polymorphism</strong>: Uses <strong>method overloading</strong></p><ul><li><p>Occurs during compile-time rather than during runtime</p></li><li><p>This refers to when multiple methods with the same name but different arguments are defined in the same class</p></li><li><p>This can done through method overloading. Despite the methods having the same name, their signatures are different due to their different arguments</p></li><li><p>Ways to differentiate methods of the same name:</p><ul><li>Different number of parameters</li><li>Different types of parameters</li><li>Different order of parameters</li></ul></li><li><p>Method overloading can cause trouble of you do not keep straight which parameters you need for which implementation. Calling the wrong method because not realizing different arguments types were passed</p></li><li><p>Implements multiple methods with the same name, but different parameters</p></li></ul><p><em>Example:</em> A <code>Calculator</code> class with an <code>Add()</code> method. The <code>Add()</code> method can take two integers, two doubles, or two strings</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Calculator</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> calculator</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Calculator</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">calculator</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">calculator</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2.5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // 4.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">calculator</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">World</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // HelloWorld</span></span></code></pre></div></li></ol><h2 id="coupling-and-cohesion" tabindex="-1">Coupling and Cohesion <a class="header-anchor" href="#coupling-and-cohesion" aria-label="Permalink to “Coupling and Cohesion”">​</a></h2><p>Coupling and Cohesion are two important concepts in software design</p><h3 id="coupling" tabindex="-1">Coupling <a class="header-anchor" href="#coupling" aria-label="Permalink to “Coupling”">​</a></h3><p>Coupling is the degree of interdependence between software modules</p><ul><li><p><strong>Tight Coupling</strong>: When a class is dependent on another class</p><ul><li>Changes in one class require changes in another class</li><li>Can lead to difficult to maintain code</li></ul></li><li><p><strong>Loose Coupling</strong>: When a class is not dependent on another class</p><ul><li>Changes in one class do not require changes in another class</li><li>Allows for greater flexibility and maintainability</li></ul></li></ul><p>To achieve loose coupling:</p><ul><li><strong>Dependency Injection</strong>: Pass dependencies to a class instead of creating them inside the class</li><li><strong>Interfaces</strong>: Use interfaces to define the contract between classes</li><li><strong>Event-Driven Programming</strong>: Use events to communicate between classes</li><li><strong>Publish-Subscribe Pattern</strong>: Use the publish-subscribe pattern to communicate between classes</li></ul><h3 id="cohesion" tabindex="-1">Cohesion <a class="header-anchor" href="#cohesion" aria-label="Permalink to “Cohesion”">​</a></h3><p>Cohesion is the degree to which the elements inside a module belong together</p><ul><li><p><strong>High Cohesion</strong>: When the elements inside a module belong together</p><ul><li>The module is focused on a single task</li><li>The module is easier to understand and maintain</li></ul></li><li><p><strong>Low Cohesion</strong>: When the elements inside a module do not belong together</p><ul><li>The module is focused on multiple tasks</li><li>The module is harder to understand and maintain</li></ul></li></ul><p>To achieve high cohesion:</p><ul><li><strong>Single Responsibility Principle (SRP)</strong>: A class should have only one reason to change</li><li><strong>Separation of Concerns</strong>: Divide a program into distinct sections, each addressing a separate concern</li><li><strong>Modular Programming</strong>: Break a program into smaller, more manageable pieces</li></ul><h3 id="coupling-and-cohesion-1" tabindex="-1">Coupling and Cohesion <a class="header-anchor" href="#coupling-and-cohesion-1" aria-label="Permalink to “Coupling and Cohesion”">​</a></h3><ul><li><p><strong>High Cohesion and Low Coupling</strong>: The ideal situation</p><ul><li>Modules are focused on a single task</li><li>Modules are not dependent on each other</li><li>Modules are easier to understand and maintain</li></ul></li><li><p><strong>Low Cohesion and High Coupling</strong>: The worst situation</p><ul><li>Modules are focused on multiple tasks</li><li>Modules are dependent on each other</li><li>Modules are harder to understand and maintain</li></ul></li></ul><h2 id="composition-and-aggregation" tabindex="-1">Composition and Aggregation <a class="header-anchor" href="#composition-and-aggregation" aria-label="Permalink to “Composition and Aggregation”">​</a></h2><p>Composition and Aggregation are two ways to model relationships between classes</p><h3 id="composition" tabindex="-1">Composition <a class="header-anchor" href="#composition" aria-label="Permalink to “Composition”">​</a></h3><p>Composition is a <strong>&quot;has-a&quot;</strong> relationship between classes</p><p><strong>Composition</strong>: When a class contains an object of another class</p><ul><li>The object is part of the class</li><li>The object cannot exist without the class</li><li>The object is created and destroyed with the class</li></ul><p><em>Examples:</em></p><ul><li>A <code>Car</code> class contains an <code>Engine</code> object</li><li>A <code>House</code> class contains a <code>Room</code> object</li></ul><p>Composition involves creating complex objects by combining simpler objects or components. In composition, objects are assembled together to form larger structures, with each component object maintaining its own state and behaviour</p><p><strong>Prefer composition over <a href="#inheritance">inheritance</a></strong>, as it is more flexible and allows for greater code reuse</p><p>When to use Composition:</p><ul><li>When you need more flexibility in constructing objects by assembling smaller, reusable components</li><li>When there is no clear &quot;is-a&quot; relationship between classes, and a &quot;has-a&quot; relationship is more appropriate like a <code>Car</code> has an <code>Engine</code></li><li>When you want to avoid the limitations of inheritance, such as tight coupling and the fragile base class problem</li></ul><p>When to use Inheritance:</p><ul><li>When there is a clear &quot;is-a&quot; relationship between classes, and subclass objects can be treated as instances of their superclass like a <code>SUV</code> is a <code>Car</code></li><li>When you want to promote code reuse by inheriting properties and behaviours from existing classes</li><li>When you want to leverage polymorphism to allow objects of different subclasses to be treated as uniformly through their common superclass interface</li></ul>`,87)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"Hash Function","description":"A function that can be used to map data of arbitrary size to fixed-size values","frontmatter":{"title":"Hash Function","description":"A function that can be used to map data of arbitrary size to fixed-size values"},"headers":[],"relativePath":"Concepts/Data-Structures_and_Algorithms/Algorithms/Hash_Function.md","filePath":"Concepts/Data-Structures_and_Algorithms/Algorithms/Hash_Function.md","lastUpdated":1756574703000}`);var a={name:`Concepts/Data-Structures_and_Algorithms/Algorithms/Hash_Function.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="hash-function" tabindex="-1">Hash Function <a class="header-anchor" href="#hash-function" aria-label="Permalink to “Hash Function”">​</a></h1><p>A function that can be used to map data of arbitrary size to fixed-size values</p><ul><li><p>The values returned by a hash function are called <em>hash values</em>, <em>hash codes</em>, <em>digests</em>, or <em>simply hashes</em>.</p></li><li><p>The values are usually used to index a fixed-size table called a <em><a href="./../Data-Structures/Hash_Table.html">hash table</a></em>.</p></li><li><p>Use of a hash function to index a hash table is called <em>hashing</em> or <em>scatter storage addressing</em>.</p></li></ul><h2 id="consistent-hashing" tabindex="-1">Consistent Hashing <a class="header-anchor" href="#consistent-hashing" aria-label="Permalink to “Consistent Hashing”">​</a></h2><p>Consistent Hashing is a <strong>distributed hashing scheme</strong> that operates independently of the number of servers or objects in a distributed hash table.</p><ul><li><p>It may be necessary or desirable to split a hash table into several parts, hosted by different servers.</p></li><li><p>This is needed to achieve horizontal scaling</p></li></ul><p>To determine how to split the hash table, we can take hash <em>modulo</em> of the number of servers:</p><p><code>server = hash(key) % N</code></p><ul><li><code>N</code> is the size of the pool</li></ul><p>Problems with this method:</p><ul><li><p>Difficult to increase or decrease the pool size</p></li><li><p>Almost all the keys need to be remapped if a new server is added or removed</p></li><li><p>Hash space</p></li><li><p>Hash ring</p></li></ul><p>Problems with Consistent Hashing:</p><ul><li><p>Uneven distribution</p><ul><li>Virtual nodes are used to overcome this issue</li></ul></li><li><p>Amazon DynamoDB</p></li><li><p>Apache Cassandra</p></li></ul><h2 id="rendezvous-hashing" tabindex="-1">Rendezvous hashing <a class="header-anchor" href="#rendezvous-hashing" aria-label="Permalink to “Rendezvous hashing”">​</a></h2><p><strong>Rendezvous</strong> or <strong>highest random weight (HRW) hashing</strong> is an algorithm that allows clients to achieve distributed agreement on a set of <code>k</code> options out of a possible set of <code>n</code> options.</p><ul><li>Rendezvous hashing is both much simpler and more general than <a href="#consistent-hashing">consistent hashing</a>, which becomes a special case (for <code>k=1</code>) of rendezvous hashing.</li></ul><h2 id="cryptographic-hash-functions" tabindex="-1">Cryptographic Hash Functions <a class="header-anchor" href="#cryptographic-hash-functions" aria-label="Permalink to “Cryptographic Hash Functions”">​</a></h2><p>Check out <a href="./../../Application_Security/Cryptography.html#hashing">Hashing</a></p>`,18)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
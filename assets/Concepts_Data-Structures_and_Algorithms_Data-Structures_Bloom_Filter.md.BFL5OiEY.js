import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"Bloom Filter","description":"Bloom Filter","frontmatter":{"title":"Bloom Filter","description":"Bloom Filter"},"headers":[],"relativePath":"Concepts/Data-Structures_and_Algorithms/Data-Structures/Bloom_Filter.md","filePath":"Concepts/Data-Structures_and_Algorithms/Data-Structures/Bloom_Filter.md","lastUpdated":1756574703000}`);var a={name:`Concepts/Data-Structures_and_Algorithms/Data-Structures/Bloom_Filter.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="bloom-filter" tabindex="-1">Bloom Filter <a class="header-anchor" href="#bloom-filter" aria-label="Permalink to “Bloom Filter”">​</a></h1><p>It is a space-efficient probabilistic data structure, conceived by <em>Burton Howard Bloom</em> in 1970, that is used to <strong>test whether an element is a member of a set</strong>.</p><p>Outcome of a Bloom filter:</p><ol><li><p>Firm No</p><ul><li>As <strong>false negative are not possible</strong></li></ul></li><li><p>Probably Yes</p><ul><li>As false positives are possible</li><li>So, it is probabilistic</li></ul></li></ol><ul><li><p>It uses less memory than <a href="./Hash_Table.html">hash tables</a> but it is less accurate</p></li><li><p>Items cannot be removed from Bloom filter</p></li></ul><p>To create Bloom filter, a <a href="./../Algorithms/Hash_Function.html">hashing function</a> with the following properties are required:</p><ul><li>Fast</li><li>Evenly and randomly distributed</li><li>Collisions are okay</li><li>Collisions should be rare</li></ul><p>Used in:</p><ul><li>Network routers</li><li>Databases</li><li>Browsers</li></ul><h2 id="working" tabindex="-1">Working <a class="header-anchor" href="#working" aria-label="Permalink to “Working”">​</a></h2><p>A empty bloom filter is a <strong>bit array</strong> of <code>m</code> bits, all set to zero</p><ul><li>We need <code>k</code> number of <strong>hash functions</strong> to calculate the hashes for a given input.</li></ul>`,12)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
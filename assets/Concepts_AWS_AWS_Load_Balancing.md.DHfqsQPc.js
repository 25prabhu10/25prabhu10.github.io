import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"Load Balancing","description":"Load Balancing","frontmatter":{"title":"Load Balancing","description":"Load Balancing","prev":"./AWS"},"headers":[],"relativePath":"Concepts/AWS/AWS_Load_Balancing.md","filePath":"Concepts/AWS/AWS_Load_Balancing.md","lastUpdated":1756574703000}`);var a={name:`Concepts/AWS/AWS_Load_Balancing.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="load-balancing" tabindex="-1">Load Balancing <a class="header-anchor" href="#load-balancing" aria-label="Permalink to “Load Balancing”">​</a></h1><p>Load balancers are servers that forward internet traffic to multiple servers (EC2 Instances) downstream.</p><h2 id="why-use-a-load-balancer" tabindex="-1">Why use a load balancer? <a class="header-anchor" href="#why-use-a-load-balancer" aria-label="Permalink to “Why use a load balancer?”">​</a></h2><ul><li><p>Spread load across multiple downstream instances</p></li><li><p>Expose a single point of access (DNS) to your application</p></li><li><p>Seamlessly handle failures of downstream instances</p></li><li><p>Do regular health checks to your instances</p></li><li><p>Provide SSL termination (HTTPS) for your websites</p></li><li><p>Enforce stickiness with cookies</p></li><li><p>High availability across zones</p></li><li><p>Separate public traffic from private traffic</p></li><li><p>An ELB (EC2 Load Balancer) is a managed load balancer</p><ul><li>AWS guarantees that it will be working</li><li>AWS takes care of upgrades, maintenance, high availability</li><li>AWS provides only a few configuration knobs</li></ul></li><li><p>It costs less to setup your own load balancer but it will be a lot more effort on your end.</p></li><li><p>It is integrated with many AWS offerings / services</p></li></ul><h2 id="health-checks" tabindex="-1">Health Checks <a class="header-anchor" href="#health-checks" aria-label="Permalink to “Health Checks”">​</a></h2><ul><li>Health Checks are crucial for Load Balancers</li><li>They enable the load balancer to know if instances it forwards traffic to are available to reply to requests</li><li>The health check is done on a port and a route (/health is common)</li><li>If the response is not 200 (OK), then the instance is unhealthy</li></ul><h2 id="types-of-load-balancer-on-aws" tabindex="-1">Types of load balancer on AWS <a class="header-anchor" href="#types-of-load-balancer-on-aws" aria-label="Permalink to “Types of load balancer on AWS”">​</a></h2><ul><li>AWS has 3 kinds of managed Load Balancers</li><li>Classic Load Balancer (v1 - old generation) - 2009 <ul><li>HTTP, HTTPS, TCP</li></ul></li><li>Application Load Balancer (v2 - new generation) - 2016 <ul><li>HTTP, HTTPS, WebSocket</li></ul></li><li>Network Load Balancer (v2 - new generation) - 2017 <ul><li>TCP, TLS (secure TCP) &amp; UDP</li></ul></li><li>Gateway Load Balancer (Introduced on Nov 10th 2020)</li><li>Overall, it is recommended to use the newer / v2 generation load balancers as they provide more features</li><li>You can setup internal (private) or external (public) ELBs</li></ul><h3 id="load-balancer-good-to-know" tabindex="-1">Load Balancer Good to Know <a class="header-anchor" href="#load-balancer-good-to-know" aria-label="Permalink to “Load Balancer Good to Know”">​</a></h3><ul><li>LBs can scale but not instantaneously - contact AWS for a &quot;warm-up&quot;</li><li>Troubleshooting <ul><li>4xx errors are client induced errors</li><li>5xx errors are application induced errors</li><li>Load Balancer Errors 503 means at capacity or no registered target</li><li>If the LB can&#39;t connect to your application, check your security groups!</li></ul></li><li>Monitoring <ul><li>ELB access logs will log all access requests (so you can debug per request)</li><li>CloudWatch Metrics will give you aggregate statistics (ex: connections count)</li></ul></li></ul><h3 id="classic-load-balancers-v1" tabindex="-1">Classic Load Balancers (v1) <a class="header-anchor" href="#classic-load-balancers-v1" aria-label="Permalink to “Classic Load Balancers (v1)”">​</a></h3><ul><li>Supports TCP (Layer 4), HTTP &amp; HTTPS (Layer 7)</li><li>Health checks are TCP or HTTP based</li><li>Fixed hostname: XXX.region.elb.amazonaws.com</li></ul><h4 id="creating-a-classic-load-balancer" tabindex="-1">Creating a Classic Load Balancer <a class="header-anchor" href="#creating-a-classic-load-balancer" aria-label="Permalink to “Creating a Classic Load Balancer”">​</a></h4><p>Steps:</p><ol><li><p>Define Load Balancer</p><ul><li>Load Balancer name:</li><li>Load Balancer Protocol: HTTP:80</li><li>Instance Protocol: HTTP:80</li></ul></li><li><p>Assign Security Groups</p><ul><li>Create or use existing security group</li><li>Type: HTTP:80</li><li>Source: Anywhere</li></ul></li><li><p>Configure Security Settings</p><ul><li>Setup HTTPS or SSL protocol</li></ul></li><li><p>Configure Health Check</p><ul><li>Ping Protocol: HTTP</li><li>Ping Port: 80</li><li>Ping Path: / (or /health or any other path)</li><li>Response Timeout: between 2 and 60 seconds</li><li>Interval: between 5 and 300 seconds</li><li>Unhealthy threshold: 2 (if 2 Health Checks fail in a row then it is healthy)</li><li>Healthy threshold: 10 (if 10 Health Checks pass in a row then it is healthy)</li></ul></li><li><p>Add EC2 Instances</p></li><li><p>Add Tags</p></li><li><p>Review</p></li><li><p>After the Load Balancer is InService then open the URL present in DNS name and verify if it is hitting the application</p></li></ol><h3 id="application-load-balancer-v2" tabindex="-1">Application Load Balancer (v2) <a class="header-anchor" href="#application-load-balancer-v2" aria-label="Permalink to “Application Load Balancer (v2)”">​</a></h3><ul><li><p>Application load balancers is Layer 7 (HTTP)</p></li><li><p>Load balancing to multiple HTTP applications across machines (target groups)</p></li><li><p>Load balancing to multiple applications on the same machine (ex: containers)</p></li><li><p>Support for HTTP/2 and WebSocket</p></li><li><p>Support redirects (from HTTP to HTTPS for example)</p></li><li><p>Routing tables to different target groups:</p><ul><li>Routing based on path in URL (example.com/users &amp; example.com/posts)</li><li>Routing based on hostname in URL (one.example.com &amp; other.example.com)</li><li>Routing based on Query String, Headers (example.com/users?id=123&amp;order=false)</li></ul></li><li><p>ALB are a great fit for micro services &amp; container-based application (example: Docker &amp; Amazon ECS)</p></li><li><p>Has a port mapping feature to redirect to a dynamic port in ECS</p></li><li><p>In comparison, we&#39;d need multiple Classic Load Balancer per application</p></li></ul><h4 id="target-groups" tabindex="-1">Target Groups <a class="header-anchor" href="#target-groups" aria-label="Permalink to “Target Groups”">​</a></h4><ul><li>EC2 instances (can be managed by an Auto Scaling Group) - HTTP</li><li>ECS tasks (managed by ECS itself) - HTTP</li><li>Lambda functions - HTTP request is translated into a JSON event</li><li>IP Addresses - must be private IPs</li><li>ALB can route to multiple target groups</li><li>Health checks are at the target group level</li></ul><h4 id="good-to-know" tabindex="-1">Good to Know <a class="header-anchor" href="#good-to-know" aria-label="Permalink to “Good to Know”">​</a></h4><ul><li>Fixed hostname (XXX.region.elb.amazonaws.com)</li><li>The application servers don&#39;t see the IP of the client directly <ul><li>The true IP of the client is inserted in the header X-Forwarded-For</li><li>We can also get Port (X-Forwarded-Port) and proto (X-Forwarded-Proto)</li></ul></li></ul><h4 id="creating-a-application-load-balancer" tabindex="-1">Creating a Application Load Balancer <a class="header-anchor" href="#creating-a-application-load-balancer" aria-label="Permalink to “Creating a Application Load Balancer”">​</a></h4><p>Steps:</p><ol><li><p>Configure Load Balancer:</p><ul><li>Name</li><li>Scheme: internet-facing</li><li>IP address type: ipv4</li><li>Listeners: HTTP:80</li><li>Availability Zones: Select from the VPC</li></ul></li><li><p>Configure Security</p></li><li><p>Configure Security Groups</p></li><li><p>Configure Routing:</p><ul><li>Target group</li><li>Name</li><li>Target type: Instance</li><li>Protocol: HTTP:80</li><li>Protocol version: HTTP1</li><li>Health checks</li></ul></li><li><p>Register Targets</p></li><li><p>Review</p></li></ol><h3 id="network-load-balancer-v2" tabindex="-1">Network Load Balancer (v2) <a class="header-anchor" href="#network-load-balancer-v2" aria-label="Permalink to “Network Load Balancer (v2)”">​</a></h3><ul><li>Network load balancers (Layer 4) allow to: <ul><li>Forward TCP &amp; UDP traffic to your instances</li><li>Handle millions of request per seconds</li><li>Less latency ~100 ms (vs 400 ms for ALB)</li></ul></li><li>NLB has one static IP per AZ, and supports assigning Elastic IP (helpful for whitelisting specific IP)</li><li>NLB are used for extreme performance, TCP or UDP traffic</li><li>Not included in the AWS free tier</li></ul><h4 id="creating-a-network-load-balancer" tabindex="-1">Creating a Network Load Balancer <a class="header-anchor" href="#creating-a-network-load-balancer" aria-label="Permalink to “Creating a Network Load Balancer”">​</a></h4><p>Steps:</p><ol><li><p>Configure Load Balancer:</p><ul><li>Name</li><li>Scheme: internet-facing</li><li>IP address type: ipv4</li><li>Listeners: TCP:80</li><li>Availability Zones: Select from the VPC</li></ul></li><li><p>Configure Security</p></li><li><p>Configure Routing:</p><ul><li>Target group</li><li>Name</li><li>Target type: instance</li><li>Protocol: TCP:80</li><li>Health checks: TCP</li></ul></li><li><p>Register Targets</p></li><li><p>Review</p></li></ol><h2 id="sticky-sessions-session-affinity" tabindex="-1">Sticky Sessions (Session Affinity) <a class="header-anchor" href="#sticky-sessions-session-affinity" aria-label="Permalink to “Sticky Sessions (Session Affinity)”">​</a></h2><ul><li>It is possible to implement stickiness so that the same client is always redirected to the same instance behind a load balancer</li><li>This works for Classic Load Balancers &amp; Application Load Balancers</li><li>The &quot;cookie&quot; used for stickiness has an expiration date you control</li><li>Use case: make sure the user doesn&#39;t lose his session data</li><li>Enabling stickiness may bring imbalance to the load over the backend EC2 instances</li></ul><h3 id="sticky-sessions-cookie-names" tabindex="-1">Sticky Sessions - Cookie Names <a class="header-anchor" href="#sticky-sessions-cookie-names" aria-label="Permalink to “Sticky Sessions - Cookie Names”">​</a></h3><ul><li>Application-based Cookies <ul><li>Custom cookie <ul><li>Generated by the target</li><li>Can include any custom attributes required by the application</li><li>Cookie name must be specified individually for each target group</li><li>Don&#39;t use AWSALB, AWSALBAPP, or AWSALBTG (reserved for use by the ELB)</li></ul></li><li>Application cookie <ul><li>Generated by the load balancer</li><li>Cookie name is AWSALBAPP</li></ul></li></ul></li><li>Duration-based Cookies <ul><li>Cookie generated by the load balancer</li><li>Cookie name is AWSALB for ALB, AWSELB for CLB</li></ul></li></ul><h3 id="add-sticky-sessions" tabindex="-1">Add Sticky Sessions <a class="header-anchor" href="#add-sticky-sessions" aria-label="Permalink to “Add Sticky Sessions”">​</a></h3><ol><li>Goto Target Groups</li><li>Select the Target Group and select Actions --&gt; Edit attributes --&gt; Stickiness</li><li>There are two types of Stickiness: <ul><li>Load balancer generated cookie - Time based</li><li>Application-based cookie - Time based and App cookie name is required</li></ul></li></ol><h2 id="cross-zone-load-balancing" tabindex="-1">Cross-Zone Load Balancing <a class="header-anchor" href="#cross-zone-load-balancing" aria-label="Permalink to “Cross-Zone Load Balancing”">​</a></h2><p><strong>With Cross Zone Load Balancing</strong>: Each load balancer instance distributes evenly across all registered instances in all AZ</p><p><strong>Without Cross Zone Load Balancing</strong>: Requests are distributed in the instances of the node of the Elastic Load Balancer</p><p><img src="/assets/cross-zone-load-balancing.JwiL4ZUX.png" alt="Cross-Zone Load Balancing"></p><ul><li>Application Load Balancer <ul><li>Always on (can&#39;t be disabled)</li><li>No charges for inter AZ data</li></ul></li><li>Network Load Balancer <ul><li>Disabled by default</li><li>You pay charges ($) for inter AZ data if enabled</li></ul></li><li>Classic Load Balancer <ul><li>Through Console =&gt; Enabled by default</li><li>Through CLI / API =&gt; Disabled by default</li><li>No charges for inter AZ data if enabled</li></ul></li></ul><p>To enable Cross-Zone Load Balancing: Goto Load Balancers --&gt; Enable Cross-Zone Load Balancing</p><h2 id="ssl-tls-basics" tabindex="-1">SSL/TLS - Basics <a class="header-anchor" href="#ssl-tls-basics" aria-label="Permalink to “SSL/TLS - Basics”">​</a></h2><ul><li>An SSL Certificate allows traffic between your clients and your load balancer to be encrypted in transit (in-flight encryption)</li><li>SSL refers to Secure Sockets Layer, used to encrypt connections</li><li>TLS refers to Transport Layer Security, which is a newer version</li><li>Nowadays, TLS certificates are mainly used, but people still refer as SSL</li><li>Public SSL certificates are issued by Certificate Authorities (CA)</li><li>Comodo, Symantec, GoDaddy, GlobalSign, Digicert, Letsencrypt, etc...</li><li>SSL certificates have an expiration date (you set) and must be renewed</li></ul><h3 id="load-balancer-ssl-certificates" tabindex="-1">Load Balancer - SSL Certificates <a class="header-anchor" href="#load-balancer-ssl-certificates" aria-label="Permalink to “Load Balancer - SSL Certificates”">​</a></h3><ul><li>The load balancer uses an X.509 certificate (SSL/TLS server certificate)</li><li>You can manage certificates using ACM (AWS Certificate Manager)</li><li>You can create upload your own certificates alternatively</li><li>HTTPS listener: <ul><li>You must specify a default certificate</li><li>You can add an optional list of certs to support multiple domains</li><li>Clients can use SNI (Server Name Indication) to specify the hostname they reach</li><li>Ability to specify a security policy to support older versions of SSL / TLS (legacy clients)</li></ul></li></ul><h3 id="ssl-server-name-indication-sni" tabindex="-1">SSL - Server Name Indication (SNI) <a class="header-anchor" href="#ssl-server-name-indication-sni" aria-label="Permalink to “SSL - Server Name Indication (SNI)”">​</a></h3><ul><li>SNI solves the problem of loading multiple SSL certificates onto one web server (to serve multiple websites)</li><li>It&#39;s a &quot;newer&quot; protocol, and requires the client to indicate the hostname of the target server in the initial SSL handshake</li><li>The server will then find the correct certificate, or return the default one</li></ul><p>Note:</p><ul><li>Only works for ALB &amp; NLB (newer generation), CloudFront</li><li>Does not work for CLB (older gen)</li></ul><h3 id="elastic-load-balancers-ssl-certificates" tabindex="-1">Elastic Load Balancers - SSL Certificates <a class="header-anchor" href="#elastic-load-balancers-ssl-certificates" aria-label="Permalink to “Elastic Load Balancers - SSL Certificates”">​</a></h3><ul><li>Classic Load Balancer (v1) <ul><li>Support only one SSL certificate</li><li>Must use multiple CLB for multiple hostname with multiple SSL certificates</li></ul></li><li>Application Load Balancer (v2) <ul><li>Supports multiple listeners with multiple SSL certificates</li><li>Uses Server Name Indication (SNI) to make it work</li></ul></li><li>Network Load Balancer (v2) <ul><li>Supports multiple listeners with multiple SSL certificates</li><li>Uses Server Name Indication (SNI) to make it work</li></ul></li></ul><h2 id="what-s-an-auto-scaling-group" tabindex="-1">What&#39;s an Auto Scaling Group <a class="header-anchor" href="#what-s-an-auto-scaling-group" aria-label="Permalink to “What&#39;s an Auto Scaling Group”">​</a></h2><ul><li>In real-life, the load on your websites and application can change</li><li>In the cloud, you can create and get rid of servers very quickly</li><li>The goal of an Auto Scaling Group (ASG) is to: <ul><li>Scale out (add EC2 instances) to match an increased load</li><li>Scale in (remove EC2 instances) to match a decreased load</li><li>Ensure we have a minimum and a maximum number of machines running</li><li>Automatically Register new instances to a load balancer</li></ul></li></ul><h3 id="asgs-have-the-following-attributes" tabindex="-1">ASGs have the following attributes <a class="header-anchor" href="#asgs-have-the-following-attributes" aria-label="Permalink to “ASGs have the following attributes”">​</a></h3><ul><li>A launch configuration <ul><li>AMI + Instance Type</li><li>EC2 User Data</li><li>EBS Volumes</li><li>Security Groups</li><li>SSH Key Pair</li></ul></li><li>Min Size / Max Size / Initial Capacity</li><li>Network + Subnets Information</li><li>Load Balancer Information</li><li>Scaling Policies</li></ul><h3 id="auto-scaling-alarms" tabindex="-1">Auto Scaling Alarms <a class="header-anchor" href="#auto-scaling-alarms" aria-label="Permalink to “Auto Scaling Alarms”">​</a></h3><ul><li>It is possible to scale an ASG based on CloudWatch alarms</li><li>An Alarm monitors a metric (such as Average CPU)</li><li>Metrics are computed for the overall ASG instances</li><li>Based on the alarm: <ul><li>We can create scale-out policies (increase the number of instances)</li><li>We can create scale-in policies (decrease the number of instances)</li></ul></li></ul><h3 id="auto-scaling-new-rules" tabindex="-1">Auto Scaling New Rules <a class="header-anchor" href="#auto-scaling-new-rules" aria-label="Permalink to “Auto Scaling New Rules”">​</a></h3><ul><li>It is now possible to define &quot;better&quot; auto scaling rules that are directly managed by EC2 <ul><li>Target Average CPU Usage</li><li>Number of requests on the ELB per instance</li><li>Average Network In</li><li>Average Network Out</li></ul></li><li>These rules are easier to set up and can make more sense</li></ul><h3 id="auto-scaling-custom-metric" tabindex="-1">Auto Scaling Custom Metric <a class="header-anchor" href="#auto-scaling-custom-metric" aria-label="Permalink to “Auto Scaling Custom Metric”">​</a></h3><ul><li>We can auto scale based on a custom metric (ex: number of connected users) <ol><li>Send custom metric from application on EC2 to CloudWatch (PutMetric API)</li><li>Create CloudWatch alarm to react to low / high values</li><li>Use the CloudWatch alarm as the scaling policy for ASG</li></ol></li></ul><h3 id="asg-brain-dump" tabindex="-1">ASG Brain Dump <a class="header-anchor" href="#asg-brain-dump" aria-label="Permalink to “ASG Brain Dump”">​</a></h3><ul><li>Scaling policies can be on CPU, Network... and can even be on custom metrics or based on a schedule (if you know your visitors patterns)</li><li>ASGs use Launch configurations or Launch Templates (newer)</li><li>To update an ASG, you must provide a new launch configuration / launch template</li><li>IAM roles attached to an ASG will get assigned to EC2 instances</li><li>ASG are free. You pay for the underlying resources being launched</li><li>Having instances under an ASG means that if they get terminated for whatever reason, the ASG will automatically create new ones as a replacement. Extra safety!</li><li>ASG can terminate instances marked as unhealthy by an LB (and hence replace them)</li></ul><h3 id="create-a-auto-scaling-group" tabindex="-1">Create a Auto Scaling Group <a class="header-anchor" href="#create-a-auto-scaling-group" aria-label="Permalink to “Create a Auto Scaling Group”">​</a></h3><p>Steps:</p><ol><li><p>Goto Auto Scaling Groups</p></li><li><p>Choose launch template or configuration:</p><ul><li>Name</li><li>Launch template: <ul><li>Create launch template</li><li>Launch template name</li><li>Amazon Machine Image (AMI)</li><li>Instance Type: t1.micro</li><li>Key pair (login)</li><li>Network Settings: VPC or EC2-Classic</li><li>Security groups</li><li>Storage: Volume 1 (8GiB, EBS, General purpose SSD (gp2))</li><li>Resource tags</li><li>Network interfaces</li><li>In Advance details add User data</li></ul></li></ul></li><li><p>Configure settings:</p><ul><li>Instance purchase options: <ul><li>Adhere to launch template</li><li>Combine purchase options and instance types (provide min, max, and desired capacity)</li></ul></li><li>Network: AZs</li></ul></li><li><p>Configure advanced options:</p><ul><li>Load balancing: <ul><li>No load balancer</li><li>Attach to an existing load Balancer</li><li>Attach to a new load balancer</li></ul></li><li>Health checks: <ul><li>EC2 (enabled by default)</li><li>ELB (use ELB health checks to determine if the instances is healthy)</li></ul></li><li>Additional settings: Monitoring (with CloudWatch)</li></ul></li><li><p>Configure group size and scaling policies</p><ul><li>Group size: <ul><li>Desired capacity</li><li>Minimum capacity</li><li>Maximum capacity</li></ul></li><li>Scaling policies: <ul><li>Target tracking scaling policy</li><li>None</li></ul></li><li>Instance scale-in protection</li></ul></li><li><p>Add Notifications</p></li><li><p>Add tags</p></li><li><p>Review</p></li></ol><h3 id="auto-scaling-groups-dynamic-scaling-policies" tabindex="-1">Auto Scaling Groups - Dynamic Scaling Policies <a class="header-anchor" href="#auto-scaling-groups-dynamic-scaling-policies" aria-label="Permalink to “Auto Scaling Groups - Dynamic Scaling Policies”">​</a></h3><ul><li><p>Target Tracking Scaling</p><ul><li>Most simple and easy to set-up</li><li>Example: I want the average ASG CPU to stay at around 40%</li></ul></li><li><p>Simple / Step Scaling</p><ul><li>When a CloudWatch alarm is triggered (example CPU &gt; 70%), then add 2 units</li><li>When a CloudWatch alarm is triggered (example CPU less than 30%), then remove 1</li></ul></li><li><p>Scheduled Actions</p><ul><li>Anticipate a scaling based on known usage patterns</li><li>Example: increase the min capacity to 10 at 5 pm on Fridays</li></ul></li></ul><h3 id="auto-scaling-groups-predictive-scaling" tabindex="-1">Auto Scaling Groups - Predictive Scaling <a class="header-anchor" href="#auto-scaling-groups-predictive-scaling" aria-label="Permalink to “Auto Scaling Groups - Predictive Scaling”">​</a></h3><ul><li>Predictive scaling: continuously forecast load and schedule scaling ahead</li></ul><p>Good metrics to scale on:</p><ul><li><strong>CPUUtilization</strong>: Average CPU utilization across your instances</li><li><strong>RequestCountPerTarget</strong>: to make sure the number of requests per EC2 instances is stable</li><li>Average Network In / Out (if you&#39;re application is network bound)</li><li>Any custom metric (that you push using CloudWatch)</li></ul><h3 id="auto-scaling-groups-scaling-cooldowns" tabindex="-1">Auto Scaling Groups - Scaling Cooldowns <a class="header-anchor" href="#auto-scaling-groups-scaling-cooldowns" aria-label="Permalink to “Auto Scaling Groups - Scaling Cooldowns”">​</a></h3><ul><li>After a scaling activity happens, you are in the cooldown period (default 300 seconds)</li><li>During the cooldown period, the ASG will not launch or terminate additional instances (to allow for metrics to stabilize)</li><li>Advice: Use a ready-to-use AMI to reduce configuration time in order to be serving request fasters and reduce the cooldown period</li></ul>`,74)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"Node.js","description":"A JavaScript runtime built on Google's V8 engine","frontmatter":{"title":"Node.js","description":"A JavaScript runtime built on Google's V8 engine"},"headers":[],"relativePath":"Languages/JavaScript/Node.js/Node.js.md","filePath":"Languages/JavaScript/Node.js/Node.js.md","lastUpdated":1756574703000}`);var a={name:`Languages/JavaScript/Node.js/Node.js.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="node-js" tabindex="-1">Node.js <a class="header-anchor" href="#node-js" aria-label="Permalink to “Node.js”">​</a></h1><p>Node.js is a JavaScript runtime built on Google&#39;s open-source <em>V8 JavaScript engine</em></p><blockquote><p>Created by <em>Ryan Dahl</em></p></blockquote><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to “Introduction”">​</a></h2><ol><li><p><strong>Small core</strong>: Node.js runtime and built-in modules are so-called Node.js core is small. Containing only the bare minimum functionalities leaving the rest to the so-called <em>userland</em>. Where modules can be created and experimented to provide better solutions</p></li><li><p><strong>Small modules</strong>: A <em>module</em> is the fundamental means for structuring the code of a program</p><p>Unix Philosophy:</p><ul><li>Small is beautiful</li><li>Make each program do one thing well</li></ul></li><li><p><strong>Small surface area</strong>: Exposing a minimal set of functionalities to the outside world</p></li><li><p><strong>Simplicity and pragmatism</strong>: <em>Keep It Simple, Stupid (KISS)</em> principle</p></li></ol><p>In his essay <em>The Rise of &quot;Worse is Better&quot;</em> Richard P. Gabriel says:</p><blockquote><p>&quot;The design must be simple, both in implementation and interface. It is more important for the implementation to be simple than the interface. Simplicity is the most important consideration in a design.&quot;</p></blockquote><h2 id="how-node-js-works" tabindex="-1">How Node.js Works? <a class="header-anchor" href="#how-node-js-works" aria-label="Permalink to “How Node.js Works?”">​</a></h2><ol><li><p><strong>I/O is slow</strong>: Accessing disk or the network is slow. Sometimes the input comes form humans which are much slower</p></li><li><p><strong>Non-blocking I/O</strong>: In this way, the system call always returns immediately without waiting for the data to be read or written</p><p>The most basic pattern for dealing with this type of non-blocking I/O is to actively poll the resource within a loop until some actual data is returned. This is called <strong>busy-waiting</strong>. This method consumes precious CPU time and results in a huge amount of wasted CPU time</p><ul><li>Event-Driven</li><li>Non-Blocking</li></ul><blockquote><p>Deferences between node and JavaScript?</p></blockquote></li><li><p><strong>Event demultiplexing</strong>: Demultiplexing is a process where the multiplexed signal is split again into its original components. The synchronous event demultiplexer that we were talking about watches multiple resources and returns a new event (or set of events) when a read or write operation executed over one of those resources completes. The advantage here is that the synchronous event demultiplexer is, of course, synchronous, so it blocks until there are new events to process</p></li><li><p><strong>The reactor pattern</strong>: The main idea behind the reactor pattern is to have a handler associated with each I/O operation. A handler in Node.js is represented by a callback (or cb for short) function</p><p>This is what happens in an application using the reactor pattern:</p><ul><li><p>The application generates a new I/O operation by submitting a request to the Event Demultiplexer. The application also specifies a handler, which will be invoked when the operation completes. Submitting a new request to the Event Demultiplexer is a non-blocking call and it immediately returns control to the application</p></li><li><p>When a set of I/O operations completes, the Event Demultiplexer pushes a set of corresponding events into the Event Queue</p></li><li><p>At this point, the <a href="./../JavaScript.html#the-event-loop">Event Loop</a> iterates over the items of the Event Queue</p></li><li><p>For each event, the associated handler is invoked</p></li><li><p>The handler, which is part of the application code, gives back control to the Event Loop when its execution completes (5a). While the handler executes, it can request new asynchronous operations (5b), causing new items to be added to the Event Demultiplexer (1)</p></li><li><p>When all the items in the Event Queue are processed, the Event Loop blocks again on the Event Demultiplexer, which then triggers another cycle when a new event is available</p></li></ul><p><img src="/assets/the-reactor-pattern.BMLWCWv3.png" alt="The reactor pattern"></p><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>A Node.js application will exit when there are no more pending operations in the event demultiplexer, and no more events to be processed inside the event queue</p></div></li><li><p><strong>Building blocks</strong>:</p><ul><li>A set of bindings responsible for wrapping and exposing <code>libuv</code> and other low-level functionalities to JavaScript</li><li><strong>V8</strong>, the JavaScript engine</li><li>A core JavaScript library containing Node.js API</li></ul></li></ol><h2 id="module-system-in-javascript-and-node-js" tabindex="-1">Module System in JavaScript and Node.js <a class="header-anchor" href="#module-system-in-javascript-and-node-js" aria-label="Permalink to “Module System in JavaScript and Node.js”">​</a></h2><p>JavaScript did not have a built-in module system until 2015</p><p>Two module systems became popular and were a community initiatives:</p><ul><li><em>asynchronous module definition</em> (AMD)</li><li><em>Universal Module Definition</em> (UMD)</li></ul><p>Node.js came up with an implementation of the <strong><a href="#commonjs-modules">CommonJS specification (CJS)</a></strong>, which was designed to provide a module system for JavaScript in browserless environments</p><p>In 2015 <em>ECMAScript 6</em> (ES6 or ES2015) proposed for a standard module system known as <strong><a href="./../JavaScript.html#esm-ecmascript-modules">ESM (ECMAScript modules)</a></strong></p><ul><li><p>Node.js has two module systems: CommonJS modules and <strong>ESM</strong> (support from <em>v13.2</em>):</p><ul><li>To use ESM in Node.js change <code>type</code> in <code>package.json</code> to <code>module</code></li></ul><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">type</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">module</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li></ul><h3 id="revealing-module-pattern" tabindex="-1">Revealing Module Pattern <a class="header-anchor" href="#revealing-module-pattern" aria-label="Permalink to “Revealing Module Pattern”">​</a></h3><ul><li><p>JavaScript in the browser lacks namespacing. Every script runs in the global scope. So, if a third-party dependency instantiates a global variable called utils then any other library or the application code itself might accidentally override or alter utils. Causing unpredictable side effects</p></li><li><p>The <a href="./../../../Concepts/Designs/README.html#revealing-module-pattern"><em>revealing module pattern</em></a> is used to solve this class of problems</p></li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> myModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // private</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> privateFoo</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> privateBar</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // public</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    publicFoo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {},</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    publicBar</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">})();</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // once the parenthesis here are parsed, the function</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// will be invoked</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">myModule</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">myModule</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">privateFoo</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> myModule</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">privateBar</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><ul><li><p>This pattern leverages a self-invoking function also referred to as <strong>Immediately Invoked Function Expression (IIFE)</strong></p></li><li><p>In JavaScript, variables created inside a function are not accessible from the outer scope (outside the function). Functions can use the return statement to selectively propagate information to the outer scope</p></li><li><p>This pattern is essentially exploiting these properties to keep the private information hidden and export only a public-facing API</p></li></ul><h3 id="commonjs-modules" tabindex="-1">CommonJS modules <a class="header-anchor" href="#commonjs-modules" aria-label="Permalink to “CommonJS modules”">​</a></h3><p>The two main concepts of the CommonJS specification:</p><ol><li><p><strong><code>require</code></strong> is a function that allows you to import a module from the local filesystem</p></li><li><p><strong><code>exports</code></strong> and <strong><code>module.exports</code></strong> are special variables that can be used to export public functionality from the current module</p></li></ol><h4 id="homemade-module-loader" tabindex="-1">Homemade module loader <a class="header-anchor" href="#homemade-module-loader" aria-label="Permalink to “Homemade module loader”">​</a></h4><p>Below code mimics a subset of the functionality of the original <code>require()</code> function:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> loadModule</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">filename</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> wrappedSrc</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> \`</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">(function (module, exports, require) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">        \${</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">fs</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">readFileSync</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">filename</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">utf8</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">      })(module, module.exports, require)</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  eval</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">wrappedSrc</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li>There parameters are passed to the function <code>filename</code>, <code>module</code>, and <code>require</code></li><li>The <code>exports</code> argument of the wrapping function is initialized with the content of <code>module.exports</code></li></ul><p>Mimicking the <code>require()</code> function:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">moduleName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Require invoked for module: </span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">moduleName</span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">moduleName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // (1)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // (2)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">cache</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">])</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">cache</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">].</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // module metadata</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // (3)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> module</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">    exports</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  };</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // Update the cache</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  require</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">cache</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // (4)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // load the module</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  loadModule</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // (5)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  // return exported variables</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // (6)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">cache</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">resolve</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">moduleName</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">  /* resolve a full module id from the moduleName */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span></code></pre></div><p>The functions contains:</p><ol><li><p>A module name is accepted as input, and the first thing that we do is resolve the full path of the module, which we call <code>id</code>. This task is delegated to <code>require.resolve()</code>, which implements a specific resolving algorithm</p></li><li><p>If the module has already been loaded in the past, it should be available in the cache. If this is the case, we just return it immediately</p></li><li><p>If the module has never been loaded before, we set up the environment for the first load. In particular, we create a <code>module</code> object that contains an <code>exports</code> property initialized with an empty object literal. This object will be populated by the code of the module to export its public API</p></li><li><p>After the first load, the <code>module</code> object is cached</p></li><li><p>The module source code is read from its file and the code is evaluated, as we saw before. We provide the module with the <code>module</code> object that we just created, and a reference to the <code>require()</code> function. The module exports its public API by manipulating or replacing the <code>module.exports</code> object</p></li><li><p>Finally, the content of <code>module.exports</code>, which represents the public API of the module, is returned to the caller</p></li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// load another dependency</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> dependency</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">./anotherModule</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// a private function</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Well done </span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">dependency</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">username</span><span style="--shiki-light:#032F62;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// the API to be exported for public use</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">run</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>The essential concept to remember is that everything inside a module is private unless it&#39;s assigned to the <code>module.exports</code> variable. The content of this variable is then cached and returned when the module is loaded using <code>require()</code></p></div><h4 id="module-exports-vs-exports" tabindex="-1"><code>module.exports</code> VS <code>exports</code> <a class="header-anchor" href="#module-exports-vs-exports" aria-label="Permalink to “module.exports VS exports”">​</a></h4><ul><li>The <code>exports</code> variable is just a reference to the initial value of <code>module.exports</code></li><li>Only new properties can be attached to the object referenced by the <code>exports</code> variable</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">hello</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span></code></pre></div><ul><li>Reassigning the <code>exports</code> variable doesn&#39;t have any effect, because it doesn&#39;t change the content of <code>module.exports</code>. It will only reassign the variable itself. The following code is therefore wrong:</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span></code></pre></div><ul><li>To export something other than an object literal, such as a function, an instance, or even a string, we have to reassign <code>module.exports</code> as follows:</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>The <code>require</code> function is synchronous</p></div><div class="danger custom-block"><p class="custom-block-title">Asynchronous <code>exports</code></p><p>Any assignment to <code>module.exports</code> must be synchronous</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// THE BELOW CODE IS INCORRECT</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">  module</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">},</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div></div><h4 id="the-resolving-algorithm" tabindex="-1">The resolving algorithm <a class="header-anchor" href="#the-resolving-algorithm" aria-label="Permalink to “The resolving algorithm”">​</a></h4><ul><li><p>The term <strong>dependency hell</strong> describes a situation whereby two or more dependencies of a program in turn depend on a shared dependency, but require different incompatible versions</p></li><li><p>Node.js solves this problem elegantly by loading different version of a module depending on where the module is loaded from</p></li></ul><p>The 3 major branches of resolving algorithm:</p><ol><li><p><strong>File modules</strong>: If <code>moduleName</code> starts with <code>/</code>, it is already considered an <em>absolute path</em> to the module and it&#39;s returned as it is. If it starts with <code>./</code>, then <code>moduleName</code> is considered a <em>relative path</em>, which is calculated starting from the directory of the requiring module</p></li><li><p><strong>Core modules</strong>: If <code>moduleName</code> is not prefixed with <code>/</code> or <code>./</code>, the algorithm will first try to <em>search within the core Node.js modules</em></p></li><li><p><strong>Package modules</strong>: If no core module is found matching <code>moduleName</code>, then the search continues by looking for a matching module in the <em>first node_modules directory that is found navigating up in the directory structure</em> starting from the requiring module. The algorithm continues to search for a match by looking into the next node modules directory up in the directory tree, until it reaches the root of the filesystem</p></li></ol><p>For file and package modules, both files and directories can match <code>moduleName</code>. The algorithm will try to match the following:</p><ul><li><code>&lt;moduleName&gt;.js</code></li><li><code>&lt;moduleName&gt;/index.js</code></li><li>The directory/file specified in the main property of <code>&lt;moduleName&gt;/package.json</code></li></ul><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>Complete formal documentation of the resolving algorithm can be found at <a href="https://nodejs.org/api/modules.html#modules_all_together" target="_blank" rel="noreferrer">Node.js Org</a></p></div><h4 id="the-module-cache" tabindex="-1">The Module Cache <a class="header-anchor" href="#the-module-cache" aria-label="Permalink to “The Module Cache”">​</a></h4><ul><li>Every module is only loaded and evaluated the first time it is required</li><li>Any subsequent call of <code>require()</code> will simply return the cached version</li><li>It makes it possible to have cycles within module dependencies</li><li>It guarantees, to some extent, that the same instance is always returned when requiring the same module from within a given package</li></ul><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p><code>require.resolve(&lt;moduleName&gt;)</code> can be used directly <code>require.cache</code> variable is exposes the module cache</p></div><h4 id="circular-dependencies" tabindex="-1">Circular Dependencies <a class="header-anchor" href="#circular-dependencies" aria-label="Permalink to “Circular Dependencies”">​</a></h4><ul><li>A module called <code>main.js</code> requires <code>a.js</code> and <code>b.js</code></li><li>In turn, <code>a.js</code> requires <code>b.js</code></li><li>But <code>b.js</code> relies on <code>a.js</code> as well!</li><li>Now this is a circular dependency as module <code>a.js</code> requires module <code>b.js</code> and module <code>b.js</code> requires module <code>a.js</code></li></ul><p><img src="/assets/circular-dependencies.DskU2kg2.png" alt="Circular dependencies"></p><p>Contents of the modules:</p><ul><li><p>Module <code>a.js</code>:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">loaded</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">./b</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  b</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">  loaded</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // overrides the previous export</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span></code></pre></div></li><li><p>Module <code>b.js</code>:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">loaded</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">./a</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  a</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">  loaded</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">};</span></span></code></pre></div></li><li><p>Module <code>main.js</code>:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">./a</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">./b</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">a -&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">b -&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span></code></pre></div></li><li><p>Output of <code>main.js</code>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  &quot;b&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    &quot;a&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">      &quot;loaded&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    &quot;loaded&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  &quot;loaded&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">node:13214</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Warning:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> Accessing</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> non-existent</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> property</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">toJSON</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> exports</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> inside</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> circular</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> dependency</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Use</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --trace-warnings</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> ...</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> show</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> where</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> warning</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> was</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> created</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span></code></pre></div></li></ul><p>This result reveals the caveats of circular dependencies with CommonJS, that is, different parts of our application will have a different view of what is exported by module a.js and module b.js, depending on the order in which those dependencies are loaded. While both the modules are completely initialized as soon as they are required from the module main.js, the a.js module will be incomplete when it is loaded from b.js. In particular, its state will be the one that it reached the moment b.js was required</p><h2 id="heroku" tabindex="-1">Heroku <a class="header-anchor" href="#heroku" aria-label="Permalink to “Heroku”">​</a></h2><p>Add the ssh keys to heroku:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">heroku</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> keys:add</span></span></code></pre></div><p>Create heroku application</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">heroku</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> app-name</span></span></code></pre></div>`,63)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
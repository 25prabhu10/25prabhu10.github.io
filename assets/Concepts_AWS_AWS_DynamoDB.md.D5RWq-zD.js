import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"AWS DynamoDB","description":"AWS DynamoDB","frontmatter":{"title":"AWS DynamoDB","description":"AWS DynamoDB","prev":"./AWS"},"headers":[],"relativePath":"Concepts/AWS/AWS_DynamoDB.md","filePath":"Concepts/AWS/AWS_DynamoDB.md","lastUpdated":1690829560000}`);var a={name:`Concepts/AWS/AWS_DynamoDB.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="aws-dynamodb" tabindex="-1">AWS DynamoDB <a class="header-anchor" href="#aws-dynamodb" aria-label="Permalink to “AWS DynamoDB”">​</a></h1><p>NoSQL Serverless Database</p><h2 id="traditional-architecture" tabindex="-1">Traditional Architecture <a class="header-anchor" href="#traditional-architecture" aria-label="Permalink to “Traditional Architecture”">​</a></h2><ul><li>Client --&gt; API Layer (EC2 + ASG + ELB) --&gt; Database Layer (RDS - MySQL, PostgreSQL, etc...)</li><li>Traditional applications leverage RDBMS databases</li><li>These databases have the SQL query language</li><li>Strong requirements about how the data should be modeled</li><li>Ability to do join, aggregations, computations</li><li>Vertical scaling (means usually getting a more powerful CPU / RAM / IO)</li></ul><h2 id="nosql-databases" tabindex="-1">NoSQL databases <a class="header-anchor" href="#nosql-databases" aria-label="Permalink to “NoSQL databases”">​</a></h2><ul><li>NoSQL databases are non-relational databases and are <strong>distributed</strong></li><li>NoSQL databases include MongoDB, DynamoDB, etc.</li><li>NoSQL databases <strong>do not support join</strong></li><li>All the data that is needed for a query is present in one row</li><li>NoSQL databases <strong>don&#39;t perform aggregations</strong> such as &quot;SUM&quot;</li><li><strong>NoSQL databases scale horizontally</strong></li><li>There&#39;s no &quot;right or wrong&quot; for NoSQL vs SQL, they just require to model the data differently and think about user queries differently</li></ul><h2 id="dynamodb" tabindex="-1">DynamoDB <a class="header-anchor" href="#dynamodb" aria-label="Permalink to “DynamoDB”">​</a></h2><ul><li>Fully Managed, Highly available with replication across 3 AZ</li><li>NoSQL database - not a relational database</li><li>Scales to massive workloads, distributed database</li><li>Millions of requests per seconds, trillions of row, 100s of TB of storage</li><li>Fast and consistent in performance (low latency on retrieval)</li><li>Integrated with IAM for security, authorization and administration</li><li>Enables event driven programming with DynamoDB Streams</li><li>Low cost and auto scaling capabilities</li></ul><h3 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to “Features”">​</a></h3><ul><li>DynamoDB is made of <strong>tables</strong></li><li>Each table has a <strong>primary key</strong> (must be decided at creation time)</li><li>Each table can have an infinite number of items (= rows)</li><li>Each item has <strong>attributes</strong> (can be added over time - can be null)</li><li>Maximum <strong>size</strong> of a item is <strong>400KB</strong></li><li>Data types supported are: <ul><li>Scalar Types: String, Number, Binary, Boolean, Null</li><li>Document Types: List, Map</li><li>Set Types: String Set, Number Set, Binary Set</li></ul></li></ul><h2 id="primary-keys" tabindex="-1">Primary Keys <a class="header-anchor" href="#primary-keys" aria-label="Permalink to “Primary Keys”">​</a></h2><ul><li><p>Option 1: <strong>Partition key only (HASH)</strong></p></li><li><p>Partition key must be unique for each item</p></li><li><p>Partition key must be &quot;diverse&quot; so that the data is distributed</p></li><li><p><em>Example:</em> <code>user_id</code> for a users table</p></li><li><p>Option 2: <strong>Partition key + Sort Key</strong></p></li><li><p>The <strong>combination must be unique</strong></p></li><li><p>Data is grouped by partition key</p></li><li><p>Sort key == range key</p></li><li><p><em>Example:</em> <strong>users-games</strong> table</p><ul><li><strong>user_id</strong> for the partition key</li><li><strong>game_id</strong> for the sort key</li></ul></li></ul><h3 id="partition-keys-exercise" tabindex="-1">Partition Keys Exercise <a class="header-anchor" href="#partition-keys-exercise" aria-label="Permalink to “Partition Keys Exercise”">​</a></h3><ul><li>We&#39;re building a movie database</li><li>What is the best partition key to maximize data distribution? <ul><li><code>movie_id</code></li><li><code>producer_name</code></li><li><code>leader_actor_name</code></li><li><code>movie_language</code></li></ul></li><li><code>movie_id</code> has the highest cardinality so it&#39;s a good candidate</li><li><code>movie_language</code> doesn&#39;t take many values and may be skewed towards English so it&#39;s not a great partition key</li></ul><h2 id="provisioned-throughput" tabindex="-1">Provisioned Throughput <a class="header-anchor" href="#provisioned-throughput" aria-label="Permalink to “Provisioned Throughput”">​</a></h2><ul><li>Table must have provisioned read and write capacity units</li><li><strong>Read Capacity Units</strong> (RCU): throughput for reads</li><li><strong>Write Capacity Units</strong> (WCU): throughput for writes</li><li>Option to setup auto-scaling of throughput to meet demand</li><li>Throughput can be exceeded temporarily using <em>burst credit</em></li><li>If burst credit are empty, you&#39;ll get a <code>ProvisionedThroughputException</code></li><li>It&#39;s then advised to do an exponential back-off retry</li></ul><h3 id="write-capacity-units" tabindex="-1">Write Capacity Units <a class="header-anchor" href="#write-capacity-units" aria-label="Permalink to “Write Capacity Units”">​</a></h3><ul><li>One write capacity unit represents <strong>one write per second for an item up to 1 KB in size</strong></li><li>If the items are larger than 1 KB, more WCU are consumed</li><li><em>Example</em> 1: we write 10 objects per seconds of 2 KB each. <ul><li>We need <code>2 * 10 = 20 WCU</code></li></ul></li><li><em>Example</em> 2: we write 6 objects per second of 4.5 KB each <ul><li>We need <code>6 * 5 = 30 WCU</code> (4.5 gets rounded to the upper KB)</li></ul></li><li><em>Example</em> 3: we write 120 objects per minute of 2 KB each <ul><li>We need <code>120 / 60 * 2 = 4 WCU</code></li></ul></li></ul><h4 id="strongly-consistent-read-vs-eventually-consistent-read" tabindex="-1">Strongly Consistent Read vs Eventually Consistent Read <a class="header-anchor" href="#strongly-consistent-read-vs-eventually-consistent-read" aria-label="Permalink to “Strongly Consistent Read vs Eventually Consistent Read”">​</a></h4><ul><li><strong>Eventually Consistent Read</strong>: If we read just after a write, it&#39;s possible we&#39;ll get unexpected response because of replication (wait time is needed for replication)</li><li><strong>Strongly Consistent Read</strong>: If we read just after a write, we will get the correct data (slower)</li><li><strong>By default</strong>: DynamoDB uses Eventually Consistent Reads, but <a href="#reading-data">GetItem</a>, <a href="#query">Query</a> &amp; <a href="#scan">Scan</a> provide a <code>ConsistentRead</code> parameter you can set to <code>True</code></li></ul><h3 id="read-capacity-units" tabindex="-1">Read Capacity Units <a class="header-anchor" href="#read-capacity-units" aria-label="Permalink to “Read Capacity Units”">​</a></h3><ul><li>One read capacity unit represents <strong>one strongly consistent read per second</strong>, or <strong>two eventually consistent reads per second, for an item up to 4 KB in size</strong></li><li>If the items are larger than 4 KB, more RCU are consumed</li><li><code>Example</code> 1: 10 strongly consistent reads per seconds of 4 KB each <ul><li>We need <code>10 * 4 KB / 4 KB = 10 RCU</code></li></ul></li><li><code>Example</code> 2: 16 eventually consistent reads per seconds of 12 KB each <ul><li>We need <code>(16 / 2) * ( 12 / 4 ) = 24 RCU</code></li></ul></li><li><code>Example</code> 3: 10 strongly consistent reads per seconds of 6 KB each <ul><li>We need <code>10 * 8 KB / 4 = 20 RCU</code> (we have to round up 6 KB to 8 KB)</li></ul></li></ul><h2 id="partitions-internal" tabindex="-1">Partitions Internal <a class="header-anchor" href="#partitions-internal" aria-label="Permalink to “Partitions Internal”">​</a></h2><ul><li>Data is divided in partitions</li><li>Partition keys go through a hashing algorithm to know to which partition they go to</li><li>To compute the number of partitions: <ul><li>By capacity: (TOTAL RCU / 3000) + (TOTAL WCU / 1000)</li><li>By size: Total Size / 10 GB</li><li>Total partitions = CEILING(MAX(Capacity, Size))</li></ul></li><li><strong>WCU and RCU are spread evenly between partitions</strong></li></ul><h2 id="throttling" tabindex="-1">Throttling <a class="header-anchor" href="#throttling" aria-label="Permalink to “Throttling”">​</a></h2><ul><li>If we exceed our RCU or WCU, we get <code>ProvisionedThroughputExceededExceptions</code></li><li>Reasons: <ul><li>Hot keys: one partition key is being read too many times (popular item for ex)</li><li>Hot partitions:</li><li>Very large items: remember RCU and WCU depends on size of items</li></ul></li><li>Solutions: <ul><li>Exponential back-off when exception is encountered (already in SDK)</li><li>Distribute partition keys as much as possible</li><li>If RCU issue, we can use DynamoDB Accelerator (DAX)</li></ul></li></ul><h2 id="writing-data" tabindex="-1">Writing Data <a class="header-anchor" href="#writing-data" aria-label="Permalink to “Writing Data”">​</a></h2><ul><li><strong>PutItem</strong>: Write data to DynamoDB (create data or full replace) <ul><li>Consumes WCU</li></ul></li><li><strong>UpdateItem</strong>: Update data in DynamoDB (partial update of attributes) <ul><li>Possibility to use Atomic Counters and increase them</li></ul></li><li><strong>Conditional Writes</strong>: <ul><li>Accept a write / update only if conditions are respected, otherwise reject</li><li>Helps with concurrent access to items</li><li>No performance impact</li></ul></li></ul><h2 id="deleting-data" tabindex="-1">Deleting Data <a class="header-anchor" href="#deleting-data" aria-label="Permalink to “Deleting Data”">​</a></h2><ul><li><strong>DeleteItem</strong>: <ul><li>Delete an individual row</li><li>Ability to perform a conditional delete</li></ul></li><li><strong>DeleteTable</strong>: <ul><li>Delete a whole table and all its items</li><li>Much quicker deletion than calling <code>DeleteItem</code> on all items</li></ul></li></ul><h2 id="batching-writes" tabindex="-1">Batching Writes <a class="header-anchor" href="#batching-writes" aria-label="Permalink to “Batching Writes”">​</a></h2><ul><li><strong>BatchWriteItem</strong>: <ul><li>Up to 25 <code>PutItem</code> and / or <code>DeleteItem</code> in one call</li><li>Up to 16 MB of data written</li><li>Up to 400 KB of data per item</li></ul></li><li>Batching allows you to save in latency by reducing the number of API calls done against DynamoDB</li><li>Operations are done in parallel for better efficiency</li><li>It&#39;s possible for part of a batch to fail, in which case we have the try the failed items (using exponential back-off algorithm)</li></ul><h2 id="reading-data" tabindex="-1">Reading Data <a class="header-anchor" href="#reading-data" aria-label="Permalink to “Reading Data”">​</a></h2><ul><li><code>GetItem</code>: <ul><li>Read based on Primary key</li><li>Primary Key = HASH or HASH-RANGE</li><li>Eventually consistent read by default</li><li>Option to use strongly consistent reads (more RCU - might take longer)</li><li><code>ProjectionExpression</code> can be specified to include only certain attributes</li></ul></li><li><code>BatchGetItem</code>: <ul><li><em>Up to 100 items</em></li><li><em>Up to 16 MB of data</em></li><li>Items are retrieved in parallel to minimize latency</li></ul></li></ul><h2 id="query" tabindex="-1">Query <a class="header-anchor" href="#query" aria-label="Permalink to “Query”">​</a></h2><ul><li>Query returns items based on: <ul><li><em>PartitionKey</em> value (must be = operator)</li><li><em>SortKey</em> value (=, &lt;, &lt;=, &gt;, &gt;=, Between, Begin) - optional</li><li><em>FilterExpression</em> to further filter (client side filtering)</li></ul></li><li>Returns: <ul><li>Up to 1 MB of data</li><li>Or number of items specified in Limit</li></ul></li><li>Able to do pagination on the results</li><li>Can query table, a local secondary index, or a global secondary index</li></ul><h2 id="scan" tabindex="-1">Scan <a class="header-anchor" href="#scan" aria-label="Permalink to “Scan”">​</a></h2><ul><li>Scan the entire table and then filter out data (inefficient)</li><li>Returns up to 1 MB of data - use pagination to keep on reading</li><li>Consumes a lot of RCU</li><li>Limit impact using Limit or reduce the size of the result and pause</li><li>For faster performance, use parallel scans: <ul><li>Multiple instances scan multiple partitions at the same time</li><li>Increases the throughput and RCU consumed</li><li>Limit the impact of parallel scans just like you would for Scans</li></ul></li><li>Can use a <code>ProjectionExpression + FilterExpression</code> (no change to RCU)</li></ul><h2 id="lsi-local-secondary-index" tabindex="-1">LSI (Local Secondary Index) <a class="header-anchor" href="#lsi-local-secondary-index" aria-label="Permalink to “LSI (Local Secondary Index)”">​</a></h2><ul><li>Alternate range key for your table, <strong>local to the hash key</strong></li><li>Up to <strong>five local secondary indexes per table.</strong></li><li>The sort key consists of exactly one scalar attribute.</li><li>The attribute that you choose must be a scalar String, Number, or Binary</li><li><strong>LSI must be defined at table creation time</strong></li><li>Any columns other Partition key and Sort key</li></ul><h2 id="gsi-global-secondary-index" tabindex="-1">GSI (Global Secondary Index) <a class="header-anchor" href="#gsi-global-secondary-index" aria-label="Permalink to “GSI (Global Secondary Index)”">​</a></h2><ul><li>To speed up queries on non-key attributes, use a Global Secondary Index</li><li>GSI = partition key + optional sort key</li><li>The index is a new &quot;table&quot; and we can project attributes on it <ul><li>The partition key and sort key of the original table are always projected (KEYS_ONLY)</li><li>Can specify extra attributes to project (INCLUDE)</li><li>Can use all attributes from main table (ALL)</li></ul></li><li>Must define RCU / WCU for the index</li><li><strong>Possibility to add / modify GSI (not LSI)</strong></li></ul><h2 id="dynamodb-indexes-and-throttling" tabindex="-1">DynamoDB Indexes and Throttling <a class="header-anchor" href="#dynamodb-indexes-and-throttling" aria-label="Permalink to “DynamoDB Indexes and Throttling”">​</a></h2><ul><li>GSI: <ul><li><strong>If the writes are throttled on the GSI, then the main table will be throttled!</strong></li><li>Even if the WCU on the main tables are fine</li><li>Choose your GSI partition key carefully!</li><li>Assign your WCU capacity carefully!</li></ul></li><li>LSI: <ul><li>Uses the WCU and RCU of the main table</li><li>No special throttling considerations</li></ul></li></ul><h2 id="dynamodb-concurrency" tabindex="-1">DynamoDB Concurrency <a class="header-anchor" href="#dynamodb-concurrency" aria-label="Permalink to “DynamoDB Concurrency”">​</a></h2><ul><li>DynamoDB has a feature called <strong>Conditional Update / Delete</strong></li><li>That means that you can ensure an item hasn&#39;t changed before altering it</li><li>That makes DynamoDB an <strong>optimistic locking / concurrency database</strong></li><li><em>Example:</em><ul><li>There is an item with an attribute Version = 1</li><li>Client 1 and Client 2 try to update item Name only if item version = 1</li><li>Suppose, request of Client 1 is executed first then the Name and Version is updated according to Client 1</li><li>Now, Client 2 request will try to execute the update but fails because Version of the item is not 1 (as changed by Client 1)</li></ul></li></ul><h2 id="dax-dynamodb-accelerator" tabindex="-1">DAX (DynamoDB Accelerator) <a class="header-anchor" href="#dax-dynamodb-accelerator" aria-label="Permalink to “DAX (DynamoDB Accelerator)”">​</a></h2><ul><li>Seamless <strong>cache for DynamoDB</strong>, no application re-write</li><li>Writes go through DAX to DynamoDB</li><li>Micro second latency for cached reads &amp; queries</li><li>Solves the Hot Key problem (too many reads)</li><li><strong>5 minutes TTL</strong> for cache by default</li><li><strong>Up to 10 nodes</strong> in the cluster</li><li>Multi AZ (3 nodes minimum recommended for production)</li><li>Secure (Encryption at rest with KMS, VPC, IAM, CloudTrail...)</li></ul><h3 id="dax-vs-elasticache" tabindex="-1">DAX vs ElastiCache <a class="header-anchor" href="#dax-vs-elasticache" aria-label="Permalink to “DAX vs ElastiCache”">​</a></h3><ul><li>Store individual objects cache, Query/Scan cache in DAX</li><li>Store aggregation result (store processed data) in ElastiCache</li></ul><h2 id="dynamodb-streams" tabindex="-1">DynamoDB Streams <a class="header-anchor" href="#dynamodb-streams" aria-label="Permalink to “DynamoDB Streams”">​</a></h2><ul><li><p>Changes in DynamoDB (Create, Update, Delete) can end up in a DynamoDB Stream</p></li><li><p>This stream can be read by AWS Lambda &amp; EC2 instances, and we can then do:</p><ul><li>React to changes in real time (welcome email to new users)</li><li>Analytics</li><li>Create derivative tables / views</li><li>Insert into ElasticSearch</li></ul></li><li><p>Could implement cross region replication using Streams</p></li><li><p>Stream has <strong>24 hours of data retention</strong></p></li><li><p>Choose the information that will be written to the stream whenever the data in the table is modified:</p><ul><li><code>KEYS_ONLY</code>: Only the key attributes of the modified item.</li><li><code>NEW_IMAGE</code>: The entire item, as it appears after it was modified.</li><li><code>OLD_IMAGE</code>: The entire item, as it appeared before it was modified.</li><li><code>NEW_AND_OLD_IMAGES</code>: Both the new and the old images of the item.</li></ul></li><li><p>DynamoDB Streams are made of shards, just like Kinesis Data Streams</p></li><li><p>You don&#39;t provision shards, this is automated by AWS</p></li><li><p><strong>Records are not retroactively populated in a stream after enabling it</strong></p></li></ul><h3 id="dynamodb-streams-lambda" tabindex="-1">DynamoDB Streams &amp; Lambda <a class="header-anchor" href="#dynamodb-streams-lambda" aria-label="Permalink to “DynamoDB Streams &amp; Lambda”">​</a></h3><ul><li>You need to <strong>define an Event Source Mapping to read</strong> from a DynamoDB Streams</li><li>You need to ensure the Lambda function has the appropriate permissions</li><li>Your Lambda function is invoked synchronously</li></ul><h2 id="dynamodb-ttl-time-to-live" tabindex="-1">DynamoDB - TTL (Time to Live) <a class="header-anchor" href="#dynamodb-ttl-time-to-live" aria-label="Permalink to “DynamoDB - TTL (Time to Live)”">​</a></h2><ul><li>TTL = automatically delete an item after an expiry date / time</li><li>TTL is provided at no extra cost, deletions do not use WCU / RCU</li><li>TTL is a background task operated by the DynamoDB service itself</li><li>Helps reduce storage and manage the table size over time</li><li>Helps adhere to regulatory norms</li><li>TTL is enabled per row (you define a TTL column, and add a date there)</li><li>DynamoDB typically deletes expired items within 48 hours of expiration</li><li>Deleted items due to TTL are also deleted in GSI / LSI</li><li>DynamoDB Streams can help recover expired items</li></ul><h2 id="dynamodb-cli-good-to-know" tabindex="-1">DynamoDB CLI - Good to Know <a class="header-anchor" href="#dynamodb-cli-good-to-know" aria-label="Permalink to “DynamoDB CLI - Good to Know”">​</a></h2><ul><li><code>--projection-expression</code>: attributes to retrieve <ul><li><code>--filter-expression</code>: filter results</li></ul></li><li>General CLI pagination options including DynamoDB / S3: <ul><li>Optimization: <ul><li><code>--page-size</code>: full dataset is still received but each API call will request less data (helps avoid timeouts)</li></ul></li><li>Pagination: <ul><li><code>--max-items</code>: max number of results returned by the CLI. Returns NextToken</li><li><code>--starting-token</code>: specify the last received NextToken to keep on reading</li></ul></li></ul></li></ul><h2 id="dynamodb-transactions" tabindex="-1">DynamoDB Transactions <a class="header-anchor" href="#dynamodb-transactions" aria-label="Permalink to “DynamoDB Transactions”">​</a></h2><ul><li><p>Transaction = Ability to Create / Update / Delete multiple rows in different tables at the same time</p></li><li><p>It&#39;s an &quot;all or nothing&quot; type of operation.</p></li><li><p>Write Modes: Standard, Transactional</p></li><li><p>Read Modes: Eventual Consistency, Strong Consistency, Transactional</p></li><li><p><strong>Consume 2x of WCU / RCU</strong></p></li><li><p>API Name: <code>TransactWriteItems/TransactGetItems</code></p></li><li><p><em>AccountBalance</em> Table:</p><table tabindex="0"><thead><tr><th>Account_id</th><th>balance</th><th>Last_transaction_ts</th></tr></thead><tbody><tr><td>Acct_21</td><td>230</td><td>1562503085</td></tr><tr><td>Acct_45</td><td>120</td><td>1562503085</td></tr></tbody></table></li><li><p><em>BankTransactions</em> Table:</p><table tabindex="0"><thead><tr><th>Transaction_id</th><th>Transaction_time</th><th>From_account_id</th><th>To_account_id</th><th>value</th></tr></thead><tbody><tr><td>Tx_12345</td><td>1561483349</td><td>Acct_45</td><td>Acct_21</td><td>45</td></tr><tr><td>Tx_23456</td><td>1562503085</td><td>Acct_21</td><td>Acct_45</td><td>100</td></tr></tbody></table></li><li><p><strong>A transaction is a write to both table, or none!</strong></p></li></ul><h3 id="transactional-capacity-computations" tabindex="-1">Transactional Capacity Computations <a class="header-anchor" href="#transactional-capacity-computations" aria-label="Permalink to “Transactional Capacity Computations”">​</a></h3><ul><li><strong>5 KB item size</strong></li><li><em>Example:</em> Transactional Item Writes per second: 3 <ul><li>= <code>[5 KB / 1 KB per WCU] * 2 (cost of transactional) * 3 (# writes per sec)</code></li><li>= <code>30 WCU</code></li></ul></li><li>Transactional Item Reads per second: 5 <ul><li>= <code>[5 KB / 4 KB per RCU] * 2 (cost of transactional) * 5 (# per sec)</code></li><li>= <code>2 (high ceiling) * 2 * 5</code></li><li>= <code>20 RCU</code></li></ul></li></ul><h2 id="dynamodb-as-session-state-cache" tabindex="-1">DynamoDB as Session State Cache <a class="header-anchor" href="#dynamodb-as-session-state-cache" aria-label="Permalink to “DynamoDB as Session State Cache”">​</a></h2><ul><li>It&#39;s common to use DynamoDB to store session state</li><li><strong>vs ElastiCache</strong>: <ul><li>ElastiCache is in-memory, but DynamoDB is serverless</li><li>Both are key/value stores</li></ul></li><li><strong>vs EFS</strong>: <ul><li>EFS must be attached to EC2 instances as a network drive</li></ul></li><li><strong>vs EBS &amp; Instance Store</strong>: <ul><li>EBS &amp; Instance Store can only be used for local caching, not shared caching</li></ul></li><li><strong>vs S3</strong>: <ul><li>S3 is higher latency, and not meant for small objects</li></ul></li></ul><h2 id="dynamodb-write-sharding" tabindex="-1">DynamoDB Write Sharding <a class="header-anchor" href="#dynamodb-write-sharding" aria-label="Permalink to “DynamoDB Write Sharding”">​</a></h2><ul><li>Imagine we have a voting application with two candidates, <strong>candidate A</strong> and <strong>candidate B</strong>.</li><li>If we use a partition key of <code>candidate_id</code>, we will run into partitions issues, as we only have two partitions</li><li>Solution: add a suffix (usually <strong>random suffix</strong>, sometimes calculated suffix)</li></ul><table tabindex="0"><thead><tr><th>Partition Key</th><th>Sort_Key</th><th>Attributes</th></tr></thead><tbody><tr><td>CandidateID + RandomSuffix</td><td>Vote_date</td><td>Voter_id</td></tr><tr><td><strong>Candidate_A-1</strong></td><td>2016-05-17 01.36.45</td><td>235343</td></tr><tr><td><strong>Candidate_A-1</strong></td><td>2016-05-18 01.36.30</td><td>232312</td></tr><tr><td><strong>Candidate_A-2</strong></td><td>2016-06-15 01.36.20</td><td>098432</td></tr><tr><td><strong>Candidate_B-1</strong></td><td>2016-07-1 01.36.15</td><td>340983</td></tr></tbody></table><h2 id="dynamodb-write-types" tabindex="-1">DynamoDB - Write Types <a class="header-anchor" href="#dynamodb-write-types" aria-label="Permalink to “DynamoDB - Write Types”">​</a></h2><ol><li><p><strong>Concurrent Writes</strong>: The second (latest) write overwrites the first (previous) write</p></li><li><p><strong>Conditional Writes</strong>: The first write is accepted and the second write fails</p></li><li><p><strong>Atomic Writes</strong>: Both writes succeed and the value is increased by some value in total</p></li><li><p><strong>Batch Writes</strong>: Write / update many items at a time</p></li></ol><h2 id="dynamodb-large-objects-pattern" tabindex="-1">DynamoDB - Large Objects Pattern <a class="header-anchor" href="#dynamodb-large-objects-pattern" aria-label="Permalink to “DynamoDB - Large Objects Pattern”">​</a></h2><ul><li>Client --&gt; Small Metadata --&gt; DynamoDB --&gt; Small metadata --&gt; Client</li><li>--&gt; Send large data to S3 --&gt; Amazon S3 bucket --&gt; Retrieve data message from S3</li></ul><h2 id="dynamodb-indexing-s3-objects-metadata" tabindex="-1">DynamoDB - Indexing S3 objects metadata <a class="header-anchor" href="#dynamodb-indexing-s3-objects-metadata" aria-label="Permalink to “DynamoDB - Indexing S3 objects metadata”">​</a></h2><ul><li>--Writes--&gt; Amazon S3 --&gt; Lambda Function --&gt; DynamoDB Table</li><li>API for object metadata <ul><li>Search by date</li><li>Total storage used by a customer</li><li>List of all objects with certain attributes</li><li>Find all objects uploaded within a date range</li></ul></li></ul><h2 id="dynamodb-operations" tabindex="-1">DynamoDB Operations <a class="header-anchor" href="#dynamodb-operations" aria-label="Permalink to “DynamoDB Operations”">​</a></h2><ul><li>Table Cleanup: <ul><li>Option 1: Scan + Delete =&gt; very slow, expensive, consumes RCU &amp; WCU</li><li>Option 2: Drop Table + Recreate table =&gt; fast, cheap, efficient</li></ul></li><li>Copying a DynamoDB Table: <ul><li>Option 1: Use AWS DataPipeline (uses EMR)</li><li>Option 2: Create a backup and restore the backup into a new table name (can take some time)</li><li>Option 3: Scan + Write =&gt; write own code</li></ul></li></ul><h2 id="security-other-features" tabindex="-1">Security &amp; Other Features <a class="header-anchor" href="#security-other-features" aria-label="Permalink to “Security &amp; Other Features”">​</a></h2><ul><li>Security: <ul><li>VPC Endpoints available to access DynamoDB without internet</li><li>Access fully controlled by IAM</li><li>Encryption at rest using KMS</li><li>Encryption in transit using SSL / TLS</li></ul></li><li>Backup and Restore feature available <ul><li>Point in time restore like RDS</li><li>No performance impact</li></ul></li><li>Global Tables <ul><li>Multi region, fully replicated, high performance</li></ul></li><li>Amazon DMS can be used to migrate to DynamoDB (from Mongo, Oracle, MySQL, S3, etc...)</li><li>You can launch a local DynamoDB on your computer for development purposes</li></ul><h3 id="users-directly-interact-with-dynamodb" tabindex="-1">Users directly interact with DynamoDB <a class="header-anchor" href="#users-directly-interact-with-dynamodb" aria-label="Permalink to “Users directly interact with DynamoDB”">​</a></h3><ul><li>Web &amp; Mobile Applications --&gt; Login and Get Token &amp; Get Temporary AWS Credentials (Social Identity Provider: Google, Facebook, SAML, OpenID, AWS Cognito User Pools)</li><li>Then use the token for Direct access to AWS --&gt; DynamoDB Table</li></ul><h3 id="dynamodb-fine-grained-access-control" tabindex="-1">DynamoDB - Fine-Grained Access Control <a class="header-anchor" href="#dynamodb-fine-grained-access-control" aria-label="Permalink to “DynamoDB - Fine-Grained Access Control”">​</a></h3><ul><li>Using <strong>Web Identity Federation</strong> or <strong>Cognito Identity Pools</strong>, each user gets AWS credentials</li><li>You can assign an IAM role to these users with a <strong>Condition</strong> to limit their API access to DynamoDB</li><li><strong>LeadingKeys</strong>: limit row-level access for users on the primary key</li><li><strong>Attributes</strong>: limit specific attributes the user can see</li></ul><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Version</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">2012-10-17</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Statement</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Effect</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Allow</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Action</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">        &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">dynamodb:GetItem</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">        &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">dynamodb:BatchGetItem</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">        &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">dynamodb:Query</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">        &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">dynamodb:PutItem</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">        &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">dynamodb:UpdateItem</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">        &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">dynamodb:DeleteItem</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">        &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">dynamodb:BatchWriteItem</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Resource</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">arn:aws:dynamodb:us-west-2:123456789012:table/MyTable</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Condition</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">ForAllValues:StringEquals</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">dynamodb:LeadingKeys</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">\${cognito-identity.amazonaws.com:sub}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li>See more at: <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html" target="_blank" rel="noreferrer">AWS DynamoDB Conditionals</a></li></ul>`,83)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
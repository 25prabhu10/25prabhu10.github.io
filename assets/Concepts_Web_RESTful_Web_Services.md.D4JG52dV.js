import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"RESTful Web Services","description":"Representational state transfer","frontmatter":{"title":"RESTful Web Services","description":"Representational state transfer","lastmod":"2025-02-08T00:00:00.000Z"},"headers":[],"relativePath":"Concepts/Web/RESTful_Web_Services.md","filePath":"Concepts/Web/RESTful_Web_Services.md","lastUpdated":1756574703000}`);var a={name:`Concepts/Web/RESTful_Web_Services.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="restful-web-services" tabindex="-1">RESTful Web Services <a class="header-anchor" href="#restful-web-services" aria-label="Permalink to “RESTful Web Services”">​</a></h1><p><strong>REpresentational State Transfer</strong> is a de-facto standard for a <strong>software architecture</strong> for interactive applications that use multiple Web services</p><blockquote><p>&quot;HTTP and HTML have been called &#39;Whoopee Cushion and Joy Buzzer of the Internet protocols, only comprehensible as elaborate practical jokes&#39;...&quot;</p></blockquote><ul><li>Roy Fielding (2000) - Ph.D. dissertation defines REST</li></ul><p>Other protocols built on top of HTTP, designed for building Web Services are:</p><ul><li>WS-Notification</li><li>WS-Security</li><li>WSDL (Web Services Description Language)</li><li>SOAP (Simple Object Access Protocol)</li></ul><p>Request-Response API Paradigms:</p><ul><li>RESTful API</li><li><a href="./RPC.html">Remote Procedure Call (RPC)</a></li><li>GraphQL</li></ul><h2 id="why-rest" tabindex="-1">Why REST? <a class="header-anchor" href="#why-rest" aria-label="Permalink to “Why REST?”">​</a></h2><p>Because it has:</p><ul><li>Scalability</li><li>Generality</li><li>Independence</li><li>Latency (Caching)</li><li>Security</li><li>Encapsulation</li></ul><p>REST APIs are not that useful for non-CRUD operations, such as:</p><ul><li><p>Archiving:</p><ul><li>Work around in REST: Sending action in body</li></ul><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">PATCH</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> /users/user-1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">Body</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> { &quot;archived&quot;: true }</span></span></code></pre></div></li><li><p>Deactivate:</p><ul><li>Work around in REST: Using sub-resource as actions name (only acceptable for sub-resources)</li></ul><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">PUT</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> /users/user-1/deactivate</span></span></code></pre></div></li><li><p>Search:</p><ul><li>Work around in REST: Using query parameters</li></ul><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">PUT</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> /search/code?name=bob</span></span></code></pre></div></li></ul><p>Advantages:</p><ul><li>Standard method names, arguments and status codes</li><li>Utilize HTTP features</li><li>Easy to maintain</li></ul><p>Disadvantages:</p><ul><li>Big payload</li><li>Multiple HTTP round trips</li></ul><p>REST APIs are best for APIs that expose CRUD like operations</p><h3 id="rest-vs-soap" tabindex="-1">REST vs. SOAP <a class="header-anchor" href="#rest-vs-soap" aria-label="Permalink to “REST vs. SOAP”">​</a></h3><table tabindex="0"><thead><tr><th>SOAP</th><th>Rest</th></tr></thead><tbody><tr><td>A fixed process</td><td>Few requirements</td></tr><tr><td>Lots of documents up front</td><td>Docs discovered as you go</td></tr><tr><td>Detailed scenarios</td><td>Flexible, based on needs</td></tr><tr><td>Complex error handling</td><td>Flexible, based on patterns</td></tr></tbody></table><h3 id="rest-vs-rpc" tabindex="-1">REST vs. RPC <a class="header-anchor" href="#rest-vs-rpc" aria-label="Permalink to “REST vs. RPC”">​</a></h3><table tabindex="0"><thead><tr><th>REST (REpresentational State Transfer)</th><th>RPC (Remote Procedure Call)</th></tr></thead><tbody><tr><td>Endpoints are nouns (resources): <code>api.example.com/users</code></td><td>Endpoints are verbs (methods): <code>api.example.com/getUserInfo</code></td></tr><tr><td>Calling the endpoint is acting on the resource:</td><td>Calling the endpoint is calling the method:</td></tr><tr><td><code>GET api.example.com/users/123</code></td><td><code>GET api.example.com/getUserInfo</code></td></tr><tr><td><code>POST api.example.com/users/123</code></td><td><code>POST api.example.com/updateUser</code></td></tr><tr><td>Returns resources that were acted upon</td><td>Returns results of the function call</td></tr><tr><td>Resource oriented</td><td>Function oriented</td></tr><tr><td>Data driven</td><td>Action driven</td></tr><tr><td>Text based</td><td>Binary serialized</td></tr><tr><td>Ease of use</td><td>Storage efficient</td></tr></tbody></table><p><em>Example:</em> gRPC</p><div class="language-proto"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">sytax = &quot;proto3&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">package</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> helloworld</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">service</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> HelloWorld</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  rpc</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> SayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">HelloRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">returns</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">HelloResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> HelloRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  string</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> HelloResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  string</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">}</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> grpc</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">@grpc/grpc-js</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> protoLoader</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">@grpc/proto-loader</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> packageDefinition</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> protoLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">loadSync</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">./protos/helloworld.proto</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> grpc</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Server</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> helloProto</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> grpc</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">loadPackageDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">packageDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">).</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">helloworld</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Define and register helloworld RPC handler</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> callback</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  callback</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#CB7676;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> call</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">sever</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">addService</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">helloProto</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">HelloWorld</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">service</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;">  sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Create a gRPC server and listen on port 50051</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">bindAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">  &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">0.0.0.0:50051</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  grpc</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">ServerCredentials</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">createInsecure</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    serve</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Server running on port 50051</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><ul><li>Above as RESTful API</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> express</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">express</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> express</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">express</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Define and register /sayHello REST endpoint</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">/sayHello</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> res</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> req</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  res</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">({</span><span style="--shiki-light:#24292E;--shiki-dark:#B8A965;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// Create an HTTP server and listen on port 3000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Server running on http://localhost:3000</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">});</span></span></code></pre></div><h2 id="resource" tabindex="-1">Resource <a class="header-anchor" href="#resource" aria-label="Permalink to “Resource”">​</a></h2><p>RESTful APIs are designed around <em>resources</em></p><p>Resource is an <strong>abstraction of information</strong> in REST. Which are any kind of object, data, or service that can be accessed by the client</p><p>A resource has an <em>identifier</em>, which is a URI that uniquely identifies that resource</p><p><strong>URL</strong> is subset of <strong>URI</strong></p><ul><li>URI is <em>Universal Resource Identifier</em></li><li>URL is <em>Universal Resource Locator</em></li><li>Your name is an Identifier, it&#39;s an URI</li><li>But your address is both an Identifier and locator, it&#39;s both an URI and an URL</li><li><em>Example:</em> <code>https://adventure-works.com/orders/1</code></li><li>Checkout notes about URL here: <a href="./URL.html">URL Notes Link</a></li></ul><p>Clients interact with a service by <strong>exchanging <em>representations</em> of resources</strong></p><ul><li><p>Many web APIs use <a href="#json">JSON</a> as the exchange format</p><p><em>Example:</em></p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">orderId</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">orderValue</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 99.9</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">productId</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">quantity</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span></code></pre></div></li></ul><p>The resource representations consist of:</p><ul><li>the <strong>data</strong></li><li>the <strong>metadata</strong> describing the data</li><li>and the <strong>hypermedia links</strong> that can help the clients in transition to the next desired state</li></ul><p><em>Example:</em> The following shows a JSON representation of an order. It contains links to get or update the customer associated with the order</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">orderID</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">productID</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">quantity</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">orderValue</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 16.6</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">links</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">rel</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">product</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">href</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://adventure-works.com/customers/3</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">action</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">GET</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">rel</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">product</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">href</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://adventure-works.com/customers/3</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">action</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">PUT</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><blockquote><p>A REST API consists of an assembly of interlinked resources. This set of resources is known as the REST API&#39;s <strong>resource model</strong></p></blockquote><h3 id="types-of-resources" tabindex="-1">Types of Resources <a class="header-anchor" href="#types-of-resources" aria-label="Permalink to “Types of Resources”">​</a></h3><ol><li><p><strong>Singleton</strong>: represents a single entity: <code>/customers/{customerId}</code></p></li><li><p><strong>Collection</strong>: represents a collection of entities: <code>/customers</code></p></li><li><p><strong>Sub-collection</strong>: a resource may contain sub-collection resources:</p><ul><li><code>/customers/{customerId}/accounts</code></li><li><code>accounts</code> is sub-collection of a particular <code>customer</code></li><li><code>/customers/{customerId}/accounts/{accountsId}</code></li><li><code>account</code> is a singleton inside a sub-collection</li></ul></li></ol><h3 id="naming-conventions" tabindex="-1">Naming conventions <a class="header-anchor" href="#naming-conventions" aria-label="Permalink to “Naming conventions”">​</a></h3><ul><li><p><strong>Lowercase</strong> letters in URL</p></li><li><p>No trailing forward slash (<code>/</code>):</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>// avoid</span></span>
<span class="line"><span>http://api.example.com/device-management/</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// instead use this</span></span>
<span class="line"><span>http://api.example.com/device-management</span></span></code></pre></div></li><li><p><strong>Use hyphens</strong> (<code>-</code>) and don&#39;t use underscores (<code>_</code>) in URL</p></li><li><p>Do not use file extensions</p></li><li><p>Query component to search, sort, filter, and paginate URI collection</p></li></ul><h2 id="maturity-model" tabindex="-1">Maturity Model <a class="header-anchor" href="#maturity-model" aria-label="Permalink to “Maturity Model”">​</a></h2><p>Maturity model for web APIs by Leonard Richardson (2008):</p><ol><li><p><strong>Level 0</strong>: Define <strong>one URI</strong>, and all operations are POST requests to this URI</p><ul><li>XML-RPC, most SOAP, and WSDL are examples of Level 0 APIs</li></ul></li><li><p><strong>Level 1</strong>: <strong>Multiple URIs</strong> for individual resources, but <strong>one HTTP method</strong> for all operations (usually POST)</p><ul><li>Most &quot;RESTful&quot; services that aren&#39;t</li><li><em>Example:</em> <code>POST /dogs</code> (retrieve), <code>POST /dogs/123</code> (update)</li></ul></li><li><p><strong>Level 2</strong>: Use HTTP methods to define operations on resources</p><ul><li>Many URIs each supporting multiple HTTP methods</li><li>Most published web APIs are at this level</li><li><em>Example:</em> <code>GET /dogs</code>, <code>POST /dogs</code>, <code>PUT /dogs/123</code>, <code>DELETE /dogs/123</code></li></ul></li><li><p><strong>Level 3</strong>: Hypermedia Controls</p><ul><li>Resources describe their own capabilities and interconnections</li><li>Use hypermedia <a href="#hateoas">HATEOAS</a></li><li>Used very rarely</li><li><em>Example:</em> <code>GET /dogs</code> returns a list of dogs with links to each dog</li></ul></li></ol><p><em>Level 3</em> corresponds to a truly RESTful API according to Fielding&#39;s definition. In practice, many published web APIs fall somewhere around <em>level 2</em></p><p><a href="https://martinfowler.com/articles/richardsonMaturityModel.html" target="_blank" rel="noreferrer">Richardson Maturity Model</a></p><h3 id="hypermedia" tabindex="-1">Hypermedia <a class="header-anchor" href="#hypermedia" aria-label="Permalink to “Hypermedia”">​</a></h3><p>The data format of representation is known as a <strong>media type</strong> and identifies a specification that defines how a representation is to be processed</p><p>Hypertext (or hypermedia) means the <strong>simultaneous presentation of information and controls</strong>. It can be HTML or JSON or XML or any format</p><h3 id="json" tabindex="-1">JSON <a class="header-anchor" href="#json" aria-label="Permalink to “JSON”">​</a></h3><p>JSON is widely used as the exchange format</p><p>Why JSON?</p><ul><li>Lightweight</li><li>Ubiquity</li><li>Simplicity</li><li>Readability (YAML is better)</li><li>Scalability</li><li>Flexibility</li></ul><p>Disadvantages:</p><ul><li>&quot;Loose&quot; and no enforced schema</li></ul><p>Use a standardized schema for REST and JSON</p><p>Popular REST and JSON approaches:</p><ul><li><a href="https://stateless.group/hal_specification.html" target="_blank" rel="noreferrer">HAL</a>: Designed specifically HATEOAS</li><li><a href="https://jsonapi.org/" target="_blank" rel="noreferrer">JSON API</a></li><li><a href="https://ionspec.org/" target="_blank" rel="noreferrer">ION</a>: Designed specifically HATEOAS</li><li><a href="https://json-schema.org/" target="_blank" rel="noreferrer">JSON Schema</a></li><li><a href="http://amundsen.com/media-types/collection/" target="_blank" rel="noreferrer">Collection+JSON</a></li></ul><h2 id="restful-api" tabindex="-1">RESTful API <a class="header-anchor" href="#restful-api" aria-label="Permalink to “RESTful API”">​</a></h2><p><strong>Application Programming Interface (API)</strong> is a connection between computers or between computer programs</p><p>API defines a contract on how to interact with the application</p><p>For an <strong>API to be RESTful</strong> it should comply with the following constraints:</p><ol><li><p><strong>Uniform Design (interface)</strong>: Once a developer becomes familiar with one of your APIs, he should be able to follow a similar approach for other APIs</p><ul><li>Resource identification in requests</li><li>Resource manipulation through representations</li><li>Self-descriptive messages</li><li><a href="#hateoas">Hypermedia as the engine of application state (HATEOAS)</a></li></ul></li><li><p><strong>Client-Server Architecture</strong>: Servers and clients may also be replaced and developed independently, as long as the interface between them is not altered</p></li><li><p><strong>Stateless</strong>: No client context shall be stored on the server between requests. The client is responsible for managing the state of the application</p></li><li><p><strong>Cacheable</strong> (last modified header): Well-managed caching partially or completely eliminates some client-server interactions, further improving scalability and performance</p></li><li><p><strong>Layered System</strong>: Layered system architecture where client dose know how many systems are involved in fulfilling the request</p></li><li><p><strong>Code on Demand</strong> (optional)</p></li></ol><p>All the above constraints help you build a truly RESTful API, and you should follow them. Still, at times, you may find yourself violating one or two constraints. Do not worry; you are still making a RESTful API - but not &quot;truly RESTful&quot;</p><h3 id="api-design" tabindex="-1">API Design <a class="header-anchor" href="#api-design" aria-label="Permalink to “API Design”">​</a></h3><ol><li><p>Entity-oriented:</p><ul><li>code manipulates the entities that are exposed</li><li>similar to learning a database schema</li><li>Their APIs are all the same</li><li><strong>RESTful APIs follow this</strong></li><li>Examples: <code>GET /dogs</code>, <code>POST /dogs</code></li></ul></li><li><p>Procedure-oriented:</p><ul><li>code calls procedure/function/method</li><li>similar to learning the libraries of a programming language</li><li>Their APIs are all different</li><li>Examples: <code>/getAllDogs</code>, <code>/getAllLeashedDogs</code>, <code>/verifyLocation</code>, <code>verifyVeterinarianLocation</code></li></ul></li></ol><p>Power of web:</p><ul><li>Links: link pages</li><li>State Transitions: send data</li></ul><p>API endpoint conventions and best practices:</p><ul><li>Use nouns to describe the API endpoint</li><li>Use plural nouns</li><li>Use sub-resources for relations</li><li>Nested resources: avoid many levels of nesting, it makes the API hard to understand. <em>Example:</em> <code>/customers/1/orders/2/products/3</code></li><li>Collection Resource: <code>/applications</code></li><li>Instance (Singleton) Resource: <code>/applications/a1b2c3</code></li><li>Consistent naming conventions</li><li>Use query parameters for filtering, sorting, and pagination</li><li>Use HTTP headers for metadata</li><li>Use HTTP status codes for errors</li><li>Use versioning in the URI or headers</li></ul><h3 id="http-methods" tabindex="-1">HTTP Methods <a class="header-anchor" href="#http-methods" aria-label="Permalink to “HTTP Methods”">​</a></h3><p>HTTP protocol has several method defined for different use cases.</p><p>Checkout notes about HTTP here: <a href="./HTTP.html">HTTP Notes Link</a></p><table tabindex="0"><thead><tr><th>Verb</th><th>Action</th><th>Idempotent?</th><th>Safe?</th><th>Response body?</th><th>Response cacheable?</th></tr></thead><tbody><tr><td><code>GET</code></td><td>Retrieve a resource</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td><code>HEAD</code></td><td>Retrieve header</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td><code>POST</code></td><td>Create or partial update</td><td>No</td><td>No</td><td>Yes??</td><td>Maybe?</td></tr><tr><td><code>PUT</code></td><td>Create or full update (upsert)</td><td>Yes</td><td>No</td><td>No</td><td>No</td></tr><tr><td><code>PATCH</code></td><td>Partial update</td><td>No</td><td>No</td><td>No</td><td>No</td></tr><tr><td><code>DELETE</code></td><td>Delete a resource</td><td>Yes</td><td>No</td><td>No</td><td>No</td></tr></tbody></table><ul><li>Post can only be cached if it contains what&#39;s called <em>freshness information</em> or headers that describe its cache ability</li></ul><table tabindex="0"><thead><tr><th>Verb</th><th>Full update?</th><th>Partial update?</th><th>Idempotent?</th><th>Response body?</th></tr></thead><tbody><tr><td><code>POST</code></td><td>Yes</td><td>Yes</td><td>No</td><td>Yes??</td></tr><tr><td><code>PUT</code></td><td>Yes</td><td>No</td><td>Yes</td><td>No</td></tr><tr><td><code>PATCH</code></td><td>No</td><td>Yes</td><td>No</td><td>No</td></tr></tbody></table><p>Common Update Semantics:</p><ol><li><p>Approach 1:</p><ul><li>POST to create</li><li>PUT for full updates</li><li>PATCH for partial updates</li><li>Most specification compliant but also more complex</li></ul></li><li><p>Approach 2:</p><ul><li>POST to create or update</li><li>Simpler and easier, but no idempotent update capability (treat all updates as partial updates)</li></ul></li></ol><h4 id="get" tabindex="-1">GET <a class="header-anchor" href="#get" aria-label="Permalink to “GET”">​</a></h4><ul><li><code>GET</code>: Retrieve information. Read-only (safe)</li><li>Successful: <strong>returns HTTP status code 200</strong> (OK)</li><li>If the <strong>resource cannot be found</strong>, the method should <strong>return 404</strong> (Not Found)</li></ul><h4 id="post" tabindex="-1">POST <a class="header-anchor" href="#post" aria-label="Permalink to “POST”">​</a></h4><ul><li><p><code>POST</code> and <code>PUT</code> can both be used for create and update</p></li><li><p><code>POST</code> is <strong>not Idempotent</strong></p></li><li><p><code>POST</code> for create: on a parent resource:</p><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">POST</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> /applications</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// partial resource data can be provided</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Best App Ever</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Response:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">201</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> Created</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">location: https:</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">//example.io/applications/a1b2c3</span></span></code></pre></div></li><li><p><code>POST</code> for update: on instance resource</p><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">POST</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> /applications/a1b2c3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// partial update</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Best App Ever</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Response:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> OK</span></span></code></pre></div></li><li><p>Creates a new resource: <strong>returns HTTP status code 201</strong> (Created). The URI of the new resource is included in the <code>Location</code> header of the response. The <strong>response body</strong> may contain a representation of the resource</p></li><li><p>Some processing is done but does not create a new resource, the method can <strong>return HTTP status code 200</strong> and include the result of the operation in the response body. Alternatively, if there is no result to return, the method can return <strong>HTTP status code 204</strong> (No Content) with no response body</p></li><li><p>If the client puts invalid data into the request, the server should <strong>return HTTP status code 400</strong> (Bad Request). The response body can contain additional information about the error or a link to a URI that provides more details</p></li></ul><h4 id="put" tabindex="-1">PUT <a class="header-anchor" href="#put" aria-label="Permalink to “PUT”">​</a></h4><ul><li><p><code>PUT</code> for create: if identifier is known by the client, <code>PUT /applications/[clientSpecifiedId]</code></p></li><li><p><code>PUT</code> for update: full replacement. <code>PUT</code> should be Idempotent (mandated by HTTP):</p><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">PUT</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> /applications/existingId</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// 100% of resource data is provided (create or update)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Best App Ever</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">description</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Awesomeness</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Response:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">204</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> No Content</span></span></code></pre></div></li><li><p>Creates a new resource: it <strong>returns HTTP status code 201</strong> (Created), as with a POST method. If the method updates an existing resource, it <strong>returns either 200 (OK) or 204 (No Content)</strong>. In some cases, it might not be possible to update an existing resource. In that case, consider <strong>returning HTTP status code 409</strong> (Conflict)</p></li><li><p>Consider implementing bulk HTTP PUT operations that can batch updates to multiple resources in a collection. The PUT request should specify the URI of the collection, and the request body should specify the details of the resources to be modified. This approach can help to reduce chattiness and improve performance</p></li><li><p>Similar to upsert behaviour in some databases</p></li></ul><h4 id="patch" tabindex="-1">PATCH <a class="header-anchor" href="#patch" aria-label="Permalink to “PATCH”">​</a></h4><ul><li><p><code>PATCH</code>: for partial update of record/entity</p><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">PATCH</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> /applications/existingId</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">description</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Changed...</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">Response:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">204</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> No Content</span></span></code></pre></div></li><li><p>With a PATCH request, the client sends a set of updates to an existing resource, in the form of a <em>patch document</em></p></li><li><p>The patch document doesn&#39;t describe the whole resource, only a set of changes to apply</p></li><li><p>There are two main JSON-based patch formats, called <em>JSON patch</em> and <em>JSON merge patch</em>.</p></li><li><p><a href="https://datatracker.ietf.org/doc/html/rfc7396" target="_blank" rel="noreferrer">JSON merge patch</a> is somewhat simpler. The patch document has the same structure as the original JSON resource, but includes just the subset of fields that should be changed or added. In addition, a field can be deleted by specifying <code>null</code> for the field value in the patch document. (That means merge patch is not suitable if the original resource can have explicit <code>null</code> values.)</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">gizmo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">category</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">widgets</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">color</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">blue</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">price</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>JSON merge patch for the above example:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">price</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 12</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">color</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">size</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">small</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>This tells the server to update <code>price</code>, delete <code>color</code>, and add <code>size</code>, while <code>name</code> and <code>category</code> are not modified.</p></li><li><p>Media type: <code>application/merge-patch+json</code></p></li><li><p><a href="https://datatracker.ietf.org/doc/html/rfc6902" target="_blank" rel="noreferrer">JSON patch</a> is more flexible. It specifies the changes as a sequence of operations to apply. Operations include add, remove, replace, copy, and test (to validate values).</p></li><li><p>Media type: <code>application/json-patch+json</code></p></li></ul><table tabindex="0"><thead><tr><th>Error condition</th><th>HTTP status code</th></tr></thead><tbody><tr><td>The patch document format isn&#39;t supported.</td><td>415 (Unsupported Media Type)</td></tr><tr><td>Malformed patch document.</td><td>400 (Bad Request)</td></tr><tr><td>The patch document is valid, but the changes can&#39;t be applied to the resource in its current state.</td><td>409 (Conflict)</td></tr></tbody></table><h4 id="delete" tabindex="-1">DELETE <a class="header-anchor" href="#delete" aria-label="Permalink to “DELETE”">​</a></h4><ul><li><p><code>DELETE</code>: delete</p></li><li><p>If the delete operation is successful, the web server should respond with <strong>HTTP status code 204</strong> (No Content), indicating that the process has been successfully handled, but that the response body contains no further information. If the resource doesn&#39;t exist, the web server can return <strong>HTTP 404</strong> (Not Found).</p></li></ul><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">DELETE</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> /applications/existingId</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">Response</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">204 No Content</span></span></code></pre></div><h4 id="head" tabindex="-1">HEAD <a class="header-anchor" href="#head" aria-label="Permalink to “HEAD”">​</a></h4><ul><li><code>HEAD</code>: Retrieve headers, no body. Read-only (safe)</li><li>Useful to get headers such as to check cache expiration</li></ul><h4 id="options" tabindex="-1">OPTIONS <a class="header-anchor" href="#options" aria-label="Permalink to “OPTIONS”">​</a></h4><ul><li><code>OPTIONS</code>: HTTP communication options</li></ul><h3 id="http-semantics" tabindex="-1">HTTP Semantics <a class="header-anchor" href="#http-semantics" aria-label="Permalink to “HTTP Semantics”">​</a></h3><p>Considerations for designing an API that conforms to the HTTP specification</p><h4 id="media-types" tabindex="-1">Media Types <a class="header-anchor" href="#media-types" aria-label="Permalink to “Media Types”">​</a></h4><ul><li><p>Format specification + Parsing rules</p></li><li><p><code>Content-Type</code>: header in a request or response specifies the format of the representation</p></li><li><p>If the server doesn&#39;t support the media type, it should <strong>return HTTP status code 415</strong> (Unsupported Media Type)</p></li><li><p>JSON: <code>application/json</code></p></li><li><p>XML: <code>application/xml</code></p></li><li><p><code>application/ion+json</code>, <code>application/ion+json;v=2</code></p><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">POST</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> https://adventure-works.com/orders </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">1.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> application/json; charset=utf-8</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">Content-Length</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> 57</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Id</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Name</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Gizmo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Category</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Widgets</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Price</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">1.99</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>A client request can include an <code>Accept</code> header that contains a list of media types the client will accept from the server in the response message</p></li><li><p>If the server cannot match any of the media type(s) listed, it should <strong>return HTTP status code 406</strong> (Not Acceptable)</p><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> https://adventure-works.com/orders/2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">1.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">Accept</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> application/json</span></span></code></pre></div></li></ul><h3 id="asynchronous-operations" tabindex="-1">Asynchronous Operations <a class="header-anchor" href="#asynchronous-operations" aria-label="Permalink to “Asynchronous Operations”">​</a></h3><ul><li><p>Sometimes a POST, PUT, PATCH, or DELETE operation might require processing that takes a while to complete</p></li><li><p>If you wait for completion before sending a response to the client, it may cause unacceptable latency. If so, consider making the operation asynchronous</p></li><li><p><strong>Return HTTP status code 202</strong> (Accepted) to indicate the request was accepted for processing but is not completed</p></li><li><p>You should expose an endpoint that returns the status of an asynchronous request, so the client can monitor the status by polling the status endpoint. Include the URI of the status endpoint in the Location header of the 202 response</p><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">1.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 202</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> Accepted</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">Location</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> /api/status/12345</span></span></code></pre></div></li><li><p>If the client sends a GET request to this endpoint, the response should contain the current status of the request. Optionally, it could also include an estimated time to completion or a link to cancel the operation</p><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">1.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 200</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> OK</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> application/json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">status</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">In progress</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">link</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">rel</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">cancel</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">method</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">delete</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">href</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">/api/status/12345</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>If the asynchronous operation creates a new resource, the status endpoint should return status code 303 (See Other) after the operation completes. In the 303 response, include a Location header that gives the URI of the new resource:</p><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">1.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 303</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> See Other</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">Location</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> /api/orders/12345</span></span></code></pre></div></li></ul><p>For more information, see <a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/async-request-reply" target="_blank" rel="noreferrer">Asynchronous Request-Reply pattern</a></p><h3 id="filter-and-paginate-data" tabindex="-1">Filter and Paginate Data <a class="header-anchor" href="#filter-and-paginate-data" aria-label="Permalink to “Filter and Paginate Data”">​</a></h3><ul><li>API can allow passing a filter in the query string of the URI, such as <code>/orders?minCost=n</code></li><li>Server parses the parameter present in the query and returns the filtered results</li></ul><p><em>Example:</em> Query strings that specify the maximum number of items to retrieve and a starting offset into the collection</p><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">/orders?limit=25&amp;offset=50</span></span></code></pre></div><p>Also consider imposing an upper limit on the number of items returned, to help prevent Denial of Service attacks. To assist client applications, GET requests that return paginated data should also include some form of metadata that indicate the total number of resources available in the collection</p><p>You can use a similar strategy to sort data as it is fetched, by providing a sort parameter that takes a field name as the value, such as <code>/orders?sort=ProductID</code>. However, this approach can have a negative effect on caching, because query string parameters form part of the resource identifier used by many cache implementations as the key to cached data</p><p>You can extend this approach to limit the fields returned for each item, if each item contains a large amount of data. For example, you could use a query string parameter that accepts a comma-delimited list of fields, such as <code>/orders?fields=ProductID,Quantity</code></p><p>Give all optional parameters in query strings meaningful defaults. For example, set the limit parameter to 10 and the offset parameter to 0 if you implement pagination, set the sort parameter to the key of the resource if you implement ordering, and set the fields parameter to all fields in the resource if you support projections</p><h3 id="sorting" tabindex="-1">Sorting <a class="header-anchor" href="#sorting" aria-label="Permalink to “Sorting”">​</a></h3><h3 id="searching" tabindex="-1">Searching <a class="header-anchor" href="#searching" aria-label="Permalink to “Searching”">​</a></h3><h3 id="error-handling" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to “Error Handling”">​</a></h3><p><a href="https://datatracker.ietf.org/doc/html/rfc7807" target="_blank" rel="noreferrer">RFC 9457 - Problem Details for HTTP APIs (2023)</a> defines a &quot;problem detail&quot; as a way to carry machine-readable details of errors in a HTTP response to avoid the need to define new error response formats for HTTP APIs</p><ul><li>Be consistent in error responses</li><li>Provide a unique error code for each error type, this helps in debugging and troubleshooting</li><li>Include a human-readable error message in the response body</li><li>Include a link to more information about the error</li></ul><p>Use HTTP status codes:</p><ul><li><p>Status codes for scenarios:</p><ul><li>Everything worked: <code>200</code></li><li>The application did something wrong: <code>404</code></li><li>The API did something wrong: <code>500</code></li></ul></li><li><p>Google GData: <code>200, 201, 304, 400, 401, 403, 404, 409, 410, 500</code></p></li><li><p>Netflix: <code>200, 201, 304, 400, 401, 403, 404, 412, 500</code></p></li><li><p>Digg: <code>200, 400, 401, 403, 404, 410, 500, 503</code></p></li></ul><p>On an average 8 codes: <code>200, 201, 304, 400, 401, 403, 404, 500</code></p><ul><li><p>Twilio:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// HTTP Status Code: 401</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">status</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 401</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">message</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Authenticate</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">code</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2003</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">more_info</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://www.twilio.com/docs/errors/20003</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li></ul><h3 id="api-versioning" tabindex="-1">API Versioning <a class="header-anchor" href="#api-versioning" aria-label="Permalink to “API Versioning”">​</a></h3><p>APIs need to be versioned if breaking changes need to be implemented</p><ul><li>Create directories/namespaces like <code>v1</code>, <code>v2</code> and add the controllers inside them</li></ul><p>Approaches to Restful Versioning:</p><ol><li><p>Don&#39;t version if possible (clients should be dynamic)</p></li><li><p>Content/Media type (header) versioning (ideal): Content negotiation process that already exists in HTTP. When clients request a media type using the Accept header they can explicitly include a version number or string in the media type itself</p><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> api/test </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">1.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">host</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> localhost</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">Accept</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> application/ion+json;v=2.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">content-type</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> text/plain;v=1.0</span></span></code></pre></div></li><li><p>URL prefix (path) versioning:</p><ul><li><code>/api/v1/test</code>, <code>/api/v2/test</code></li><li>Least restful</li><li>But more explicit to the clients</li></ul></li><li><p>Query String:</p><ul><li><code>/api/test?api-version=1.0</code>, <code>/api/test?api-version=2.0</code></li><li>Set default version</li></ul></li><li><p>HTTP Header:</p><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> api/test </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">1.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">host</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> localhost</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">custom-version-header</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> 1.0</span></span></code></pre></div></li></ol><h2 id="hateoas" tabindex="-1">HATEOAS <a class="header-anchor" href="#hateoas" aria-label="Permalink to “HATEOAS”">​</a></h2><p><strong>Hypermedia As The Engine Of Application State (HATEOAS)</strong>: Everything that is required to understand is within the document exchanged through REST API. The client dose not need any out-of-band information, just the API responses</p><p>The responses from the API tell the client what it can do</p><ul><li>Responses should include links to the actions available</li><li>Single (root) entry point</li><li>Self-documentation: No need for out-of-band information or documentation</li></ul><p>Features:</p><ul><li><strong>Self-descriptive messages</strong>: Each message includes enough information to describe how to process the message</li><li><strong>Resource state</strong>: The client can transition between application states by following links in the responses</li><li><strong>Hypermedia links</strong>: The client can navigate the API by following links in the responses</li><li><strong>Stateless communication</strong>: The client can interact with the API without needing to store application state on the server</li><li><strong>Uniform interface</strong>: The client can interact with the API using a consistent set of methods</li></ul><p><em>Example:</em> The below object must be parsed as a collection</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">href</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://example.io/people/123</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">rel</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">collection</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">value</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">href</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://example.io/users/123</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">login</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">ddata</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">href</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://example.io/users/456</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">login</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">ttester</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="hal-specification" tabindex="-1">HAL Specification <a class="header-anchor" href="#hal-specification" aria-label="Permalink to “HAL Specification”">​</a></h3><p>HAL (Hypertext Application Language) is a simple format that gives a consistent and easy way to hyperlink between resources in your API</p><ul><li><a href="https://stateless.group/hal_specification.html" target="_blank" rel="noreferrer">HAL Specification</a></li><li>Mime type: <code>application/hal+json</code></li></ul><p>The structure of a HAL document:</p><ul><li><p>Minimum valid document: <code>{}</code></p></li><li><p>Resources: should have a self URI</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">_links</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">self</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">href</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://example.io/people/123</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">firstName</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Godzilla</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">birthDay</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">1970-02-31</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>Links: must be contained directly within a resource</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">_links</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">self</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">href</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://example.io/people/123</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">friends</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      {</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">href</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://example.io/people/456</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">      {</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">href</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://example.io/people/789</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li>Link relations: Links have a relation (aka. &#39;rel&#39;). This indicates the semantic - the meaning - of a particular link</li></ul></li></ul><h3 id="ion-specification" tabindex="-1">ION Specification <a class="header-anchor" href="#ion-specification" aria-label="Permalink to “ION Specification”">​</a></h3><p>Ion (Interconnected Object Notation) is a JSON-based format that includes hypermedia links (HATEOAS in JSON)</p><ul><li><a href="https://ionspec.org/" target="_blank" rel="noreferrer">ION Working Group</a></li><li>Mime type: <code>application/ion+json</code></li></ul><p>Ion objects contain:</p><ul><li><p>Links in ION:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">href</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://example.io</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">method</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">GET</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">rel</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">self</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>Resources in ION: Include a self-referential link</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">self</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">href</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://example.io/people/123</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">firstName</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Godzilla</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">birthDay</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">1970-02-31</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// or implied</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">href</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://example.io/people/123</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">firstName</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Godzilla</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">birthDay</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">1970-02-31</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p><code>value</code> object: property. Models a collection of resources</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// no context of the language</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">greeting</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hola</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// metadata can be used to define the property</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">greeting</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">        &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">value</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hola</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">        &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">lang</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">es</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p><em>Example:</em> The below object must be parsed as a collection</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">href</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://example.io/people/123</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">rel</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">collection</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">value</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">href</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://example.io/users/123</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">login</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">ddata</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">href</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://example.io/users/456</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">login</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">ttester</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>Collection: Meta-data can contain info relevant to each element of the collection (no need to repeat this info in each element) or the property of the collection (length, max-size...)</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// no info about the collection</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">value</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // metadata ...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">rel</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">collection</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">value</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>Linking:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// links</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">href</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://example.io/users/a1b2c3c</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// link to other details</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">GET /users/x</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">y</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">z</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">9</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">givenName</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Tony</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">surname</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Stark</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    ...,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">company</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">        &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">href</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://example.io/orgs/g4h5i6</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">        &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">rel</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">collection</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// linking self</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">GET /users/x</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">y</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">z</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">9</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">self</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">href</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://example.io/users/x7y8z9</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">givenName</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Tony</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">surname</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Stark</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    ...,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li></ul><h3 id="forms-in-ion" tabindex="-1">Forms in ION <a class="header-anchor" href="#forms-in-ion" aria-label="Permalink to “Forms in ION”">​</a></h3><p>While Posting data, how do clients know which fields and types of data to submit to an endpoint?</p><ul><li><p>This can be solved using ION forms</p></li><li><p>ION form is very similar to an HTML form</p></li><li><p>ION forms are modelled on an ION collection of form fields objects</p></li><li><p>HTML Form:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://example.io/register</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">POST</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">text</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">firstName</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">text</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">lastName</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#4D9375;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&gt;</span></span></code></pre></div></li><li><p>As ION collection:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">href</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https://example.io/register</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">rel</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">form</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">],</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // (or edit-form, create-form, query-form)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">method</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">POST</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">value</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">firstName</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">type</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">lastName</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">type</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">required</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li><li><p>The ION form describes the metadata about what can be submitted to a particular endpoint. To submit a form, a client will read that metadata and create a request with the proper method and parameters</p></li></ul><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to “Example”">​</a></h3><p>Employee resource API:</p><ol><li><p>GET route: returns array of employees</p><ul><li><p>Query Parameters:</p><ul><li><code>bodyLimit</code></li><li><code>pageLimit</code></li></ul></li><li><p>Responses:</p><ul><li>200 Payload: <ul><li><code>ID</code></li><li><code>Name</code></li><li><code>Title</code></li></ul></li></ul></li></ul></li><li><p>GET route: returns specific employee</p><ul><li><p>Path Parameters:</p><ul><li><code>ID</code></li></ul></li><li><p>Responses:</p><ul><li>200 Payload: <ul><li><code>ID</code></li><li><code>Name</code></li><li><code>Title</code></li></ul></li></ul></li></ul></li><li><p>POST route: add new employee</p><ul><li><p>Parameters:</p><ul><li>Payload: <ul><li><code>ID</code></li></ul></li></ul></li><li><p>Responses:</p><ul><li>200</li></ul></li></ul></li></ol><h2 id="adding-an-api" tabindex="-1">Adding an API <a class="header-anchor" href="#adding-an-api" aria-label="Permalink to “Adding an API”">​</a></h2><ol><li><p>Bolt-On Strategy: for existing systems</p><ul><li>Brute-force approach</li><li>The fastest way to build something useful</li><li>Benefit: takes advantages of existing code and systems</li><li>Drawback: problems in the application or architecture leak through into the API</li></ul></li><li><p>Greenfield Strategy: for new systems</p><ul><li>API or mobile-first mindset</li><li>Benefits: takes advantage of new technologies and architectures and may reinvigorate the team</li><li>Drawback: often requires massive upfront investment before any Benefits appear</li></ul></li><li><p>Facade Strategy: replacing piece by piece</p><ul><li>Benefit: ideal for legacy systems as the application is always functional</li><li>Drawback: multiple mindsets in the system</li><li>Drawback: hard to replicate behaviour for a full one-on-one conversion</li></ul></li></ol><h2 id="openapi" tabindex="-1">OpenAPI <a class="header-anchor" href="#openapi" aria-label="Permalink to “OpenAPI”">​</a></h2><p>It is RESTful API specification (AKA Swagger Specification)</p><ul><li>Allow machines/tools to integrate with API</li><li>Allow humans to implement API code</li><li>Allow humans to read and generate API documentation and test cases</li><li>Latest version 3.0</li></ul><p>OpenAPI is a format for describing restful APIs, but it isn&#39;t quite a schema like HAL or Ion</p><p>The API description is saved in a file called <code>swagger.json</code>:</p><ul><li>You can build a <code>swagger.json</code> file by hand or generate it automatically</li><li><code>swagger.json</code> can be processed to automatically to create a strongly typed client for your API or to generate API tests</li><li><code>swagger.json</code> also enables a web tool called <em>Swagger UI</em>, which allows a human to browse to your API definition and documentation and interact with the API in real time</li></ul><h2 id="api-security" tabindex="-1">API Security <a class="header-anchor" href="#api-security" aria-label="Permalink to “API Security”">​</a></h2><p>Checkout notes about API Security here: <a href="./../Application_Security/API.html">API Security Notes Link</a></p><h2 id="api-performance" tabindex="-1">API Performance <a class="header-anchor" href="#api-performance" aria-label="Permalink to “API Performance”">​</a></h2><ul><li>API documentation</li><li>Complex Database Queries</li><li>Cost</li><li>Security risk</li><li>Inefficient &amp; Complex Code</li><li>Inadequate caching mechanism</li><li>Technological complexity</li></ul><p>Optimization techniques:</p><ol><li><p>Caching</p></li><li><p>Connection pooling:</p><ul><li>Reduce number of connections created and destroyed</li><li>But also maintain the number of connections open in order not to overwhelm the Database</li><li>RDS Proxy: it sits between your application and database to efficiently manage DB connections</li></ul></li><li><p>Avoid N+1 Query Problem:</p><ul><li>N+1 Problem: Include enough information in single resources inside collection resources</li></ul></li><li><p>Pagination:</p></li><li><p>Fast serialization libraries</p></li><li><p>Compression:</p><ul><li>Brotli</li></ul></li><li><p>Asynchronous logging</p></li></ol><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to “References”">​</a></h2><ul><li><p>RESTful Web Services by Leonard Richardson &amp; Sam Ruby</p></li><li><p><a href="https://hypermedia.systems/introduction/" target="_blank" rel="noreferrer">Hypermedia Systems by Carson Gross, Adam Stepinski, Deniz Akşimşek</a></p></li><li><p>Course: <em>Web Security: OAuth and OpenID Connect with Keith Casey</em></p></li><li><p>YouTube: <em>OAuth 2.0 and OpenID Connect (in plain English)</em> with Nate Barbettini</p></li><li><p>RESTful Web APIs: Services for a Changing World - by Leonard Richardson</p></li><li><p><em>Learning RESTful APIs</em></p></li><li><p><em>Rest in Practice</em></p></li><li><p><em>RESTful Web Services Cookbook</em></p></li><li><p>Nate Barbettini: building-and-securing-restful-apis-in-asp-dot-net-core-2018</p></li></ul><h2 id="todo" tabindex="-1">TODO <a class="header-anchor" href="#todo" aria-label="Permalink to “TODO”">​</a></h2><ul><li>Base URL</li><li>URL versioning</li><li>ID strategies</li><li>DateTime representation</li><li>Resource timestamps</li><li>Collection Pagination</li><li>Sorting</li><li>Search</li><li>Many to Many Associations</li><li>Custom Form Constraints</li><li>Async Operations</li><li>Long-Lived Operations</li><li>Batch Operations</li><li>Clean Errors</li><li>Security Controls</li><li>Caching &amp; Concurrency</li><li>Long Term Maintenance</li></ul>`,168)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"Git","description":"Git is distributed version control system (VCS) for tracking changes in files and coordinating work on those files among multiple people","frontmatter":{"title":"Git","description":"Git is distributed version control system (VCS) for tracking changes in files and coordinating work on those files among multiple people"},"headers":[],"relativePath":"Languages/Git/Git.md","filePath":"Languages/Git/Git.md","lastUpdated":1756574703000}`);var a={name:`Languages/Git/Git.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="git" tabindex="-1">Git <a class="header-anchor" href="#git" aria-label="Permalink to “Git”">​</a></h1><p>It is a <strong>distributed Version Control System (VCS)</strong>. Version control is a way to save changes over time without overwriting previous versions (Version Control is a system which records the changes made to a file so that you can recall a specific version later)</p><p>It helps in <strong>tracking changes in the project</strong> and <strong>coordinating work</strong> on those files among multiple people</p><ul><li>VCS also know as <em>Source Code Management</em> (SCM)</li></ul><p>Types of Version Control Systems:</p><ol><li><p><strong>Local</strong>: It allows you to copy files into another directory and rename it (For example, project.1.1). This method is error-prone and introduces redundancy</p></li><li><p><strong>Centralised</strong>: All version files are present in a single central server. For example, CVS, SVN, and Perforce</p></li><li><p><strong>Distributed</strong>: All changes are available in the server as well as in local machines. Being distributed means that every developer working with a Git repository has a copy of that entire repository. For example, <em>Git</em> and <em>Mercurial</em></p></li></ol><h2 id="history" tabindex="-1">History <a class="header-anchor" href="#history" aria-label="Permalink to “History”">​</a></h2><p>Old VCS that predate Git:</p><ul><li><p>Source Code Control System (SCCS):</p><ul><li>1972: closed source, free with Unix</li><li>Stored original version and sets of changes</li></ul></li><li><p>Revision Control System (RCS):</p><ul><li>1982: open source</li><li>Stored latest version and sets of changes</li></ul></li><li><p>Concurrent Version System (CVS):</p><ul><li>1986-1990: open source</li><li>Multiple files, entire project</li><li>Multi-user repositories</li></ul></li><li><p>Apache Subversion (SVN):</p><ul><li>2000: open source</li><li>Track text and images</li><li>Track file changes collectively (track directory)</li></ul></li><li><p>BitKeeper SCM:</p><ul><li>2000: closed source, proprietary</li><li>Distributed version control</li></ul></li><li><p>Git:</p><ul><li>April 2005</li><li>Linus Tovalds</li><li>Distributed version control</li><li>Open source and free software</li><li>Faster than other SCMs (100 times in some cases)</li><li>Better safeguards against data corruption</li></ul></li></ul><h3 id="distributed-version-control" tabindex="-1">Distributed Version Control <a class="header-anchor" href="#distributed-version-control" aria-label="Permalink to “Distributed Version Control”">​</a></h3><ul><li>Different users maintain their own repositories</li><li>No central repository</li><li>Changes are stored as change sets: <ul><li>Track changes, not versions</li><li>Different from CVS and SVN, which tracked versions</li><li>Change sets can be exchanged between repositories</li><li>&quot;Merge in change sets&quot; or &quot;apply patches&quot;</li></ul></li><li>No single master repository</li><li>Many working copies</li><li>No need to communicate with a central server</li><li>No network access required</li><li>No single failure point</li></ul><h2 id="git-internals" tabindex="-1">Git Internals <a class="header-anchor" href="#git-internals" aria-label="Permalink to “Git Internals”">​</a></h2><p>Git uses 3 Tree architecture:</p><ul><li>Repository</li><li>Staging Index</li><li>Working</li></ul><p>These 3 stages are:</p><table tabindex="0"><thead><tr><th>#</th><th>Stages</th><th>Details</th></tr></thead><tbody><tr><td>1</td><td>Working Directory</td><td>Un-tracked new files and modified directories are found here.</td></tr><tr><td>2</td><td>Staging Area</td><td>Things we want to commit and ignore which we don&#39;t want.</td></tr><tr><td>3</td><td>Remote Repository</td><td><code>.git</code> directory(Repository)</td></tr></tbody></table><p>The <code>.git</code> folder contains different files and folders:</p><ul><li><code>hooks/</code>:</li><li><code>info/</code>:</li><li><code>objects/</code>:</li><li><code>ref/</code>:</li><li><code>config</code>: file contains configurations specific to that repository</li><li><code>description</code>:</li><li><code>HEAD</code>: A link to a point in</li><li><code>logs/</code>: Created after first commit,</li><li><code>index</code>: Created after first commit,</li><li><code>COMMIT_EDITMSG</code>: Created after first commit,</li></ul><p>The <code>objects</code> folder consists of 4 types of objects:</p><ol><li><em>Blob</em> (Binary large object): Copy of contents of the file</li><li><em>Tree</em></li><li><em>Commit</em>: Creates a snapshot of the project at a given point</li><li><em>Annotated tag</em></li></ol><ul><li><p><code>git cat-file</code>: Provide content or type and size information for repository objects:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># find the type of object</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> cat-file</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -t</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [commitSHA]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># see file content</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> cat-file</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> HEAD:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">[filename]</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre></div></li></ul><h3 id="repositories" tabindex="-1">Repositories <a class="header-anchor" href="#repositories" aria-label="Permalink to “Repositories”">​</a></h3><p>When working on a Git project most of the time the user will have to deal with two repositories:</p><ul><li><p><em>Remote Repository</em>: They are versions of your project that are hosted on the Internet or network somewhere</p></li><li><p><em>Local Repository</em>: It is a copy of the remote repository that exists on the user&#39;s workstation. This is the repository where the user works on the project</p></li></ul><h3 id="head" tabindex="-1">Head <a class="header-anchor" href="#head" aria-label="Permalink to “Head”">​</a></h3><p><strong>HEAD</strong> is a reference variable that always <strong>points to the tip of your current (working) branch, that is, recent commit of your current branch</strong></p><ul><li><p>The <code>HEAD</code> file inside the <code>.git/</code> directory holds the reference value</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> .git/HEAD</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># output</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># ref: refs/heads/master</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> refs/heads/master</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># returns a SHA value which is the</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># SHA of a commit to which HEAD currently points to</span></span></code></pre></div></li></ul><p>HEAD can be used with the following symbols to refer to other commits:</p><ul><li><em>Tilde symbol (<code>~</code>)</em>: Used to point to the previous commits from base HEAD</li><li><em>Caret symbol (<code>^</code>)</em>: Used to point to the immediate parent commit from the current referenced commit</li></ul><p>Usage:</p><ul><li><strong>HEAD:</strong> current branch</li><li><strong>HEAD^:</strong> parent of HEAD</li><li><strong>HEAD~4:</strong> the great-great grandparent of HEAD</li></ul><p>The git commands that require commit-hash will default to HEAD if no commit-hash is provided</p><h3 id="dot-operators" tabindex="-1">Dot Operators <a class="header-anchor" href="#dot-operators" aria-label="Permalink to “Dot Operators”">​</a></h3><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to “Installation”">​</a></h2><p>Git can be installed on the most common operating systems like Windows, Mac, and Linux</p><p>Download Git from this <a href="https://git-scm.com/downloads" target="_blank" rel="noreferrer">link</a> and install it</p><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to “Configuration”">​</a></h2><p>All the Git configurations are stored in a file:</p><ol><li><p>The <strong>configurations specific to the users</strong> resides in home directory as <code>~/.gitconfig</code> or <code>~/.config/git/config</code> file</p><ul><li>To add configurations to this file we pass <code>--global</code> option in the CLI</li></ul></li><li><p>The <strong>configurations specific to a repository</strong> resides as <code>.git/config</code> file</p><ul><li>To add configurations to this file we pass <code>--local</code> option or just <code>git config</code> in the CLI</li></ul></li><li><p>The <strong>configurations specific to that machine</strong> resides as <code>/etc/gitconfig</code> file</p><ul><li>To add configurations to this file we pass <code>--system</code> option in the CLI</li></ul></li></ol><p>The <strong>priority</strong> in which these configuration files are used is: <strong>local</strong> &gt; <strong>global</strong> &gt; <strong>system</strong></p><p>Git configuration commands:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># list all configurations</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --list</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># check specific configuration</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [config </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">name]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> user.name</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># check in which file a specific configuration resides</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --show-origin</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [config </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">name]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --show-origin</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> user.name</span></span></code></pre></div><ul><li><p>For the <strong>initial setup</strong> the user must provide their identity such as full name and email address, this is required as it helps in identifying the person making the commits (saving changes)</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># add username and email</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> user.name</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">First Last</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> user.email</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">myemail@domain.com</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># change the core editor</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> core.editor</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [editor </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">name]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> core.editor</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> vim</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># colourize user interface (might be on by default) [true, auto]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> color.ui</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span></span></code></pre></div></li></ul><p>We can modify configurations from the CLI or by directly modifying the configuration file</p><ul><li><p>Add this to automatically create a new upstream branch for your local branch</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> push.autoSetupRemote</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span></span></code></pre></div></li></ul><div class="tip custom-block"><p class="custom-block-title">WINDOWS</p><p>In windows Git looks for <code>.gitconfig</code> file in <code>$HOME</code> directory (<code>C:\\Users\\$USER</code>)</p></div><h3 id="attributes" tabindex="-1">Attributes <a class="header-anchor" href="#attributes" aria-label="Permalink to “Attributes”">​</a></h3><p>A <code>.gitattributes</code> file is a simple text file that gives attributes to pathnames</p><ul><li>The <code>.gitattributes</code> file allows you to specify the files and paths attributes that should be used by git when performing git actions</li></ul><p><em>Example:</em></p><ul><li>Use <code>exiftool</code> to diff metadata of <code>png</code> files:</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># take every file that ends in png</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># and pre-process them with a strategy called \`exif\`</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">*.png diff=exif</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> .gitattributes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># the \`exif\` strategy is to run exiftool on the file</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> diff.exif.textconv</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> exiftool</span></span></code></pre></div><h3 id="ssh" tabindex="-1">SSH <a class="header-anchor" href="#ssh" aria-label="Permalink to “SSH”">​</a></h3><p>Set-up SSH keys for authenticating to a remote repository hosting service:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">ssh-keygen</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> rsa</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -b</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 4096</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre></div><h2 id="git-commands" tabindex="-1">Git Commands <a class="header-anchor" href="#git-commands" aria-label="Permalink to “Git Commands”">​</a></h2><p>Git was initially a <strong>toolkit for a VCS</strong> and hence consists of a number of subcommands divided into:</p><ol><li><p><em>Plumbing</em>: Subcommands that do low-level work and were designed to be chained together UNIX-style or called from scripts</p><ul><li>Around 63 commands</li><li>19 manipulators (<code>apply</code>, <code>commit-tree</code>, <code>update-ref</code>, ...)</li><li>21 interrogators (<code>cat-file</code>, <code>for-each-ref</code>, ...)</li><li>5 syncing (<code>fetch-pack</code>, <code>send-pack</code>, ...)</li><li>18 internal (<code>check-attr</code>, <code>sh-i18n</code>, ...)</li></ul></li><li><p><em>Porcelain</em>: More user-friendly commands</p><ul><li>Around 82 commands</li><li>42 main commands (<code>add</code>, <code>commit</code>, <code>push</code>, <code>push</code>, ...)</li><li>11 manipulators (<code>config</code>, <code>reflog</code>, <code>replace</code>, ...)</li><li>17 interrogators (<code>blame</code>, <code>fsck</code>, <code>rerere</code>, ...)</li><li>10 inter-actors (<code>send-email</code>, <code>p4</code>, <code>svn</code>, ...)</li></ul></li></ol><ul><li>There are around 145 commands</li></ul><h3 id="help" tabindex="-1">Help <a class="header-anchor" href="#help" aria-label="Permalink to “Help”">​</a></h3><p>You can get information about any of the Git commands by:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> help</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [git </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">command</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> name]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> help</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># or</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [git </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">command</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> name]</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --help</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --help</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># or</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">man</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> git-[command</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> name]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">man</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> git-config</span></span></code></pre></div><h3 id="initialize-git" tabindex="-1">Initialize Git <a class="header-anchor" href="#initialize-git" aria-label="Permalink to “Initialize Git”">​</a></h3><p>This command can be used:</p><ul><li>To create a new project with Git</li><li>Or initializes the current folder to track its changes by Git:</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># transform the current directory into a git repository</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> init</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># transform a directory in the current path into a git repository</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [directory </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">name]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># create a new bare repository</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --bare</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># create shared repository</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --bare</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --shared=all</span></span></code></pre></div><p>The above command creates a hidden <code>.git</code> folder. That directory stores all of the <a href="#git-internals">objects and refs</a> that Git uses and creates as a part of your project&#39;s history</p><p>This hidden <code>.git</code> directory is what separates a regular directory from a Git repository</p><h3 id="clone-repository" tabindex="-1">Clone Repository <a class="header-anchor" href="#clone-repository" aria-label="Permalink to “Clone Repository”">​</a></h3><p>Git clone gets the complete project from remote to your local machine (used to create a copy of a specific repository or branch within a repository)</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> clone</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [repo </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> url/ssh</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> link]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># you can also provide your own repo name</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> clone</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [repo </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">https</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> url/ssh</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> link]</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [repo </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">name]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># clone a repository but without the ability to edit any of the files</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --mirror</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># clone only a single branch</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --single-branch</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># partial cloning</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># get only the last commit and the objects it needs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --depth=1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># to get rest of the history later run</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> fetch</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --unshallow</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># if you want to do a blobless or treeless clone</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># it will bring data as needed (\`git blame\`, etc. will fetch data)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --filter=blob:none</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --filter=tree:0</span></span></code></pre></div><p><code>git init</code> vs <code>git clone</code>:</p><ul><li><p><code>git init</code>: One Person Starting a New Repository Locally or Initializing Existing Folder</p></li><li><p><code>git clone</code>: The Remote Already Exists</p></li></ul><h3 id="remote-repository" tabindex="-1">Remote Repository <a class="header-anchor" href="#remote-repository" aria-label="Permalink to “Remote Repository”">​</a></h3><p>When we clone a remote repository, a reference of that remote repository will be added to your local repository configuration. This reference is used to communicate changes between the local repository and the remote repository</p><ul><li>URL can be HTTPS or SSH</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># list all remote connections</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> remote</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># list all remote connections with URL</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> remote</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -v</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># add new remote connection</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [name] </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">URL</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># remove a remote connection</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> remove</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [name]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># change remote connection URL</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> set-url</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [URL]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># rename a remote connection</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> rename</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [old-name] </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">new-name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span></code></pre></div><p>When a repo is clone a default remote URL is added with the name <code>origin</code>. And if the repository has multiple remotes then typically the new URL is added with the name <code>upstream</code></p><h3 id="remove-git-tracking" tabindex="-1">Remove Git Tracking <a class="header-anchor" href="#remove-git-tracking" aria-label="Permalink to “Remove Git Tracking”">​</a></h3><p>To remove Git tracking from the project, just delete the hidden <code>.git</code> folder</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -rf</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> .git</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">NOTE</p><p>If you remove this folder you will permanently loose the project history, unless you have a remote copy</p></div><h3 id="status" tabindex="-1">Status <a class="header-anchor" href="#status" aria-label="Permalink to “Status”">​</a></h3><p>Displays the current state of the staging area and the working directory, that is, which files are added/removed/modified in the working directory and which files are staged</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> status</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># give output in short format</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> status</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -s</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># &quot;verbose&quot; output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> status</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -v</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># get short status with branch name</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> status</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -sb</span></span></code></pre></div><h3 id="add-file" tabindex="-1">Add File <a class="header-anchor" href="#add-file" aria-label="Permalink to “Add File”">​</a></h3><p>Adds new or changed files in your working directory to the Git staging area. If you have added a new file, Git starts tracking that file</p><ul><li><p>Staging area is like a rough draft space, where files are placed for the next <a href="#commit">commit</a></p></li><li><p>You can select all files, a directory, specific files, or even specific parts of a file for staging and committing</p></li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># add the entire directory recursively,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># including files whose names begin with a dot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> add</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -A</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># stage modified and deleted files only, not new files</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -u</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># interactively stage hunks of changes (patch)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -p</span></span></code></pre></div><p>Add empty directory, as Git ignores empty directories:</p><ul><li>Add a dot file inside the directory: <code>.gitkeep</code></li></ul><h4 id="interactive-staging" tabindex="-1">Interactive Staging <a class="header-anchor" href="#interactive-staging" aria-label="Permalink to “Interactive Staging”">​</a></h4><ul><li>Stage changes interactively</li><li>Allows staging portions of changed files</li><li>Helps to make smaller, focused commits</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --interactive</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -i</span></span></code></pre></div><p>Patch Mode:</p><ul><li>Allows staging portions of a changed file</li><li>&quot;Hunks&quot;: an area where two files differ</li><li>Hunks can be staged, skipped, or split into smaller hunks</li></ul><p>Split a Hunk (automatically):</p><ul><li>Hunks can contain multiple changes</li><li>Tell Git to try to split a hunk further</li><li>Requires one or more unchanged lines between changes</li></ul><p>Edit a Hunk (split manually):</p><ul><li>Hunk can be edited manually</li><li>Most useful when a hunk cannot be split automatically</li><li>Diff-style line prefixes: <code>+</code>, <code>-</code>, <code>#</code>, <code>space</code></li></ul><h3 id="commit" tabindex="-1">Commit <a class="header-anchor" href="#commit" aria-label="Permalink to “Commit”">​</a></h3><p>Create a commit, which is like a snapshot of your repository. These commits are snapshots of your entire repository at specific times</p><ul><li><p>Make new commits often, based around logical units of change</p></li><li><p>Over time, commits should tell a story of the history of your repository and how it came to be the way that it currently is</p></li><li><p>Commits include lots of metadata in addition to the contents and message, like the author, timestamp, and more</p></li><li><p>Each commit contains an unique hash number</p></li><li><p>To view the details of a commit including the metadata and the changes made in the commit use the <a href="#show">git show</a> command</p></li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># start commit process</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> commit</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># include commit message and body at the same time</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [commit </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">message]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [commit </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">message]</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [commit </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">body]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># interactively commit hunks of changes (patch)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -p</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># replace the most recent commit with a new commit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --amend</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># amend commit with new message</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># if no file changes are there this will just update the commit message</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --amend</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">NEW MESSAGE</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre></div><p>Git commit amend should be used only if:</p><ul><li>That commit hasn&#39;t been pushed to the remote yet</li><li>There is a spelling error in the commit message</li><li>It doesn&#39;t contain the changes that you&#39;d like to contain</li></ul><div class="danger custom-block"><p class="custom-block-title">NOTE</p><p>Amending commits is not advisable. It changes the commit-hash and hence changing the history</p></div><p>Fix-up commits:</p><ul><li>You have 3 commits and you raised a pull request from that branch</li><li>There was a comment to make some changes in a file, suppose this file changes were part of first commit, you can either make the changes and create a new commit or modify the first commit</li><li><code>commit --fixup</code> can help you with fix a particular commit</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --fixup=</span><span style="--shiki-light:#005CC5;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">commitSHA</span><span style="--shiki-light:#005CC5;--shiki-dark:#666666;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --autosquash</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [branch]</span></span></code></pre></div><p>Make Atomic commits:</p><ul><li>Small commits</li><li>Only affect a single aspect</li><li>Easier to understand, to work with, and to find bugs</li><li>Improves collaboration</li></ul><p>Commit best practice:</p><ul><li>Add the <em>right</em> changes</li><li>Compose a <em>good commit message</em>: <ul><li>Subject (50 chars): concise summary of what happened</li><li>Body (150 chars): mode detailed explanation: <ul><li>What is now different than before?</li><li>What&#39;s the reason for the change?</li><li>Is there anything to watch out for/anything particularly remarkable?</li></ul></li></ul></li></ul><p><em>Example:</em> <a href="https://github.com/angular/angular/blob/main/CONTRIBUTING.md#commit" target="_blank" rel="noreferrer">Angular commit convention</a></p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>&lt;type&gt;(&lt;scope&gt;): &lt;short summary&gt;</span></span>
<span class="line"><span>  │       │             │</span></span>
<span class="line"><span>  │       │             └─⫸ Summary in present tense. Not capitalized. No period at the end</span></span>
<span class="line"><span>  │       │</span></span>
<span class="line"><span>  │       └─⫸ Commit Scope: animations|bazel|benchpress|common|compiler|compiler-cli|core|</span></span>
<span class="line"><span>  │                          elements|forms|http|language-service|localize|platform-browser|</span></span>
<span class="line"><span>  │                          platform-browser-dynamic|platform-server|router|service-worker|</span></span>
<span class="line"><span>  │                          upgrade|zone.js|packaging|changelog|docs-infra|migrations|ngcc|ve|</span></span>
<span class="line"><span>  │                          devtools</span></span>
<span class="line"><span>  │</span></span>
<span class="line"><span>  └─⫸ Commit Type: build|ci|docs|feat|fix|perf|refactor|test</span></span></code></pre></div><p>Types:</p><ul><li><code>build</code>: Changes that affect the build system or external dependencies (example scopes: <code>gulp</code>, <code>broccoli</code>, <code>npm</code>)</li><li><code>ci</code>: Changes to our CI configuration files and scripts (examples: <code>CircleCi</code>, <code>SauceLabs</code>)</li><li><code>docs</code>: Documentation only changes</li><li><code>feat</code>: A new feature</li><li><code>fix</code>: A bug fix</li><li><code>perf</code>: A code change that improves performance</li><li><code>refactor</code>: A code change that neither fixes a bug nor adds a feature</li><li><code>test</code>: Adding missing tests or correcting existing tests</li></ul><h3 id="pull" tabindex="-1">Pull <a class="header-anchor" href="#pull" aria-label="Permalink to “Pull”">​</a></h3><p>It updates your current local working branch and all of the remote tracking branches</p><ul><li><code>git pull</code> is a combination of <code>git fetch</code> + <code>git merge</code>, updates some parts of your local repository with the changes from the remote repository</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># update local with commits from remote</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># (merge is used)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> pull</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># update from a specific remote branch</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> pull</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --force</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># fetch all remotes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> pull</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --all</span></span></code></pre></div><ul><li>Run <code>git pull</code> regularly</li></ul><p>Pull Rebase:</p><ul><li>Fetch from remote, then rebase instead of merging</li><li>Keeps history cleaner by reducing merge commits</li><li>Only use on local commits not shared to a remote</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># update but rewrite history so any local commits occur after all new commits</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> pull</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --rebase</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> pull</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --rebase=preserve</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> pull</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --rebase=interactive</span></span></code></pre></div><p>Pull Requests: Not core Git feature, but provided by Git hosting platforms</p><ul><li>communicating about and reviewing code</li><li>appeal request invites reviewers to provide feedback before merging</li><li>contributing code to other repositories, to which you don&#39;t have write access. Contributing to an open source repository</li><li><em>Fork</em> is your personal copy of a GIT repository</li></ul><p>Checking out pull requests locally:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># Provide pull request ID</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> fetch</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> pull/ID/head:NewLocalBranchName</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># Switch to the newly created branch</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [branch]</span></span></code></pre></div><p>Issues:</p><ul><li><code>error: some local refs could not be updated</code>, to resolve this first <a href="#prune-stale-branches">prune remote branches</a>, then pull</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> fetch.parallel=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> submodule.fetchJobs=</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> pull</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --progress</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">origin</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> +ref/heads/master</span></span></code></pre></div><h3 id="merge" tabindex="-1">Merge <a class="header-anchor" href="#merge" aria-label="Permalink to “Merge”">​</a></h3><p>Git Merge dose not provide a dry run option, so we can do this:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># pass --no-commit to stop auto commit</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># and also stopping fast-forward with --no-ff</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> merge</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --no-commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --no-ff</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> $BRANCH</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># to examine the staged changes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> diff</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --cached</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># and you can undo the merge, even if it is a fast-forward merge</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> merge</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --abort</span></span></code></pre></div><p>Merge Conflicts occur when contradictory changes happen:</p><ul><li><code>git merge</code></li><li><code>git rebase</code></li><li><code>git pull</code></li><li><code>git stash apply</code></li><li><code>git cherry-pick</code></li></ul><p>Git can remember the resolution for a given merge conflict if it was previously resolved</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># git REuse REcorded REsolution</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> rerere.enable</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># you can further ask it to automatically stage it for you with</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> rerere.autoUpdate</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span></span></code></pre></div><h3 id="push" tabindex="-1">Push <a class="header-anchor" href="#push" aria-label="Permalink to “Push”">​</a></h3><p>It uploads all local branch commits to the corresponding remote branch</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> push</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># pushing new branch, this creates an upstream tracking branch</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [branch]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># push all branches</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --all</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># safe force pushing</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --force-with-lease</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># alias it with</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> alias.fpush</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --force-with-lease</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># force push (only if you want to override)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -f</span></span></code></pre></div><p>Generally most of us don&#39;t love doing forced pushes, because there is always a chance that you&#39;re overwriting someone else&#39;s commits. Let&#39;s take a scenario:</p><ul><li><p>You commit and push something to GitHub</p></li><li><p>Someone else pulls it down, commits something and pushes it back up</p></li><li><p>You amend a commit, rewriting the history, and force push it, not knowing that anyone had based something off your work</p></li><li><p>This effectively removes what the other person had done</p></li><li><p>What you really want to do is check to see if anyone else had pushed and only force push if the answer is no. However, there is always a bit of a race condition here because even if you check first, in the second it takes you to then push, something else could have landed from elsewhere in the meantime</p></li></ul><p>So, Git has created a new force pushing option called <code>--force-with-lease</code> that will essentially check that what you last pushed is still what&#39;s on the server before it will force the new branch update</p><p>Reasons to force push:</p><ul><li>Local version is better than the remote version</li><li>Remote version went wrong and needs repair</li><li>Versions have diverged and merging is undesirable</li></ul><div class="danger custom-block"><p class="custom-block-title">NOTE</p><p>Use force push with extreme caution. Disruptive for others using the remote branch. Commits disappear. Subsequent local commits are orphaned for others</p></div><h3 id="rename-file" tabindex="-1">Rename File <a class="header-anchor" href="#rename-file" aria-label="Permalink to “Rename File”">​</a></h3><p>Change file name or file path and prepare it for commit</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> mv</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [original </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">filename]</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [new </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">filename]</span></span></code></pre></div><h3 id="delete-files" tabindex="-1">Delete Files <a class="header-anchor" href="#delete-files" aria-label="Permalink to “Delete Files”">​</a></h3><p>Delete the file from the <em>working area</em> or <em>staging area</em> and add the deletion to the <em>staging area</em></p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> rm</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename]</span></span></code></pre></div><p>Remove (untrack) a file from version control but preserve the file locally:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --cached</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename]</span></span></code></pre></div><h3 id="patch" tabindex="-1">Patch <a class="header-anchor" href="#patch" aria-label="Permalink to “Patch”">​</a></h3><p>Create Diff Patches:</p><ul><li>Share changes via files</li><li>Useful when changes are not ready for a public branch</li><li>Useful when collaborators do not share a remote</li><li>Discussion, review, approval process</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># direct output to a file</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> diff</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [from-commit] </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">to-commit</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">output-name</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">.diff</span></span></code></pre></div><p>Apply Diff Patches:</p><ul><li>Apply changes in a diff patch file to the working directory</li><li>Makes changes, but not commits</li><li>No commit history transferred</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> apply</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename].diff</span></span></code></pre></div><p>Create Formatted Patches:</p><ul><li>Export each commit in Unix mailbox format</li><li>Useful for email distribution of changes</li><li>Includes commit messages</li><li>One commit per file by default</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># export all commits in the range</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> format-patch</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [start-commitSHA]..</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">end-commitSHA</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># export all commits on current branch</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># which are not in master branch</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> format-patch</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> master</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># export a single commit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> format-patch</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -1</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [commitSHA]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># put patch files into a directory</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> format-patch</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> master</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -o</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [directory-name]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># output patches as a single file</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> format-patch</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> master</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --stdout</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename].patch</span></span></code></pre></div><p>Apply Formatted Patches:</p><ul><li>Extract author, commit message, and changes from a mailbox message and apply them to the current branch</li><li>Similar to cherry-picking: same changes, different SHAs</li><li><strong>Commit history is transferred</strong></li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># apply single patch</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [directory-name]/</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">patch-filename</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">.patch</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># apply all patches in a directory</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [directory-name]/</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">.patch</span></span></code></pre></div><h3 id="git-clean" tabindex="-1">Git Clean <a class="header-anchor" href="#git-clean" aria-label="Permalink to “Git Clean”">​</a></h3><p>Git clean undoes files from the repository. It <strong>primarily focuses on untracked files</strong></p><ul><li>Remove untracked files</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># do a dry run</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> clean</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -n</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># remove untracked files</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> clean</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -f</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># remove untracked directories</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> clean</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -fd</span></span></code></pre></div><h3 id="restore" tabindex="-1">Restore <a class="header-anchor" href="#restore" aria-label="Permalink to “Restore”">​</a></h3><p>Restore specified paths in the working tree with some contents from a restore source. If a path is tracked but does not exist in the restore source, it will be removed to match the source</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> restore</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># same as</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> restore</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --source</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> HEAD@{10.minutes.ago}</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> restore</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename]</span></span></code></pre></div><p>Restore a deleted file which was tracked by git</p><ul><li><p>Find the commit where the file was deleted:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> rev-list</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -n</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> HEAD</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename]</span></span></code></pre></div></li><li><p>Checkout to that commit to get the file back:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [commitSHA]^ -- </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">filename</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span></code></pre></div></li></ul><h3 id="ignoring-file" tabindex="-1">Ignoring File <a class="header-anchor" href="#ignoring-file" aria-label="Permalink to “Ignoring File”">​</a></h3><p>Untracked files or folders can be ignored so that Git dose not track them. For that create a file named <code>.gitignore</code> and add all the file or folder listing patterns</p><p>We can use:</p><ul><li><p>Pattern matching (basic regular expressions):</p><ul><li><code>*?[aeiou][0-9]</code></li><li><code>logs/*.txt</code></li></ul></li><li><p>Negative expressions:</p><ul><li><code>*.php</code></li><li><code>!index.php</code></li></ul></li><li><p>Add comments using <code>#</code></p></li><li><p>Blank lines are skipped</p></li></ul><p>Example:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># ignore all .a files</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">.a</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># but do track lib.a, even though you&#39;re ignoring .a files above</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">lib.a</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># only ignore the TODO file in the current directory, not sub-dir/TODO</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">/TODO</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># ignore all files in a directory named build</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># add a trailing slash</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">build/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># ignore doc/notes.txt, but not doc/server/arch.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">doc/*.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># ignore all .pdf files in the doc/ directory and any of its subdirectories</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">doc/**/*.pdf</span></span></code></pre></div><ul><li><p>Lists all ignored files in this project</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> ls-files</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --other</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --ignored</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --exclude-standard</span></span></code></pre></div></li></ul><p>Ideas on what to ignore:</p><ul><li>Compiled source code</li><li>Packages and compressed files</li><li>Logs and databases</li><li>OS generated files</li><li><a href="https://github.com/github/gitignore" target="_blank" rel="noreferrer">Useful .gitignore templates</a></li></ul><p>Globally ignore files:</p><ul><li>Ignore files in all repositories</li><li>Settings are not tracked in repo</li><li>User specific instead of repository specific</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> core.excludesfile</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> ~/.gitignore_global</span></span></code></pre></div><h3 id="log" tabindex="-1">Log <a class="header-anchor" href="#log" aria-label="Permalink to “Log”">​</a></h3><ul><li>Log is the primary interface to Git</li><li>Log has many options</li><li>Sorting, filtering, output formatting</li></ul><p>List version history for the current branch:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> log</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># useful for visualizing branches</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --graph</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --all</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --decorate</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --oneline</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># list commits as patches (diffs)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --patch</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># list edits to lines 100-150 in filename.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -L</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> 100,150:filename.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># Use heuristics to get log of a certain function, class, etc..</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -L</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> :funcName:filename.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># get logs contains an expression</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> some_word</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -p</span></span></code></pre></div><p>List version history for a file, including renames:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --follow</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename]</span></span></code></pre></div><ul><li>Speed up the process of log by:</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> commit-graph</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> write</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># run it as part of maintenance</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> fetch.writeCommitGraph</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span></span></code></pre></div><h3 id="branch" tabindex="-1">Branch <a class="header-anchor" href="#branch" aria-label="Permalink to “Branch”">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># create new branch</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [branch]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># list all branches</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -a</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># rename branch</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [name]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># delete a branch</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [branch]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -D</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [branch]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># delete branch from remote repo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [remote] </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">branch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">           # git v2.8.0+</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --delete</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [remote] </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">branch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">     # git v1.7.0+</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> :[remote_branch]</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">               # old way</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># see all the merged branches</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --merged</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># merge branch (from the branch to merge into)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> merge</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [other </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">branch]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># split into columns to make better use of the screen real estate</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --column</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># sort by objectsize, authordate, committerdate, creatordate, or taggerdate</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --sort</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> committerdate</span></span></code></pre></div><p>Git branch configurations:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># set column mode by default</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> column.ui</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> auto</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># sort branches by</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> branch.sort</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -committerdate</span></span></code></pre></div><ul><li>To delete a branch, current must be on a different branch</li><li>To delete a branch hows commits are not merged use <code>-D</code> flag</li></ul><p>Identify merge branches:</p><ul><li>List branches that have been merged into a branch</li><li>Useful for knowing what features have been incorporated</li><li>Useful for clean-up after merging many features</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># list branches merged into the current branch</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --merged</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># list branches not merged into the current branch</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># branches that have commits that are not merged</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># into current branch</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --no-merged</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># list remote branches merged into the current branch</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -r</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --merged</span></span></code></pre></div><p>Checkout <a href="#branching-strategies">Branching Strategies</a></p><h4 id="prune-stale-branches" tabindex="-1">Prune Stale Branches <a class="header-anchor" href="#prune-stale-branches" aria-label="Permalink to “Prune Stale Branches”">​</a></h4><ul><li>Delete all stale remote-tracking branches</li><li>Remote-tracking branches, not remote branches</li><li>Stale branch: a remote-tracking branch that no longer tracks anything because the actual branch in the remote repository has been deleted</li></ul><p>Remote branches:</p><ol><li>Branch on the remote repository (bugfix)</li><li>Local snapshot of the remote branch (origin/bugfix)</li><li>Local branch, tracking the remote branch (bugfix)</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># delete stale remote-tracking branches</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> prune</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> origin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> prune</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --dry-run</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># prune while fetching</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># prune, then fetch</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> fetch</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --prune</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># always prune before fetch</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># destructive</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> fetch.prune</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span></span></code></pre></div><h3 id="reset" tabindex="-1">Reset <a class="header-anchor" href="#reset" aria-label="Permalink to “Reset”">​</a></h3><p>Git reset as the name suggests resets things. Reset the working area to a specific commit</p><p>It can <strong>undo the changes that are already committed</strong></p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># reset local working directory to</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># remote branch head</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --hard</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> origin/master</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># un-stages the file, but preserve its contents</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># move file from staging area back to working directory</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> reset</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># or</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> reset</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> HEAD</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># discard changes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --hard</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># reset everything to the latest snapshot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --hard</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> HEAD</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># undoes all commits after [commit], preserving changes locally</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> reset</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [commit]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># discards all history and changes back to the specified commit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --hard</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [commit]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># interactively reset hunks of changes (patch)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -p</span></span></code></pre></div><p>Reset commit with the following options:</p><ul><li><p><code>--soft</code>: <strong>Moves the commit changes into staging area</strong> and does not affect the current working area</p></li><li><p><code>--hard</code>: <strong>Deletes all the commit changes. Be cautious with this flag</strong>. Might lose all changes from both staging and working area to match the commit</p></li><li><p><code>--mixed</code>: Default operation. Moves commit changes to the <em>working area</em></p></li></ul><p>Apply reset command on:</p><ul><li>Staged files</li><li>Commits</li></ul><h4 id="reset-last-rebase-or-merge" tabindex="-1">Reset last Rebase or Merge <a class="header-anchor" href="#reset-last-rebase-or-merge" aria-label="Permalink to “Reset last Rebase or Merge”">​</a></h4><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># undo, unless ORIG_HEAD has changed again</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># (rebase, reset, merge change ORIG_HEAD)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --hard</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> ORIG_HEAD</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>Use revert whenever possible</p></div><h3 id="revert" tabindex="-1">Revert <a class="header-anchor" href="#revert" aria-label="Permalink to “Revert”">​</a></h3><p>Undo changes made in a commit (revert a commit)</p><p>Git revert is similar to reset however, <strong><code>git revert</code> inverses the changes from that old commit and creates a new revert commit</strong></p><ul><li>A new commit is made which contains the changes needed to revert a commit</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> revert</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [commitSHA]</span></span></code></pre></div><h3 id="diff" tabindex="-1">Diff <a class="header-anchor" href="#diff" aria-label="Permalink to “Diff”">​</a></h3><p>Compares contents of the working directory with the staging area</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> diff</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># show words that changed</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> diff</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --color-words</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># get word diffs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> diff</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --word-diff</span></span></code></pre></div><p>Compare staging to the HEAD of the branch of the repository:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> diff</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --cached</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># or use its alias</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> diff</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --staged</span></span></code></pre></div><p>Compare changes of a file between current state and last commit:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> diff</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># using tags</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> diff</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [tag-name-1]...</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">tag-name-2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span></code></pre></div><p>Compare two branches:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> diff</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [first </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">branch]...[second</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> branch]</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TOOL</p><p>We can use a GUI tool or an external diff viewing program</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> difftool</span></span></code></pre></div><p>To get help and add your preferred tool:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> difftool</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --tool-help</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># ADD A TOOL</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> difftool</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --tool=</span><span style="--shiki-light:#005CC5;--shiki-dark:#666666;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">tool</span><span style="--shiki-light:#005CC5;--shiki-dark:#666666;">]</span></span></code></pre></div></div><h3 id="checkout" tabindex="-1">Checkout <a class="header-anchor" href="#checkout" aria-label="Permalink to “Checkout”">​</a></h3><p>Git checkout is <strong>used to switch</strong>. Switch between <em>branches</em>, <em>commits</em>, and <em>files</em> (it dose a lot, if you need is to switch branch use <a href="#switch"><code>switch</code></a>)</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># checkout branch</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> branch</span></span></code></pre></div><p>Go to a specific snapshot (commit)</p><ul><li>This command <strong>creates a detached head</strong>, meaning, this will <strong>give a temporary branch to work and debug</strong>. Line being on an unnamed branch</li><li><strong>Do not commit in this temporary branch</strong>. As new commits will not belong to any branch</li><li>Detached commits will be garbage collected (~2 weeks)</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [commitSHA]</span></span></code></pre></div><ul><li>To preserve commits made in detached head state:</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># tag the commit (HEAD detached)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> tag</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [tag </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">name]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># create a branch (HEAD detached)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># but the detached HEAD needs to be reattached</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># to this new branch</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [new_branch]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># better option is to create a branch and reattach HEAD</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -b</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [new_branch]</span></span></code></pre></div><p>Undo or revise old changes: You can pull a snapshot of a file from old commit and work on it with the intent to commit the new changes:</p><ul><li>Go back to the head:</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> master</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># discard changes of a file in working area</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># checkout older version of the file</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> HEAD@{10.minutes.ago}</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># interactive patch restore</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename]</span></span></code></pre></div><ul><li>The file will be put into staging area</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [commitSHA] -- </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">filename</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span></code></pre></div><p>You can apply checkout command on:</p><ul><li>Working file</li><li>Commit</li></ul><p>Git command commonalities: <img src="/assets/git_command_commonality.CcAWDlyR.png" alt="Git command commonalities"></p><h3 id="switch" tabindex="-1">Switch <a class="header-anchor" href="#switch" aria-label="Permalink to “Switch”">​</a></h3><p>Switch to a specified branch. The working tree and the index are updated to match the branch. All new commits will be added to the tip of this branch</p><ul><li>Alternate commands to checkout</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> switch</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> branch</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># same as</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> branch</span></span></code></pre></div><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> switch</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -c</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [new_branch]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># same as</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -b</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [new_branch]</span></span></code></pre></div><h3 id="fetch-file" tabindex="-1">Fetch File <a class="header-anchor" href="#fetch-file" aria-label="Permalink to “Fetch File”">​</a></h3><p>Fetch all:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># fetch commits and tags</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> fetch</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># fetch only tags (with necessary commits)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> fetch</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --tags</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># fetch all</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> fetch</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --progress</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --all</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># prune, then fetch</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> fetch</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --prune</span></span></code></pre></div><h3 id="rebase-commits" tabindex="-1">Rebase Commits <a class="header-anchor" href="#rebase-commits" aria-label="Permalink to “Rebase Commits”">​</a></h3><ul><li>Take commits from a branch and replay them at the end of another branch</li><li>Useful to integrate recent commits without merging</li><li>Maintains a cleaner, more linear project history</li><li>Ensures topic branch commits apply cleanly</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># rebase current branch to tip of master</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> rebase</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> master</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># rebase new_feature to tip of master</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> rebase</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> master</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> new_feature</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># return commit where topic branch diverges</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> merge-base</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> master</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> new_feature</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># interactive rebase</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -i</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># rebasing stacks</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --update-refs</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># make this option set globally</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> rebase.updateRefs</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span></span></code></pre></div><p>The Golden Rule of Rebasing:</p><ul><li><strong>Thou shalt not rebase a public branch</strong></li><li>Rebase abandons existing, shared commits and creates new, similar commits instead</li><li>Collaborators would see the project history vanish</li><li>Getting all collaborators back in sync can be a nightmare</li></ul><h4 id="merging-vs-rebasing" tabindex="-1">Merging vs. Rebasing <a class="header-anchor" href="#merging-vs-rebasing" aria-label="Permalink to “Merging vs. Rebasing”">​</a></h4><ul><li>2 ways to incorporate changes from one branch into another branch</li><li>Similar ends, but the means are different</li></ul><table tabindex="0"><thead><tr><th>Merging</th><th>Rebasing</th></tr></thead><tbody><tr><td>Adds a merge commit</td><td>No additional merge commit</td></tr><tr><td>Non-destructive</td><td>Destructive: SHA changes, commits are rewritten</td></tr><tr><td>Complete record of what happened and when</td><td>No longer a complete record of what happened and when</td></tr><tr><td>Easy to undo</td><td>Tricky to undo</td></tr><tr><td>Logs can become cluttered, non-linear</td><td>Logs are cleaner, more linear</td></tr></tbody></table><p>How to choose?</p><ul><li><strong>Merge</strong> to allow commits to stand out or to be clearly grouped</li><li><strong>Merge</strong> to bring large topic branches back into master</li><li><strong>Merge anytime the topic branch is already public</strong> and being used by others (The Golden Rule of Rebasing)</li><li><strong>Rebase</strong> to add minor commits in master to a topic branch</li><li><strong>Rebase</strong> to move commits from one branch to another</li></ul><h4 id="handle-rebase-conflicts" tabindex="-1">Handle Rebase Conflicts <a class="header-anchor" href="#handle-rebase-conflicts" aria-label="Permalink to “Handle Rebase Conflicts”">​</a></h4><ul><li>Rebasing creates new commits on existing code</li><li>May conflict with existing code</li><li>Git pauses rebase before each conflicting commit</li><li>Similar to resolving merge conflicts</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># after resolving the conflict use</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># --continue to commit and proceed to next commit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --continue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># skipping a commit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --skip</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># abort rebase</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --abort</span></span></code></pre></div><h4 id="rebase-onto-other-branches" tabindex="-1">Rebase onto other branches <a class="header-anchor" href="#rebase-onto-other-branches" aria-label="Permalink to “Rebase onto other branches”">​</a></h4><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --onto</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [new-base] </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">upstream-branch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">branch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span></code></pre></div><h4 id="undo-rebase" tabindex="-1">Undo Rebase <a class="header-anchor" href="#undo-rebase" aria-label="Permalink to “Undo Rebase”">​</a></h4><ul><li>Can undo simple rebases</li><li>Rebase is destructive</li><li>Undoing complex rebases may lose data</li><li>Use <a href="#reset-last-rebase-or-merge">git reset</a></li></ul><p>Or rebase back to former merge-base SHA:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># undo by rebasing to former merge-base SHA</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --onto</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [merge-base-SHA] </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">merge-base</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">branch</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span></code></pre></div><h4 id="interactive-rebasing" tabindex="-1">Interactive Rebasing <a class="header-anchor" href="#interactive-rebasing" aria-label="Permalink to “Interactive Rebasing”">​</a></h4><ul><li>Chance to modify commit as they are being replayed</li><li>Opens the <code>git-rebase-todo</code> file for editing</li><li>Can reorder or skip commits</li><li>Can edit commit contents</li></ul><p>Options:</p><ul><li><code>pick</code>, <code>drop</code></li><li><code>reword</code>, <code>edit</code></li><li><code>squash</code>, <code>fixup</code></li><li><code>exec</code></li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># interactive rebase</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> master</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> new_feature</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># rebase last 3 commits onto the same branch</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># but with the opportunity to modify them</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> rebase</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> HEAD~3</span></span></code></pre></div><p>Squash Commits:</p><ul><li>Fold two or more commits into one</li><li><code>squash</code>: combine change sets, concatenate messages</li><li><code>fixup</code>: combine change sets, discard this message</li><li>Uses first author in the commit series</li></ul><h3 id="cherry-pick" tabindex="-1">Cherry-Pick <a class="header-anchor" href="#cherry-pick" aria-label="Permalink to “Cherry-Pick”">​</a></h3><p>The cherry-pick command takes changes from a specified commit and places them on the HEAD of the currently checked-out branch</p><ul><li>Apply the changes from one or more existing commits</li><li>Can be used to apply commit from one branch to another</li><li>Each existing commit is recorded as a new commit on the current branch</li><li>Conceptually similar to copy-paste</li><li>New commits have different SHAs</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> cherry-pick</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [commitSHA]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># cherry-pick multiple commits</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> cherry-pick</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [commitSHA1] </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">commitSHA2</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># cherry-pick range of commits</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> cherry-pick</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [commitSHA-of-3]..</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">commitSHA-of-5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># edit the commit message</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> cherry-pick</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [commitSHA] --edit</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># cherry-pick without committing</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> cherry-pick</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [commitSHA] --no-commit</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># add the changes to the staging area and continue with the cherry-pick</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> cherry-pick</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --continue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># abort the cherry-pick</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> cherry-pick</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --abort</span></span></code></pre></div><ul><li><p>Cannot cherry pick a <em>merge commit</em> as merge commits have two parents</p></li><li><p>Use <code>-m</code> flag to specify the parent if cherry-picking merge commit</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> cherry-pick</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [commitSHA] -m </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">parent-number</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span></code></pre></div></li><li><p>Can result in conflicts which must be resolved (same as merge conflicts)</p></li></ul><h3 id="stash" tabindex="-1">Stash <a class="header-anchor" href="#stash" aria-label="Permalink to “Stash”">​</a></h3><p>Git stash temporarily saves the changes made in working directory and work on some other changes</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># save current changes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> stash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># save with a message</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> stash</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> save</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [message]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># retrieve the saved changes (it will not remove the stash from the list)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> stash</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> apply</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [stash@{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">id}]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># get the list of all stashes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> stash</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> list</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># get the latest stash and apply it in the working area</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> stash</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> pop</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [stash@{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">id}]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># delete a stash</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> stash</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> drop</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [stash@{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">id}]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># interactively stash hunks of changes (patch)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> stash</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -p</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>Git stash is branch agnostic. All branches use the same stash list. This is helpful when moving the changes from one branch to another branch</p></div><div class="warning custom-block"><p class="custom-block-title">UNTRACKED FILES</p><p>By default, Git will not stash changes made to untracked or ignored files</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># TO STASH UNTRACKED FILES</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> stash</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> or</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --include-untracked</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename]</span></span></code></pre></div></div><h3 id="show" tabindex="-1">Show <a class="header-anchor" href="#show" aria-label="Permalink to “Show”">​</a></h3><p>Outputs metadata and content changes of the specified commit</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> show</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [commitSHA]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># using tags</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> show</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [tag-name]</span></span></code></pre></div><p>Allows us to see git objects details:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> show</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [object-sha]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> show</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --pretty=raw</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [object-sha]</span></span></code></pre></div><h3 id="ls-tree" tabindex="-1">ls-tree <a class="header-anchor" href="#ls-tree" aria-label="Permalink to “ls-tree”">​</a></h3><p>Show the object details:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> ls-tree</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [object-tree-sha]</span></span></code></pre></div><p>Output:</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>FILE PERMISSIONS / TYPE OF FILE / objectSHA / FILE NAME</span></span>
<span class="line"><span>100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391    README.md</span></span></code></pre></div><h3 id="reflog" tabindex="-1">Reflog <a class="header-anchor" href="#reflog" aria-label="Permalink to “Reflog”">​</a></h3><ul><li><p>Git reflog has the superpower to <strong>track the head</strong></p></li><li><p>The difference between log and reflog is that:</p><ul><li><code>git log</code> will track every commit that you make and record it as a snapshot at a particular time, whereas <code>git reflog</code> will keep track of commits that are made as well as the commits that are discarded</li></ul></li><li><p>This is provided in a rolling buffer for 30 days</p></li><li><p>The <code>git reflog</code> command will list down the logs whenever the HEAD changes like the branch was created, cloned, checked-out, renamed, or any commits made on the branch</p></li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> reflog</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> for-each-ref</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --sort=-committerdate</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --format=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">%(color:blue)%(authordate:relative) %(color:red)%(authorname) %(color:white)%(color:bold)%(refname:short)</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> refs/remotes</span></span></code></pre></div><h3 id="blame" tabindex="-1">Blame <a class="header-anchor" href="#blame" aria-label="Permalink to “Blame”">​</a></h3><p>Shows what revision and author last modified each line of a file</p><ul><li>Browse annotated file</li><li>Determine who changed which lines in a file and why</li><li>Useful for probing the history behind a file&#39;s contents</li><li>Useful for identifying which commits introduced a bug</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># annotate file with commit details</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> blame</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># ignore white space</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> blame</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -w</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># annotate lines 100-105</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> blame</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -L</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> 100,105</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> blame</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -L</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> 100,+5</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># detect lines moved or copied in the same commit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> blame</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -C</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># or the commit that created the file</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> blame</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -C</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -C</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># or any commit at all</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> blame</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -C</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -C</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -C</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># annotate file at revision commitSHA</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> blame</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [commitSHA] </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">filename</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> blame</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [commitSHA] -- </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">filename</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># similar to blame, different output format</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> annotate</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [filename]</span></span></code></pre></div><p>Options:</p><ul><li><code>-s</code>: to suppress the author&#39;s name and time stamp from the output</li><li><code>-e</code>: to show the author&#39;s email instead of the author&#39;s name</li><li><code>-f</code>: to show the filename in the original commit</li><li><code>-n</code>: to show the line number in the original commit</li></ul><h3 id="bisect" tabindex="-1">Bisect <a class="header-anchor" href="#bisect" aria-label="Permalink to “Bisect”">​</a></h3><p>Use binary search to find the commit that introduced a bug</p><ul><li>Find the commit that introduced a bug or regression</li><li>Mark last good revision and first bad revision</li><li>Resets code to mid-point</li><li>Mark as good or bad revision</li><li>Repeat</li></ul><p>Git bisect will:</p><ol><li>Perform a binary search in the commits</li><li>Allow us to check it manually</li><li>Allow us to declare its status as good or bad</li></ol><p>Steps: <code>start</code>, <code>bad</code>, <code>good</code></p><ol><li><p>Start bisecting:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># start bisect session</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> bisect</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> start</span></span></code></pre></div></li><li><p>Mark the current commit as bad:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> bisect</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> bad</span></span></code></pre></div></li><li><p>Provide a commit/branch/tag to start from:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> bisect</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> good</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [treeish]</span></span></code></pre></div></li><li><p>Now add the current commit as bad, Git will go through all the commits between the start commit and the current bad commit</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> bisect</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> bad</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">or</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> bisect</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> bad</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [treeish]</span></span></code></pre></div></li></ol><p>From now check the application and verify if the application has the bug or not, if the commit dose not have bug then mark it as good and if you find the commit that has the bug then mark it as bad. Repeat this process till the tool narrows down to the commit that introduced the bug</p><ul><li><code>git bisect log</code>: To find the flow of Git Bisect, that is, to see what has been done so far</li><li><code>git bisect reset</code>: To reset if something went wrong</li></ul><h3 id="prune" tabindex="-1">Prune <a class="header-anchor" href="#prune" aria-label="Permalink to “Prune”">​</a></h3><p>Prune all unreachable objects</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># do not need to use!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> prune</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># part of garbage collection</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> gc</span></span></code></pre></div><h2 id="branching-strategies" tabindex="-1">Branching Strategies <a class="header-anchor" href="#branching-strategies" aria-label="Permalink to “Branching Strategies”">​</a></h2><p>Agree on a Branching Workflow in your team:</p><ul><li><p>GIT allows you to create branches but it doesn&#39;t tell you how to use them</p></li><li><p>you need a written best practice of how work is ideally structure in your team - to avoid mistakes and collisions</p></li><li><p>it is highly depends on your team / team size on your project and how you handle releases -it helps to onboard new team members (&quot;this is how we work here&quot;)</p></li></ul><p>Integrating changes and structuring releases:</p><ol><li><p>mainline development (&quot;Always Be Integrating&quot;):</p><ul><li>few branches</li><li>relatively small commits</li><li>high quality testing and QA standards</li></ul></li><li><p>Stale, release and feature branches:</p><ul><li>different types of branches</li><li>fulfil different types of jobs</li></ul></li></ol><p><strong>GIT Flow vs Trunk based dev</strong>:</p><ol><li><p>GitHub Flow: very simple, very lean:</p><ul><li>only one long-running branch (<em>&quot;main&quot;</em>) + feature branches</li></ul></li><li><p>GitFlow: more structure, more rules,</p><ul><li>long-running branches: <em>&quot;main&quot;</em>, <em>&quot;development&quot;</em></li><li>short-lived branches: <em>&quot;features&quot;</em>, <em>&quot;releases&quot;</em>, <em>&quot;hotfixes&quot;</em></li></ul><table tabindex="0"><thead><tr><th>Branch Name</th><th>Create from</th><th>Merge back into</th></tr></thead><tbody><tr><td>develop</td><td>master</td><td>-</td></tr><tr><td>feature</td><td>develop</td><td>develop</td></tr><tr><td>release</td><td>develop</td><td>master and develop</td></tr><tr><td>hotfix</td><td>master or develop</td><td>master and develop</td></tr></tbody></table><p><img src="/assets/gitflow.DV9A0jOY.jpg" alt="GitFlow"></p></li></ol><h2 id="tagging" tabindex="-1">Tagging <a class="header-anchor" href="#tagging" aria-label="Permalink to “Tagging”">​</a></h2><ul><li><p>Tag allows you to capture a reference point in your project history, such as release versions</p></li><li><p>Tags allow making points in history as important</p></li><li><p>A <strong>named reference</strong> to a commit</p></li><li><p>An <strong>annotated tag</strong> (most common) contains additional information such as name, message, and email of the person who created the tag</p></li><li><p>A <strong>lightweight tag</strong> points to just a commit hash</p></li><li><p>Create a tag (lightweight):</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># add lightweight tag</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> tag</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [tag </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">name]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># create a tag for older commit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> tag</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [tag </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">name]</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [commitSHA]</span></span></code></pre></div></li><li><p>Annotated tags:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> tag</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -a</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [tag </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">name]</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [message] </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">commitSHA</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span></code></pre></div></li><li><p>List tags:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># list tags</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> tag</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> tag</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --list</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> tag</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -l</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># list tags with annotations</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> tag</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -l</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -n</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> tag</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -l</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -n</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [number </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">of</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> lines</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> annotation]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># filter tags</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># list tags beginning with &quot;v2&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> tag</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">v2*</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre></div></li><li><p>Push tags to remote repository:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [tag </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">name]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># push all tags</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --tags</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --tags</span></span></code></pre></div></li><li><p><code>git fetch</code> automatically retrieves shared tags</p></li><li><p>To delete the tag:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> tag</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> or</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --delete</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [tag </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">name]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># delete remote tags like remote branches</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> :[tag</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> name]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --delete</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [tag </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">name]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [tag </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">name]</span></span></code></pre></div></li></ul><h3 id="checking-out-tags" tabindex="-1">Checking Out Tags <a class="header-anchor" href="#checking-out-tags" aria-label="Permalink to “Checking Out Tags”">​</a></h3><ul><li>Tags are not branches</li><li>Tags can be checked out, just like any commit</li><li><code>git checkout -b [new_branch] [tag name]</code></li><li><code>git checkout [tag name]</code>: same as checking a commit</li></ul><h2 id="git-submodule" tabindex="-1">Git Submodule <a class="header-anchor" href="#git-submodule" aria-label="Permalink to “Git Submodule”">​</a></h2><p>It often happens that while working on one project, you need to use another project from within it. Git addresses this issue using submodules</p><p>Submodules allow you to keep a Git repository as a subdirectory of another Git repository. This lets you clone another repository into your project and keep your commits separate</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> submodule</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> [url </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">of</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> repo]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># view status (working, staging, or indexed files) of all the submodules</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> submodule</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> status</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># updates submodules after switching branches</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> submodule</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> update</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># after cloning a new repo, if you need to add submodules to it from .gitmodules file, use this command</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> submodule</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> update</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --init</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># if the submodules inside a newly cloned repo are nested, then use this</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> submodule</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> update</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --init</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --recursive</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># pulls all changes in the submodules</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> submodule</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> update</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --remote</span></span></code></pre></div><p>A <code>.gitmodules</code> file is created when we add a submodule to the project. This is a configuration file that stores the mapping between the project&#39;s URL and the local subdirectory you&#39;ve pulled it into:</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span>[submodule &quot;DbConnector&quot;]</span></span>
<span class="line"><span>    path = DbConnector</span></span>
<span class="line"><span>    url = https://github.com/chaconinc/DbConnector</span></span></code></pre></div><h2 id="git-hooks" tabindex="-1">Git Hooks <a class="header-anchor" href="#git-hooks" aria-label="Permalink to “Git Hooks”">​</a></h2><p><a href="https://git-scm.com/docs/githooks" target="_blank" rel="noreferrer">Git Hooks</a> are shell scripts that get triggered when we perform a specific action in Git</p><ul><li>Git hooks reside in the <code>[project-dir]/.git/hooks/</code> directory</li><li>There are around 28 hooks</li></ul><p><img src="/assets/git-hooks.BYzf7BaE.jpg" alt="Git hooks"></p><p>Based on the git operation, any one of the following <code>git hooks</code> will be triggered</p><ol><li><p><strong>Client-side</strong>:</p><ul><li><p>Committing workflow hooks:</p><ul><li><code>pre-commit</code></li><li><code>prepare-commit-msg</code></li><li><code>commit-msg</code></li><li><code>post-commit</code></li></ul></li><li><p>Rewriting:</p><ul><li><code>pre-rebase</code></li><li><code>post-rewrite</code></li></ul></li><li><p>Merging:</p><ul><li><code>post-merge</code></li><li><code>pre-merge-commit</code></li></ul></li><li><p>Switching/Pushing:</p><ul><li><code>post-checkout</code></li><li><code>reference-transaction</code></li><li><code>pre-push</code></li></ul></li><li><p>Email workflow hooks:</p><ul><li><code>applypatch-msg</code></li><li><code>pre-applypatch</code></li><li><code>post-applypatch</code></li></ul></li></ul></li><li><p><strong>Server-side</strong>:</p><ul><li><code>update</code></li><li><code>pre-receive</code></li><li><code>post-receive</code></li></ul></li></ol><ul><li>Hooks are simple text files</li><li>Hooks can be written in any <em>scripting language</em> like python, Ruby, and so on</li><li>The script <strong>filename should match the hooks&#39; name</strong>. For <code>post-commit</code> hook the script filename should be <code>post-commit</code></li></ul><p>List of other hooks:</p><ul><li><code>proc-receive</code></li><li><code>post-update</code></li><li><code>push-to-checkout</code></li><li><code>pre-auto-gc</code></li><li><code>sendemail-validate</code></li><li><code>fsmonitor-watchman</code></li><li><code>p4-changelist</code></li><li><code>p4-prepare-changelist</code></li><li><code>p4-post-chanagelist</code></li><li><code>p4-pre-submit</code></li><li><code>post-index-change</code></li></ul><h2 id="git-maintenance" tabindex="-1">Git Maintenance <a class="header-anchor" href="#git-maintenance" aria-label="Permalink to “Git Maintenance”">​</a></h2><p>It essentially provides a way to add cron-jobs that run daily, hourly and weekly maintenance tasks on your Git repositories</p><p>You can turn it on for your Git repository by simply running:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> maintenance</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> start</span></span></code></pre></div><p>This will modify your <code>.git/config</code> file to add a <code>maintenance.strategy</code> value set to <code>incremental</code> which is a shorthand for the following values:</p><ul><li><code>gc</code>: disabled</li><li><code>commit-graph</code>: hourly</li><li><code>prefetch</code>: hourly</li><li><code>loose-objects</code>: daily</li><li><code>incremental-repack</code>: daily</li></ul><p>This means that every hour it will rebuild your commit graph and do a prefetch, and once per day it will clean up loose objects and put them in pack-files and also repack the object directory using the multi-pack-index feature (read more about that in an incredible blog post from GitHub&#39;s Taylor Blau <a href="https://github.blog/2021-04-29-scaling-monorepo-maintenance/?ref=blog.gitbutler.com#multi-pack-indexes" target="_blank" rel="noreferrer">here</a>)</p><ul><li>This makes things like <code>git log --graph</code> or <code>git branch --contains</code> much, much faster</li></ul><p>File system monitor:</p><ul><li>it could detect when virtual file contents were being requested and fetch them from a central server if needed</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> core.untrackedcache</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> core.fsmonitor</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span></span></code></pre></div><h2 id="signing" tabindex="-1">Signing <a class="header-anchor" href="#signing" aria-label="Permalink to “Signing”">​</a></h2><p>Signing commits with SSH</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># use SSH for signing</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> gpg.format</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> ssh</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># path to your public keys</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> user.signingKey</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> ~/.ssh/id_rsa.pub</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># try to sign commit with your keys</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -S</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># sign the ref update on the server and</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">#have the server save a transparency log with verifiable signatures somewhere</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --signed</span></span></code></pre></div><h2 id="other-git-commands" tabindex="-1">Other Git Commands <a class="header-anchor" href="#other-git-commands" aria-label="Permalink to “Other Git Commands”">​</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># show results in columns</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">seq</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 24</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> column</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --mode=column</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --paddin=5</span></span></code></pre></div><h2 id="worktrees" tabindex="-1">Worktrees <a class="header-anchor" href="#worktrees" aria-label="Permalink to “Worktrees”">​</a></h2><p>Working on more than one branch at a time</p><ul><li>Provide a new working directory for each branch</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> worktree</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> bugfix</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> ../project-branches/bugfix</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> ../project-branches/bugfix</span></span></code></pre></div><h2 id="scalar" tabindex="-1">Scalar <a class="header-anchor" href="#scalar" aria-label="Permalink to “Scalar”">​</a></h2><p>Git now (since Oct 2022, Git 2.38) ships with an <em>alternative</em> command line invocation that wraps some of this stuff. Useful for huge projects</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">scalar</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># usage: scalar [-C &lt;directory&gt;] [-c &lt;key&gt;=&lt;value&gt;] &lt;command&gt; [&lt;options&gt;]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">#</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># Commands:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">#         clone</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">#         list</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">#         register</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">#         unregister</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">#         run</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">#         reconfigure</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">#         delete</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">#         help</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">#         version</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">#         diagnose</span></span></code></pre></div><ul><li><p>Scalar is mostly just used to clone with the correct defaults and config settings (blobless clone, no checkout by default, setting up maintenance properly, etc)</p></li><li><p>If you are managing large repositories, cloning with this negates the need to run <code>git maintenance start</code> and send the <code>--no-checkout</code> command and remember <code>--filter=tree:0</code> and whatnot</p></li></ul><p>Running <code>scalar clone [repo https url/ssh link]</code> will do the following:</p><ul><li>prefetching</li><li>commit-graph</li><li>filesystem monitor</li><li>partial cloning</li><li>sparse checkout</li></ul><h2 id="git-large-file-storage" tabindex="-1">Git Large File Storage <a class="header-anchor" href="#git-large-file-storage" aria-label="Permalink to “Git Large File Storage”">​</a></h2><p>An open source Git extension for versioning large files</p><p>Git Large File Storage (LFS) replaces large files such as audio samples, videos, datasets, and graphics with text pointers inside Git, while storing the file contents on a remote server like GitHub.com or GitHub Enterprise</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># install LFS</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> lfs</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># select the file types you&#39;d like Git LFS to manage</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> lfs</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> track</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">*.psd</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># make sure .gitattributes is tracked</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> .gitattributes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># now proceed with commit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> file.psd</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Add design file</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> master</span></span></code></pre></div><h2 id="smudge-and-clean" tabindex="-1">Smudge and Clean <a class="header-anchor" href="#smudge-and-clean" aria-label="Permalink to “Smudge and Clean”">​</a></h2><p>Git RCS keywords: <code>$Date$</code></p><h2 id="github-folder" tabindex="-1">Github Folder <a class="header-anchor" href="#github-folder" aria-label="Permalink to “Github Folder”">​</a></h2><p>The below mentioned files can be created in the <code>.github</code> folder:</p><ul><li><p><code>CODE_OF_CONDUCT.md</code>: Defines standards for how to engage in a community</p></li><li><p><code>CONTRIBUTING.md</code>: Communicates how people should contribute to your project. (making pull request, setting development environment...)</p></li><li><p><code>FUNDING.yml</code>: Displays a sponsor button in your repository to increase the visibility of funding options for your open source project</p></li><li><p><code>ISSUE_TEMPLATE</code>: Folder that contains a templates of possible issues user can use to open issue (such as if issue is related to documentation, if it&#39;s a bug, if user wants new feature etc)</p><ul><li><code>config.yml</code>: Customize the issue template chooser that people see when creating a new issue in your repository by adding a <code>config.yml</code> file to the .<code>github/ISSUE_TEMPLATE</code> folder</li></ul></li><li><p><code>PULL_REQUEST_TEMPLATE.md</code>: How to make a pull request to project</p></li><li><p><code>stale.yml</code>: Probot configuration to close stale issues. There are many other apps on Github Marketplace that place their configurations inside .github folder because they are related to GitHub specifically</p></li><li><p><code>SECURITY.md</code>: Gives instructions for how to report a security vulnerability in your project</p></li><li><p><code>SUPPORT.md</code>: Lets people know about ways to get help with your project. For more information</p></li><li><p><code>workflows</code>: Configuration folder containing yaml files for GitHub Actions</p></li><li><p><code>CODEOWNERS</code>: Pull request reviewer rules. More info here</p></li><li><p><code>dependabot.yml</code>: Configuration options for dependency updates. More info here</p></li></ul><h2 id="references-and-guides" tabindex="-1">References and Guides <a class="header-anchor" href="#references-and-guides" aria-label="Permalink to “References and Guides”">​</a></h2><ul><li><a href="https://git-scm.com/book/en/v2" target="_blank" rel="noreferrer">git book</a></li><li><a href="https://github.com/git-guides/" target="_blank" rel="noreferrer">GitHub: git-guides</a></li><li><a href="https://www.atlassian.com/git/tutorials/learn-git-with-bitbucket-cloud" target="_blank" rel="noreferrer">Bitbucket: learn git</a></li><li><a href="https://git-school.github.io/visualizing-git" target="_blank" rel="noreferrer">Practice Git online</a></li></ul>`,393)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
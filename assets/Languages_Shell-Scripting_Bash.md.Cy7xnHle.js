import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"Shell Scripting","description":"Working with Unix Shells like GNU Bash.","frontmatter":{"title":"Shell Scripting","description":"Working with Unix Shells like GNU Bash."},"headers":[],"relativePath":"Languages/Shell-Scripting/Bash.md","filePath":"Languages/Shell-Scripting/Bash.md","lastUpdated":1756574703000}`);var a={name:`Languages/Shell-Scripting/Bash.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="shell-scripts" tabindex="-1">Shell Scripts <a class="header-anchor" href="#shell-scripts" aria-label="Permalink to “Shell Scripts”">​</a></h1><p>Scripts contain a series of commands. An interpreter executes these commands</p><ul><li>Anything you can type at the command line, you can put in a script</li></ul><h2 id="shell" tabindex="-1">Shell <a class="header-anchor" href="#shell" aria-label="Permalink to “Shell”">​</a></h2><p>A shell is a command-line interpreter that provides a user interface for access to an operating system&#39;s services (like file management, process management, etc.)</p><ul><li>A shell is a program that takes commands from the keyboard and gives them to the operating system to perform (it is a command language interpreter)</li></ul><h2 id="bash" tabindex="-1">Bash <a class="header-anchor" href="#bash" aria-label="Permalink to “Bash”">​</a></h2><p>GNU Bash is a Unix shell</p><ul><li>&quot;Bourne-Again SHell&quot;, a pun on Stephen Bourne (author of the direct ancestor of the current Unix shell <code>sh</code>)</li><li>Bash is the default shell on most Linux distributions</li><li>Bash is an sh-compatible shell that incorporates useful features from the Korn shell (<code>ksh</code>) and C shell (<code>csh</code>)</li><li>Bash is a command processor. Bash can read and execute commands from a file, called a shell script</li><li>It is POSIX-compliant, specifically the POSIX 1003.1 standard</li></ul><h3 id="posix" tabindex="-1">POSIX <a class="header-anchor" href="#posix" aria-label="Permalink to “POSIX”">​</a></h3><p>Portable Operating System Interface (POSIX) is a family of standards specified by the IEEE for maintaining compatibility between operating systems</p><ul><li>POSIX defines the application programming interface (API), along with command line shells and utility interfaces, for software compatibility with variants of Unix and other operating systems</li></ul><h2 id="first-shell-script" tabindex="-1">First Shell Script <a class="header-anchor" href="#first-shell-script" aria-label="Permalink to “First Shell Script”">​</a></h2><p>Let&#39;s create a simple script, that prints <code>Hello World</code> to the terminal</p><ol><li><p>Create a <code>script.sh</code> file with the below content:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello World</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre></div></li><li><p>Make the script executable:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> script.sh</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># or</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">chmod</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 755</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> script.sh</span></span></code></pre></div></li><li><p>To execute this script, just enter the file name in the command line</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">./script.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">\`</span></span></code></pre></div></li><li><p>Output:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> World</span></span></code></pre></div></li></ol><p>If you want to run the script from any path, you can add the path to the script to the <code>PATH</code> environment variable</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">$PATH</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">:/</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">script</span></span></code></pre></div><h3 id="location-for-scripts" tabindex="-1">Location for Scripts <a class="header-anchor" href="#location-for-scripts" aria-label="Permalink to “Location for Scripts”">​</a></h3><ul><li><code>/usr/local/bin</code>: For scripts that are available system-wide (all users)</li><li><code>/usr/local/sbin</code>: For scripts that are available system-wide (all users) but are for system administration</li></ul><h2 id="use-of-shebang" tabindex="-1">Use of Shebang <a class="header-anchor" href="#use-of-shebang" aria-label="Permalink to “Use of Shebang”">​</a></h2><p>It is used to specify the shell program that needs to be used to execute the script file</p><p>When the interpreter executes the script. The first line, i.e. shebang is used as an argument for the path of the shell program. This can be observed below:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># run the script in background</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">./script.sh</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &amp;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># check the process</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">ps</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -ef</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> process_id</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># check commands executed by script.sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">pstree</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> process_id</span></span></code></pre></div><p>Different Bash shebang:</p><ul><li><p><code>#!/usr/bin/env bash</code>: Flexibility on different systems (protability)</p><ul><li>Different <code>*nixes</code> put <code>bash</code> in different places</li></ul></li><li><p><code>#!/usr/bin/bash</code>: Explicit control on a given system of what executable is called</p></li></ul><p>Why Shebang is needed?</p><ul><li>If no shebang is specified, then your default shell will be used</li><li>Different shells have slightly varying syntax and this may cause errors</li></ul><div class="tip custom-block"><p class="custom-block-title">Other Interpreters</p><p>Use python interpreter path as shebang if executing python script or any other interpreter path for that matter</p></div><h2 id="syntax" tabindex="-1">Syntax <a class="header-anchor" href="#syntax" aria-label="Permalink to “Syntax”">​</a></h2><ul><li><strong>Case Sensitive</strong>: <code>Hello</code> and <code>hello</code> are different</li><li><strong>Whitespace</strong>: Spaces are important in bash</li><li><strong>End of Line</strong>: Each command must be on a separate line</li><li><strong>Semicolon</strong>: Used to separate multiple commands on a single line</li></ul><h3 id="reserved-words" tabindex="-1">Reserved Words <a class="header-anchor" href="#reserved-words" aria-label="Permalink to “Reserved Words”">​</a></h3><p>These are words that have special meaning in bash</p><p><code>if</code>, <code>then</code>, <code>elif</code>, <code>else</code>, <code>fi</code>, <code>time</code>, <code>for</code>, <code>in</code>, <code>until</code>, <code>while</code>, <code>do</code>, <code>done</code>, <code>case</code>, <code>esac</code>, <code>coproc</code>, <code>select</code>, <code>function</code>, <code>{</code>, <code>}</code>, <code>[[</code>, <code>]]</code>, <code>!</code></p><p><code>in</code>is recognized as a reserved word if it is the third word of a case or select command. <code>in</code> and <code>do</code> are recognized as reserved words if they are the third word in a <code>for</code> command</p><h3 id="comments" tabindex="-1">Comments <a class="header-anchor" href="#comments" aria-label="Permalink to “Comments”">​</a></h3><p>Pound sign (<code>#</code>) is used for writing in-line comments</p><h3 id="pipelines" tabindex="-1">Pipelines <a class="header-anchor" href="#pipelines" aria-label="Permalink to “Pipelines”">​</a></h3><p>A <em>pipeline</em> is a sequence of one or more commands separated by the pipe character <code>|</code> or <code>|&amp;</code></p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">time </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;">-p</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]]</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> command1 </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> or </span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> command2 </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> ...</span></span></code></pre></div><ul><li><code>|</code> sends the output of the first command to the input of the second command</li><li><code>|&amp;</code> sends both the standard output and standard error of the first command to the second command, it is similar to <code>2&gt;&amp;1 |</code></li></ul><h3 id="list-of-commands" tabindex="-1">List of Commands <a class="header-anchor" href="#list-of-commands" aria-label="Permalink to “List of Commands”">​</a></h3><p>A <em>list</em> is a sequence of one or more pipelines separated by one of the operators <code>;</code>, <code>&amp;</code>, <code>&amp;&amp;</code>, or <code>||</code>, and optionally terminated by one of <code>;</code>, <code>&amp;</code>, or a newline</p><ul><li><code>&amp;&amp;</code> and <code>||</code> have equal precedence, followed by <code>;</code> and <code>&amp;</code>, which have equal precedence</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># command1 is executed, then command2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">command1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> command2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># command2 is executed in the background</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">command1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> command2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># if command1 returns an exit status of zero (success), then command2 is executed</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">command1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> &amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> command2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># if command1 returns an exit status other than zero (failure), then command2 is executed</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">command1</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ||</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> command2</span></span></code></pre></div><h3 id="looping-constructs" tabindex="-1">Looping Constructs <a class="header-anchor" href="#looping-constructs" aria-label="Permalink to “Looping Constructs”">​</a></h3><p>Use <code>for</code>, <code>while</code>, and <code>until</code> loops to iterate over a sequence of items</p><h4 id="until" tabindex="-1"><code>until</code> <a class="header-anchor" href="#until" aria-label="Permalink to “until”">​</a></h4><p>Execute consequent-commands as long as test-commands has an exit status which is not zero (failure)</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">until</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> text-commands</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> do</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  consequent-commands</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">done</span></span></code></pre></div><h4 id="while" tabindex="-1"><code>while</code> <a class="header-anchor" href="#while" aria-label="Permalink to “while”">​</a></h4><p>Execute consequent-commands as long as test-commands has an exit status of zero (success)</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">while</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> test-commands</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> do</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">  consequent-commands</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">done</span></span></code></pre></div><h4 id="for-loop" tabindex="-1">for Loop <a class="header-anchor" href="#for-loop" aria-label="Permalink to “for Loop”">​</a></h4><p>Execute a sequence of commands for each item in a list</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> VARIABLE_NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> ITEM_1</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> ITEM_2</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> ITEM_N</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">  command</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> n</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">done</span></span></code></pre></div><p>Example:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> COLOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> red</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> green</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> blue</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">  echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">COLOR: </span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">COLOR</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">done</span></span></code></pre></div><ul><li><p>The list is usually stored inside a variable. With white space separating each item.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">COLORS</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">red green blue</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> COLOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> $COLORS</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">COLOR: </span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">$COLOR</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">done</span></span></code></pre></div></li></ul><h3 id="conditional-constructs" tabindex="-1">Conditional Constructs <a class="header-anchor" href="#conditional-constructs" aria-label="Permalink to “Conditional Constructs”">​</a></h3><h3 id="if-else" tabindex="-1"><code>if-else</code> <a class="header-anchor" href="#if-else" aria-label="Permalink to “if-else”">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> condition-is-</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ];</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">  command</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">elif</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> condition-is-</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ];</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">  command</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">  command</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> n</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># double bracket [[</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># this construct is not POSIX compliant</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># and only available in Bash shell along with a few other shells</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [[</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> $MY_SHELL</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ]]</span></span></code></pre></div><p>Example:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">$MY_SHELL</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">  echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">You seem to like bash shell.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">elif</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">$MY_SHELL</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">ksh</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">  echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">You seem to like ksh Shell.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">  echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">You don&#39;t seem to like the bash shell.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">fi</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>Use variables under quotes to prevent unknown errors</p></div><h3 id="case" tabindex="-1"><code>case</code> <a class="header-anchor" href="#case" aria-label="Permalink to “case”">​</a></h3><p><code>if</code> vs <code>case</code>:</p><ul><li><code>if</code> is used when you have a single condition to evaluate</li><li><code>case</code> is used when you have multiple conditions to evaluate</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">case</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> word </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">in</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#666666;">    [</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> [(</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">]</span><span style="--shiki-light:#032F62;--shiki-dark:#C4704F;"> pattern</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">| pattern</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">]</span><span style="--shiki-light:#032F62;--shiki-dark:#C4704F;">…</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> command-list</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ;;</span><span style="--shiki-light:#032F62;--shiki-dark:#C4704F;">]#...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">esac</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">case</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> EXPRESSION </span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">in</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C4704F;">  PATTERN_1</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">    command</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    ;;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C4704F;">  PATTERN_2</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">    command</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    ;;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C4704F;">  PATTERN_N</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">    command</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> n</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    ;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  *)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">    default</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> command</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    ;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">esac</span></span></code></pre></div><ul><li><code>;;</code> is used to terminate a pattern</li><li><code>*)</code> is used to match any pattern</li><li><code>|</code> is used to separate multiple patterns</li><li><code>(</code> and <code>)</code> are used to group patterns</li><li>If the <code>;;</code> operator is used, no subsequent matches are attempted after the first pattern match</li><li>Using <code>;&amp;</code> will continue to the next pattern after the first match</li><li>Using <code>;;&amp;</code> will continue to the next pattern after the first match</li></ul><p><em>Example:</em></p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Enter the name of an animal: </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">read</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> ANIMAL</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">The </span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">$ANIMAL</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> has </span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">case</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> $ANIMAL</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> in</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C4704F;">  horse</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#C4704F;"> dog</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#C4704F;"> cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;"> echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">four</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C4704F;">  man</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#C4704F;"> kangaroo</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> )</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;"> echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">two</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  *)</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;"> echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">an unknown number of</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">esac</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> legs.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre></div><h3 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-label="Permalink to “Variables”">​</a></h3><p>Storage locations that have a name</p><ul><li>By convention variables are <strong>written in UPPER-CASE</strong></li></ul><h4 id="declaring-variables" tabindex="-1">Declaring Variables <a class="header-anchor" href="#declaring-variables" aria-label="Permalink to “Declaring Variables”">​</a></h4><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">VARIABLE_NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Value</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># examples</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">age</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">30</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">John</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">is_human</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">true</span></span></code></pre></div><ul><li><strong>Do not use spaces</strong> before or after <code>=</code> sign</li></ul><p>You can assign command output to a variable, by enclosing the command inside <code>$()</code> syntax (preferred) or backticks</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">USER_NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">who</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># examples</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">MY_HOME</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> $HOME</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">ALPHABET</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> {a..z}</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># or</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">MY_HOME</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">\`</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;"> $HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">\`</span></span></code></pre></div><h3 id="using-variables" tabindex="-1">Using Variables <a class="header-anchor" href="#using-variables" aria-label="Permalink to “Using Variables”">​</a></h3><p>There are two ways to use them:</p><ol><li><p>Prefix dollar (<code>$</code>) sign to the variable:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">MY_SHELL</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">BASH</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">I like the </span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">$MY_SHELL</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> shell.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre></div></li><li><p>Enclose the variable inside curly <code>{}</code> braces and prefix <code>$</code> sign. This is used whenever you need to concatenate the variable with some other text:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">I like </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">MY_SHELL</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">ing script</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre></div></li></ol><p>You can unset a variable using <code>unset</code> command</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">unset</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> MY_SHELL</span></span></code></pre></div><h4 id="local-variables" tabindex="-1">Local Variables <a class="header-anchor" href="#local-variables" aria-label="Permalink to “Local Variables”">​</a></h4><p>By default, variables are global</p><ul><li>Global variables are available throughout the script</li></ul><p>To make them local, use the <code>local</code> keyword</p><ul><li>The scope of local variables is limited to the function in which they are declared</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">GLOBAL_VAR</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">I am global</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> my_function</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">  local</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> MY_VAR</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">I am local</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">  echo</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> $MY_VAR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h2 id="test-command" tabindex="-1">Test Command <a class="header-anchor" href="#test-command" aria-label="Permalink to “Test Command”">​</a></h2><p>It checks for a condition, if the condition is met then it proceeds to execute the code enclosed within its block. Else it will skip that block and proceed with the next statements</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">text</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> expression</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># or more commonly used</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> expression </span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span></code></pre></div><p>To check the different test operators use <code>help test</code> or <code>man test</code></p><p><em>Example:</em></p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># test-file: Evaluate the status of a file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">~/.bashrc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">$FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ];</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> then</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">$FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ];</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">$FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> is a regular file.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  fi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">$FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ];</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">$FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> is a directory.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  fi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">$FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ];</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">$FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> is readable.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  fi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">$FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ];</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">$FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> is writable.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  fi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> -x</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">$FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ];</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">$FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> is executable/searchable.</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">  fi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">$FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> does not exist</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">    exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">exit</span></span></code></pre></div><p>Using <code>&quot;</code> (double quotes) is recommended to prevent errors</p><ul><li>If the variable is empty, then the test command will throw an error</li><li>Using the quotes around the parameter insures that the operator is always followed by a string, even if the string is empty</li></ul><h3 id="file-expressions" tabindex="-1">File Expressions <a class="header-anchor" href="#file-expressions" aria-label="Permalink to “File Expressions”">​</a></h3><table tabindex="0"><thead><tr><th>Expression</th><th>Is True If:</th></tr></thead><tbody><tr><td><code>-b FILE</code></td><td>File exists and is a block special (device) file</td></tr><tr><td><code>-c FILE</code></td><td>File exists and is a character special (device) file</td></tr><tr><td><code>-d FILE</code></td><td>File exists and is a directory</td></tr><tr><td><code>-e FILE</code></td><td>File exists</td></tr><tr><td><code>-f FILE</code></td><td>File exists and is a regular file</td></tr><tr><td><code>-g FILE</code></td><td>File exists and is set-group-ID</td></tr><tr><td><code>-G FILE</code></td><td>File exists and is owned by the effective group ID</td></tr><tr><td><code>-k FILE</code></td><td>File exists and has its &quot;sticky bit&quot; set</td></tr><tr><td><code>-L FILE</code></td><td>File exists and is a symbolic link</td></tr><tr><td><code>-O FILE</code></td><td>File exists and is owned by the effective user ID</td></tr><tr><td><code>-p FILE</code></td><td>File exists and is a named pipe (FIFO)</td></tr><tr><td><code>-r FILE</code></td><td>File exists and is readable (has readable permission for the effective user)</td></tr><tr><td><code>-s FILE</code></td><td>File exists and has length greater than zero</td></tr><tr><td><code>-S FILE</code></td><td>File exists and is a network socket</td></tr><tr><td><code>-t FD</code></td><td>File descriptor <code>FD</code> is open and associated with a terminal</td></tr><tr><td><code>-u FILE</code></td><td>File exists and its set-user-ID bit is set</td></tr><tr><td><code>-w FILE</code></td><td>File exists and is writable (has write permission for the effective user)</td></tr><tr><td><code>-x FILE</code></td><td>File exists and is executable (has execute permission for the effective user)</td></tr><tr><td><code>file1 -ef file2</code></td><td>Both files have the same inode numbers (the two filenames refer to the same file by hard linking)</td></tr><tr><td><code>file1 -nt file2</code></td><td><code>file1</code> is newer than <code>file2</code></td></tr><tr><td><code>file1 -ot file2</code></td><td><code>file1</code> is older than <code>file2</code></td></tr></tbody></table><h3 id="string-expressions" tabindex="-1">String Expressions <a class="header-anchor" href="#string-expressions" aria-label="Permalink to “String Expressions”">​</a></h3><table tabindex="0"><thead><tr><th>Expression</th><th>Is True If:</th></tr></thead><tbody><tr><td><code>STRING</code></td><td><code>STRING</code> is not null</td></tr><tr><td><code>-n STRING</code></td><td>The length of <code>STRING</code> is non-zero</td></tr><tr><td><code>-z STRING</code></td><td>The length of <code>STRING</code> is zero</td></tr><tr><td><code>STRING1=STRING2</code> or <code>STRING1==STRING2</code></td><td><code>STRING1</code> is equal to <code>STRING2</code> (<code>==</code> prefered)</td></tr><tr><td><code>STRING1!=STRING2</code></td><td><code>STRING1</code> is not equal to <code>STRING2</code></td></tr><tr><td><code>STRING1&lt;STRING2</code></td><td><code>STRING1</code> sorts after <code>STRING2</code></td></tr><tr><td><code>STRING1&gt;STRING2</code></td><td><code>STRING1</code> sorts before <code>STRING2</code></td></tr></tbody></table><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>The <code>&gt;</code> and <code>&lt;</code> operators must be quoted (or escaped with a backslash) to prevent the shell from interpreting them as redirection operators</p></div><h3 id="arithmetic-expressions" tabindex="-1">Arithmetic Expressions <a class="header-anchor" href="#arithmetic-expressions" aria-label="Permalink to “Arithmetic Expressions”">​</a></h3><table tabindex="0"><thead><tr><th>Expression</th><th>Is True If:</th></tr></thead><tbody><tr><td><code>ARG1 -eq ARG2</code></td><td><code>ARG1</code> is equal to <code>ARG2</code></td></tr><tr><td><code>ARG1 -ne ARG2</code></td><td><code>ARG1</code> is not equal to <code>ARG2</code></td></tr><tr><td><code>ARG1 -le ARG2</code></td><td><code>ARG1</code> is less than or equal to <code>ARG2</code></td></tr><tr><td><code>ARG1 -lt ARG2</code></td><td><code>ARG1</code> is less than <code>ARG2</code></td></tr><tr><td><code>ARG1 -ge ARG2</code></td><td><code>ARG1</code> is greater than or equal to <code>ARG2</code></td></tr><tr><td><code>ARG1 -gt ARG2</code></td><td><code>ARG1</code> is greater than <code>ARG2</code></td></tr></tbody></table><h3 id="new-test-command" tabindex="-1">New Test Command <a class="header-anchor" href="#new-test-command" aria-label="Permalink to “New Test Command”">​</a></h3><p><code>[[</code> is a new bash specific syntax that is more powerful and more flexible than the old test command <code>[</code></p><ul><li><code>[[</code> is a keyword, not a command</li><li><code>[[</code> does not require quoting of variables</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># if</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">$number</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> # is unset or empty,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> $number</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> -ne</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ]</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> # will emit an error message, but</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">[[</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> $number</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> -ne</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ]]</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> # will handle it sanely</span></span></code></pre></div><ul><li><p><code>[[</code> is more powerful than <code>[</code> because it supports additional operators like <code>&amp;&amp;</code>, <code>||</code>, <code>==</code>, <code>=~</code>, <code>&lt;=</code>, <code>&gt;=</code></p></li><li><p>The <code>==</code> and <code>!=</code> operators in <code>[[</code> perform pattern matching, while in <code>[</code> they perform string comparison</p><ul><li>This makes <code>[[</code> useful for evaluating file and path names.</li></ul></li></ul><p><em>Example:</em></p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">foo.bar</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [[</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> $FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#DBD7CAEE;"> foo.</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ]];</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">  echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;">$FILE</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> matches pattern &#39;foo.*&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># foo.bar matches pattern &#39;foo.*&#39;</span></span></code></pre></div><ul><li>The <code>=~</code> operator in <code>[[</code> performs regex matching</li></ul><h3 id="integer-test-command" tabindex="-1">Integer Test Command <a class="header-anchor" href="#integer-test-command" aria-label="Permalink to “Integer Test Command”">​</a></h3><p><code>((</code> is used for arithmetic truth tests</p><ul><li>An arithmetic truth test results in true if the result of the arithmetic evaluation is non-zero</li><li>The <code>((</code> and <code>))</code> operators are used to evaluate arithmetic expressions</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> EXPRESSION</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ))</span></span></code></pre></div><h3 id="logical-operators" tabindex="-1">Logical Operators <a class="header-anchor" href="#logical-operators" aria-label="Permalink to “Logical Operators”">​</a></h3><table tabindex="0"><thead><tr><th>Operator</th><th><code>test</code> Equivalent</th><th><code>[[</code> and <code>((</code> Equivalent</th></tr></thead><tbody><tr><td>AND</td><td><code>-a</code></td><td><code>&amp;&amp;</code></td></tr><tr><td>OR</td><td><code>-o</code></td><td><code>||</code></td></tr><tr><td>NOT</td><td><code>!</code></td><td><code>!</code></td></tr></tbody></table><h2 id="positional-parameters" tabindex="-1">Positional Parameters <a class="header-anchor" href="#positional-parameters" aria-label="Permalink to “Positional Parameters”">​</a></h2><p>From <code>$0</code>-<code>$9</code> are used as positional parameters.</p><ul><li><code>$0</code> : Name of the script being run.</li><li>Rest are parameters passed through command line.</li><li><code>$@</code> is the list of all arguments. It can be used to loop through the parameters.</li></ul><h2 id="exit-status" tabindex="-1">Exit Status <a class="header-anchor" href="#exit-status" aria-label="Permalink to “Exit Status”">​</a></h2><p>Every command returns an exit status. This is a number between <code>0</code> and <code>255</code></p><ul><li><code>0</code> means success (default exit status if not specified and no error)</li><li>Any other number means failure</li></ul><p>You can check the exit status of the last command using <code>$?</code></p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Hello World</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> $?</span></span></code></pre></div><p>Why is this useful?</p><ul><li>You can use this to check if a command was successful or not</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> $?</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> -eq</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">  echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Command was successful</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">  echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Command failed</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">fi</span></span></code></pre></div><h2 id="user-input-stdin" tabindex="-1">User Input (STDIN) <a class="header-anchor" href="#user-input-stdin" aria-label="Permalink to “User Input (STDIN)”">​</a></h2><p>The <code>read</code> command accepts STDIN.</p><p>Syntax:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">read</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">PROMPT</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> VARIABLE</span></span></code></pre></div><h2 id="output" tabindex="-1">Output <a class="header-anchor" href="#output" aria-label="Permalink to “Output”">​</a></h2><p>File descriptors:</p><ul><li><code>0</code> is <code>stdin</code> the <em>standard input</em></li><li><code>1</code> is <code>stdout</code> the <em>standard output</em></li><li><code>2</code> is <code>stderr</code> the <em>standard error</em></li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># redirect stdout to file.txt</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> test</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> file.txt</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> test</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> 1&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> file.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># redirect stderr to file.txt</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> test</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> 2&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> file.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"># redirect stderr and stdout to file.txt</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> test</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> 2&gt;&amp;1</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> file.txt</span></span></code></pre></div><ul><li><p><code>&gt;</code>: <em>redirection</em></p></li><li><p><code>&gt;&gt;</code>: append to target if exists</p></li><li><p><code>&gt;&amp;</code>: redirect a <em>stream</em> to another <em>file descriptor</em></p></li></ul><p>Thus, in <code>2&gt;&amp;1</code>:</p><ul><li><code>2&gt;</code> redirects <code>stderr</code> to an <em>(unspecified) file</em></li><li><code>&amp;1</code> redirects <code>stderr</code> to <code>stdout</code></li></ul><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to “References”">​</a></h2><p>Great for automating repetitive tasks</p><ul><li><a href="https://explainshell.com/" target="_blank" rel="noreferrer">Explain Shell Commands</a></li><li><a href="https://www.shellcheck.net/" target="_blank" rel="noreferrer">ShellCheck: Finds bugs in your shell scripts</a></li></ul>`,144)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
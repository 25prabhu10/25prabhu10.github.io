import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"AWS Monitoring Troubleshooting Audit","description":"AWS Monitoring Troubleshooting Audit","frontmatter":{"title":"AWS Monitoring Troubleshooting Audit","description":"AWS Monitoring Troubleshooting Audit","prev":"./AWS"},"headers":[],"relativePath":"Concepts/AWS/AWS_Monitoring_Troubleshooting_Audit.md","filePath":"Concepts/AWS/AWS_Monitoring_Troubleshooting_Audit.md","lastUpdated":1756574703000}`);var a={name:`Concepts/AWS/AWS_Monitoring_Troubleshooting_Audit.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="aws-monitoring-troubleshooting-audit" tabindex="-1">AWS Monitoring Troubleshooting Audit <a class="header-anchor" href="#aws-monitoring-troubleshooting-audit" aria-label="Permalink to “AWS Monitoring Troubleshooting Audit”">​</a></h1><p>Why Monitoring is Important</p><ul><li>We know how to deploy applications <ul><li>Safely</li><li>Automatically</li><li>Using Infrastructure as Code</li><li>Leveraging the best AWS components!</li></ul></li><li>Our applications are deployed, and our users don&#39;t care how we did it...</li><li>Our users only care that the application is working! <ul><li>Application latency: will it increase over time?</li><li>Application outages: customer experience should not be degraded</li><li>Users contacting the IT department or complaining is not a good outcome</li><li>Troubleshooting and remediation</li></ul></li><li>Internal monitoring: <ul><li>Can we prevent issues before they happen?</li><li>Performance and Cost</li><li>Trends (scaling patterns)</li><li>Learning and Improvement</li></ul></li></ul><h2 id="monitoring-in-aws" tabindex="-1">Monitoring in AWS <a class="header-anchor" href="#monitoring-in-aws" aria-label="Permalink to “Monitoring in AWS”">​</a></h2><ul><li>AWS CloudWatch: <ul><li>Metrics: Collect and track key metrics</li><li>Logs: Collect, monitor, analyze and store log files</li><li>Events: Send notifications when certain events happen in your AWS</li><li>Alarms: React in real-time to metrics / events</li></ul></li><li>AWS X-Ray: <ul><li>Troubleshooting application performance and errors</li><li>Distributed tracing of microservices</li></ul></li><li>AWS CloudTrail: <ul><li>Internal monitoring of API calls being made</li><li>Audit changes to AWS Resources by your users</li></ul></li></ul><h2 id="aws-cloudwatch-metrics" tabindex="-1">AWS CloudWatch Metrics <a class="header-anchor" href="#aws-cloudwatch-metrics" aria-label="Permalink to “AWS CloudWatch Metrics”">​</a></h2><ul><li>CloudWatch provides metrics for every services in AWS</li><li>Metric is a variable to monitor (CPUUtilization, NetworkIn...)</li><li>Metrics belong to namespaces</li><li>Dimension is an attribute of a metric (instance id, environment, etc...).</li><li>Up to 10 dimensions per metric</li><li>Metrics have timestamps</li><li>Can create CloudWatch dashboards of metrics</li></ul><h2 id="ec2-detailed-monitoring" tabindex="-1">EC2 Detailed monitoring <a class="header-anchor" href="#ec2-detailed-monitoring" aria-label="Permalink to “EC2 Detailed monitoring”">​</a></h2><ul><li>EC2 instance metrics have metrics &quot;every 5 minutes&quot;</li><li>With detailed monitoring (for a cost), you get data &quot;every 1 minute&quot;</li><li>Use detailed monitoring if you want to scale faster for your ASG!</li><li>The AWS Free Tier allows us to have 10 detailed monitoring metrics</li><li>Note: EC2 Memory usage is by default not pushed (must be pushed from inside the instance as a custom metric)</li></ul><h2 id="cloudwatch-custom-metrics" tabindex="-1">CloudWatch Custom Metrics <a class="header-anchor" href="#cloudwatch-custom-metrics" aria-label="Permalink to “CloudWatch Custom Metrics”">​</a></h2><ul><li>Possibility to define and send your own custom metrics to CloudWatch</li><li>Example: memory (RAM) usage, disk space, number of logged in users ...</li><li>Use API call PutMetricData</li><li>Ability to use dimensions (attributes) to segment metrics <ul><li>Instance.id</li><li>Environment.name</li></ul></li><li>Metric resolution (StorageResolution API parameter - two possible value): <ul><li>Standard: 1 minute (60 seconds)</li><li>High Resolution: 1/5/10/30 second(s) - Higher cost</li></ul></li><li>Important: Accepts metric data points two weeks in the past and two hours in the future (make sure to configure your EC2 instance time correctly)</li></ul><h2 id="aws-cloudwatch-logs" tabindex="-1">AWS CloudWatch Logs <a class="header-anchor" href="#aws-cloudwatch-logs" aria-label="Permalink to “AWS CloudWatch Logs”">​</a></h2><ul><li><p>Applications can send logs to CloudWatch using the SDK</p></li><li><p>CloudWatch can collect log from:</p><ul><li>Elastic Beanstalk: collection of logs from application</li><li>ECS: collection from containers</li><li>AWS Lambda: collection from function logs</li><li>VPC Flow Logs: VPC specific logs</li><li>API Gateway</li><li>CloudTrail based on filter</li><li>CloudWatch log agents: for example on EC2 machines</li><li>Route53: Log DNS queries</li></ul></li><li><p>CloudWatch Logs can go to:</p><ul><li>Batch exporter to S3 for archival</li><li>Stream to ElasticSearch cluster for further analytics</li></ul></li><li><p>CloudWatch Logs can use filter expressions</p></li><li><p>Logs storage architecture:</p><ul><li>Log groups: arbitrary name, usually representing an application</li><li>Log stream: instances within application / log files / containers</li></ul></li><li><p>Can define log expiration policies (never expire, 30 days, etc..)</p></li><li><p>Using the AWS CLI we can tail CloudWatch logs</p></li><li><p>To send logs to CloudWatch, make sure IAM permissions are correct!</p></li><li><p>Security: encryption of logs using KMS at the Group Level</p></li></ul><h2 id="cloudwatch-logs-for-ec2" tabindex="-1">CloudWatch Logs for EC2 <a class="header-anchor" href="#cloudwatch-logs-for-ec2" aria-label="Permalink to “CloudWatch Logs for EC2”">​</a></h2><ul><li>By default, no logs from your EC2 machine will go to CloudWatch</li><li>You need to run a CloudWatch agent on EC2 to push the log files you want</li><li>Make sure IAM permissions are correct</li><li>The CloudWatch log agent can be setup on-premises too</li></ul><h2 id="cloudwatch-logs-agent-unified-agent" tabindex="-1">CloudWatch Logs Agent &amp; Unified Agent <a class="header-anchor" href="#cloudwatch-logs-agent-unified-agent" aria-label="Permalink to “CloudWatch Logs Agent &amp; Unified Agent”">​</a></h2><ul><li>For virtual servers (EC2 instances, on-premise servers...)</li><li>CloudWatch Logs Agent <ul><li>Old version of the agent</li><li>Can only send to CloudWatch Logs</li></ul></li><li>CloudWatch Unified Agent <ul><li>Collect additional system-level metrics such as RAM, processes, etc...</li><li>Collect logs to send to CloudWatch Logs</li><li>Centralized configuration using SSM Parameter Store</li></ul></li></ul><h2 id="cloudwatch-unified-agent-metrics" tabindex="-1">CloudWatch Unified Agent - Metrics <a class="header-anchor" href="#cloudwatch-unified-agent-metrics" aria-label="Permalink to “CloudWatch Unified Agent - Metrics”">​</a></h2><ul><li>Collected directly on your Linux server / EC2 instance</li><li>CPU (active, guest, idle, system, user, steal)</li><li>Disk metrics (free, used, total), Disk IO (writes, reads, bytes, iops)</li><li>RAM (free, inactive, used, total, cached)</li><li>Netstat (number of TCP and UDP connections, net packets, bytes)</li><li>Processes (total, dead, bloqued, idle, running, sleep)</li><li>Swap Space (free, used, used %)</li><li>Reminder: out-of-the box metrics for EC2 - disk, CPU, network (high level)</li></ul><h2 id="cloudwatch-logs-metric-filter" tabindex="-1">CloudWatch Logs Metric Filter <a class="header-anchor" href="#cloudwatch-logs-metric-filter" aria-label="Permalink to “CloudWatch Logs Metric Filter”">​</a></h2><ul><li>CloudWatch Logs can use filter expressions <ul><li>For example, find a specific IP inside of a log</li><li>Or count occurrences of &quot;ERROR&quot; in your logs</li><li>Metric filters can be used to trigger alarms</li></ul></li><li>Filters do not retroactively filter data. Filters only publish the metric data points for events that happen after the filter was created.</li><li><code>CloudWatch Logs Aganet</code> (EC2 Instance) --stream--&gt; <code>CW Logs</code> --&gt; Metric Filters --&gt; CW Alaram --&gt; SNS</li></ul><h2 id="cloudwatch-alarms" tabindex="-1">CloudWatch Alarms <a class="header-anchor" href="#cloudwatch-alarms" aria-label="Permalink to “CloudWatch Alarms”">​</a></h2><ul><li>Alarms are used to trigger notifications for any metric</li><li>Various options (sampling, %, max, min, etc...)</li><li>Alarm States: <ul><li>OK</li><li>INSUFFICIENT_DATA</li><li>ALARM</li></ul></li><li>Period: <ul><li>Length of time in seconds to evaluate the metric</li><li>High resolution custom metrics: 10 sec, 30 sec or multiples of 60 sec</li></ul></li></ul><h2 id="cloudwatch-alarm-targets" tabindex="-1">CloudWatch Alarm Targets <a class="header-anchor" href="#cloudwatch-alarm-targets" aria-label="Permalink to “CloudWatch Alarm Targets”">​</a></h2><ul><li>Stop, Terminate, Reboot, or Recover an EC2 Instance</li><li>Trigger Auto Scaling Action</li><li>Send notification to SNS (from which you can do pretty much anything)</li></ul><h2 id="ec2-instance-recovery" tabindex="-1">EC2 Instance Recovery <a class="header-anchor" href="#ec2-instance-recovery" aria-label="Permalink to “EC2 Instance Recovery”">​</a></h2><ul><li>Status Check: <ul><li>Instance status = check the EC2 VM</li><li>System status = check the underlying hardware</li></ul></li><li>Recovery: Same Private, Public, Elastic IP, metadata, placement group</li></ul><h2 id="cloudwatch-alarm-good-to-know" tabindex="-1">CloudWatch Alarm: good to know <a class="header-anchor" href="#cloudwatch-alarm-good-to-know" aria-label="Permalink to “CloudWatch Alarm: good to know”">​</a></h2><ul><li><p>Alarms can be created based on CloudWatch Logs Metrics Filters</p></li><li><p>To test alarms and notifications, set the alarm state to Alarm using CLI:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">aws</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> cloudwatch</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> set-alarm-state</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --alarm-name</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">myalarm</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --state-value</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;"> ALARM</span><span style="--shiki-light:#005CC5;--shiki-dark:#C99076;"> --state-reason</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">testing purposes</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre></div></li></ul><h2 id="cloudwatch-events" tabindex="-1">CloudWatch Events <a class="header-anchor" href="#cloudwatch-events" aria-label="Permalink to “CloudWatch Events”">​</a></h2><ul><li>Event Pattern: Intercept events from AWS services (Sources) <ul><li>Example sources: EC2 Instance Start, CodeBuild Failure, S3, Trusted Advisor</li><li>Can intercept any API call with CloudTrail integration</li></ul></li><li>Schedule or Cron (example: create an event every 4 hours)</li><li>A JSON payload is created from the event and passed to a target... <ul><li>Compute: Lambda, Batch, ECS task</li><li>Integration: SQS, SNS, Kinesis Data Streams, Kinesis Data Firehose</li><li>Orchestration: Step Functions, CodePipeline, CodeBuild</li><li>Maintenance: SSM, EC2 Actions</li></ul></li></ul><h2 id="amazon-eventbridge" tabindex="-1">Amazon EventBridge <a class="header-anchor" href="#amazon-eventbridge" aria-label="Permalink to “Amazon EventBridge”">​</a></h2><ul><li>EventBridge is the next evolution of CloudWatch Events</li><li>Default event bus: generated by AWS services (CloudWatch Events)</li><li>Partner event bus: receive events from SaaS service or applications (Zendesk, DataDog, Segment, Auth0...)</li><li>Custom Event buses: for your own applications</li><li>Event buses can be accessed by other AWS accounts</li><li>Rules: how to process the events (similar to CloudWatch Events)</li></ul><h2 id="amazon-eventbridge-schema-registry" tabindex="-1">Amazon EventBridge Schema Registry <a class="header-anchor" href="#amazon-eventbridge-schema-registry" aria-label="Permalink to “Amazon EventBridge Schema Registry”">​</a></h2><ul><li>EventBridge can analyze the events in your bus and infer the schema</li><li>The Schema Registry allows you to generate code for your application, that will know in advance how data is structured in the event bus</li><li>Schema can be versioned</li></ul><h2 id="amazon-eventbridge-vs-cloudwatch-events" tabindex="-1">Amazon EventBridge vs CloudWatch Events <a class="header-anchor" href="#amazon-eventbridge-vs-cloudwatch-events" aria-label="Permalink to “Amazon EventBridge vs CloudWatch Events”">​</a></h2><ul><li>Amazon EventBridge builds upon and extends CloudWatch Events.</li><li>It uses the same service API and endpoint, and the same underlying service infrastructure.</li><li>EventBridge allows extension to add event buses for your custom applications and your third-party SaaS apps.</li><li>Event Bridge has the Schema Registry capability</li><li>EventBridge has a different name to mark the new capabilities</li><li>Over time, the CloudWatch Events name will be replaced with EventBridge.</li></ul><h2 id="aws-x-ray" tabindex="-1">AWS X-Ray <a class="header-anchor" href="#aws-x-ray" aria-label="Permalink to “AWS X-Ray”">​</a></h2><ul><li>Debugging in Production, the good old way: <ul><li>Test locally</li><li>Add log statements everywhere</li><li>Re-deploy in production</li></ul></li><li>Log formats differ across applications using CloudWatch and analytics is hard.</li><li>Debugging: monolith &quot;easy&quot;, distributed services &quot;hard&quot;</li><li>No common views of your entire architecture!</li><li>Enter... AWS X-Ray!</li></ul><h2 id="aws-x-ray-advantages" tabindex="-1">AWS X-Ray advantages <a class="header-anchor" href="#aws-x-ray-advantages" aria-label="Permalink to “AWS X-Ray advantages”">​</a></h2><ul><li>Troubleshooting performance (bottlenecks)</li><li>Understand dependencies in a microservice architecture</li><li>Pinpoint service issues</li><li>Review request behaviour</li><li>Find errors and exceptions</li><li>Are we meeting time SLA?</li><li>Where I am throttled?</li><li>Identify users that are impacted</li></ul><h2 id="x-ray-compatibility" tabindex="-1">X-Ray compatibility <a class="header-anchor" href="#x-ray-compatibility" aria-label="Permalink to “X-Ray compatibility”">​</a></h2><ul><li>AWS Lambda</li><li>Elastic Beanstalk</li><li>ECS</li><li>ELB</li><li>API Gateway</li><li>EC2 Instances or any application server (even on premise)</li></ul><h2 id="aws-x-ray-leverages-tracing" tabindex="-1">AWS X-Ray Leverages Tracing <a class="header-anchor" href="#aws-x-ray-leverages-tracing" aria-label="Permalink to “AWS X-Ray Leverages Tracing”">​</a></h2><ul><li>Tracing is an end to end way to following a &quot;request&quot;</li><li>Each component dealing with the request adds its own &quot;trace&quot;</li><li>Tracing is made of segments (+ sub segments)</li><li>Annotations can be added to traces to provide extra-information</li><li>Ability to trace: <ul><li>Every request</li><li>Sample request (as a % for example or a rate per minute)</li></ul></li><li>X-Ray Security: <ul><li>IAM for authorization</li><li>KMS for encryption at rest</li></ul></li></ul><h2 id="enable-aws-x-ray" tabindex="-1">Enable AWS X-Ray <a class="header-anchor" href="#enable-aws-x-ray" aria-label="Permalink to “Enable AWS X-Ray”">​</a></h2><ol><li><p>Your code (Java, Python, Go, Node.js, .NET) must import the AWS X-Ray SDK::</p><ul><li>Very little code modification needed</li><li>The application SDK will then capture: <ul><li>Calls to AWS services</li><li>HTTP / HTTPS requests</li><li>Database Calls (MySQL, PostgreSQL, DynamoDB)</li><li>Queue calls (SQS)</li></ul></li></ul></li><li><p>Install the X-Ray daemon or enable X-Ray AWS Integration</p><ul><li>X-Ray daemon works as a low level UDP packet interceptor (Linux / Windows / Mac...)</li><li>AWS Lambda / other AWS services already run the X-Ray daemon for you</li><li>Each application must have the IAM rights to write data to X-Ray</li></ul></li></ol><h2 id="the-x-ray-magic" tabindex="-1">The X-Ray magic <a class="header-anchor" href="#the-x-ray-magic" aria-label="Permalink to “The X-Ray magic”">​</a></h2><ul><li>X-Ray service collects data from all the different services</li><li>Service map is computed from all the segments and traces</li><li>X-Ray is graphical, so even non technical people can help troubleshoot</li></ul><h2 id="aws-x-ray-troubleshooting" tabindex="-1">AWS X-Ray Troubleshooting <a class="header-anchor" href="#aws-x-ray-troubleshooting" aria-label="Permalink to “AWS X-Ray Troubleshooting”">​</a></h2><ul><li>If X-Ray is not working on EC2 <ul><li>Ensure the EC2 IAM Role has the proper permissions</li><li>Ensure the EC2 instance is running the X-Ray Daemon</li></ul></li><li>To enable on AWS Lambda: <ul><li>Ensure it has an IAM execution role with proper policy (AWSX-RayWriteOnlyAccess)</li><li>Ensure that X-Ray is imported in the code</li></ul></li></ul><h2 id="x-ray-instrumentation-in-your-code" tabindex="-1">X-Ray Instrumentation in your code <a class="header-anchor" href="#x-ray-instrumentation-in-your-code" aria-label="Permalink to “X-Ray Instrumentation in your code”">​</a></h2><ul><li>Instrumentation means the measure of product&#39;s performance, diagnose errors, and to write trace information.</li><li>To instrument your application code, you use the X-Ray SDK</li><li>Many SDK require only configuration changes</li><li>You can modify your application code to customize and annotation the data that the SDK sends to X- Ray, using interceptors, filters, handlers, middleware...</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> express</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#BD976A;"> AWSXRay</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">aws-xray-sdk</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">AWSXRay</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">express</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">openSegment</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">MyApp</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#BD976A;"> res</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">  res</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">index</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">AWSXRay</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">express</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">closeSegment</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">());</span></span></code></pre></div><h2 id="x-ray-concepts" tabindex="-1">X-Ray Concepts <a class="header-anchor" href="#x-ray-concepts" aria-label="Permalink to “X-Ray Concepts”">​</a></h2><ul><li>Segments: each application / service will send them</li><li>Subsegments: if you need more details in your segment</li><li>Trace: segments collected together to form an end-to-end trace</li><li>Sampling: decrease the amount of requests sent to X-Ray, reduce cost</li><li>Annotations: Key Value pairs used to index traces and use with filters</li><li>Metadata: Key Value pairs, not indexed, not used for searching</li><li>The X-Ray daemon / agent has a config to send traces cross account: <ul><li>make sure the IAM permissions are correct - the agent will assume the role</li><li>This allows to have a central account for all your application tracing</li></ul></li></ul><h2 id="x-ray-sampling-rules" tabindex="-1">X-Ray Sampling Rules <a class="header-anchor" href="#x-ray-sampling-rules" aria-label="Permalink to “X-Ray Sampling Rules”">​</a></h2><ul><li>With sampling rules, you control the amount of data that you record</li><li>You can modify sampling rules without changing your code</li><li>By default, the X-Ray SDK records the first request each second, and five percent of any additional requests.</li><li>One request per second is the reservoir, which ensures that at least one trace is recorded each second as long the service is serving requests.</li><li>Five percent is the rate at which additional requests beyond the reservoir size are sampled.</li></ul><h2 id="x-ray-custom-sampling-rules" tabindex="-1">X-Ray Custom Sampling Rules <a class="header-anchor" href="#x-ray-custom-sampling-rules" aria-label="Permalink to “X-Ray Custom Sampling Rules”">​</a></h2><ul><li><p>You can create your own rules with the reservoir and rate</p></li><li><p><em>Example:</em> Higher minimum rate for POSTs</p><ul><li>Rule name: <code>POST minimum</code></li><li>Priority: <code>100</code></li><li>Reservoir: <code>10</code></li><li>Rate: <code>0.10</code></li><li>Service name: <code>*</code></li><li>Service type: <code>*</code></li><li>Host: <code>*</code></li><li>HTTP method: <code>POST</code></li><li>URL path: <code>*</code></li><li>Resource ARN: <code>*</code></li></ul></li></ul><h2 id="x-ray-write-apis-used-by-the-x-ray-daemon" tabindex="-1">X-Ray Write APIs (used by the X-Ray daemon) <a class="header-anchor" href="#x-ray-write-apis-used-by-the-x-ray-daemon" aria-label="Permalink to “X-Ray Write APIs (used by the X-Ray daemon)”">​</a></h2><ul><li>PutTraceSegments: Uploads segment documents to AWS X-Ray</li><li>PutTelemetryRecords: Used by the AWS X-Ray daemon to upload telemetry. <ul><li><code>SegmentsReceivedCount</code>, <code>SegmentsRejectedCounts</code>, <code>BackendConnectionErrors</code>...</li></ul></li><li>GetSamplingRules: Retrieve all sampling rules (to know what/when to send)</li><li>GetSamplingTargets &amp; GetSamplingStatisticSummaries: advanced</li><li>The X-Ray daemon needs to have an IAM policy authorizing the correct API calls to function correctly</li></ul><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Effect</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Allow</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Action</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">xray:PutTraceSegments</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">xray:PutTelemetryRecords</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">xray:GetSamplingRules</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">xray:GetSamplingTargets</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">xray:GetSamplingStatisticSummaries</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Resource</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><ul><li><strong><code>arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess</code></strong></li><li>GetServiceGraph: main graph</li><li>BatchGetTraces: Retrieves a list of traces specified by ID. Each trace is a collection of segment documents that originates from a single request.</li><li>GetTraceSummaries: Retrieves IDs and annotations for traces available for a specified time frame using an optional filter. To get the full traces, pass the trace IDs to BatchGetTraces.</li><li>GetTraceGraph: Retrieves a service graph for one or more specific trace IDs.</li></ul><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Effect</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Allow</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Action</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">xray:GetSamplingRules</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">xray:GetSamplingTargets</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">xray:GetSamplingStatisticSummaries</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">xray:BatchGetTraces</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">xray:GetServiceGraph</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">xray:GetTraceGraph</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">xray:GetTraceSummaries</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">xray:GetGroups</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">xray:GetGroup</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">xray:GetTimeSeriesServiceStatistics</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">Resource</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h2 id="x-ray-with-elastic-beanstalk" tabindex="-1">X-Ray with Elastic Beanstalk <a class="header-anchor" href="#x-ray-with-elastic-beanstalk" aria-label="Permalink to “X-Ray with Elastic Beanstalk”">​</a></h2><ul><li><p>AWS Elastic Beanstalk platforms include the X-Ray daemon</p></li><li><p>You can run the daemon by setting an option in the Elastic Beanstalk console or with a configuration file (in .ebextensions/xray-daemon.config)</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">options_settings</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">  aws:elasticbeanstalk:xray</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#B8A965;">    XRayEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4D9375;"> true</span></span></code></pre></div></li><li><p>Make sure to give your instance profile the correct IAM permissions so that the X-Ray daemon can function correctly</p></li><li><p>Then make sure your application code is instrumented with the X-Ray SDK</p></li><li><p>Note: The X-Ray daemon is not provided for Multicontainer Docker</p></li></ul><h2 id="ecs-x-ray-integration-options" tabindex="-1">ECS + X-Ray integration options <a class="header-anchor" href="#ecs-x-ray-integration-options" aria-label="Permalink to “ECS + X-Ray integration options”">​</a></h2><p>ECS Cluster:</p><ol><li><p>X-Ray Container as a Daemon: X-Ray Daemon will run on each EC2 Instance part of the ECS Cluster. So, all the containers running inside a EC2 Instance will be connected to this one X-Ray Daemin</p></li><li><p>X-Ray Container as a &quot;Side Car&quot;: X-Ray Daemon will run on each container and not on EC2 Instance basis</p></li><li><p>Fargate Cluster: We don&#39;t have control over the underlying architecture and it is similar to X-Ray Container as a &quot;Side Car&quot;</p></li></ol><p><em>Example:</em> ECS + X-Ray Task Definition</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">portMappings</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">hostPort</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">containerPort</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 2000</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">protocol</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">udp</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">environment</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">AWS_XRAY_DAEMON_ADDRESS</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">value</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">xray-daemon:2000</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">  ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A965;">links</span><span style="--shiki-light:#005CC5;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">xray-daemon</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><h2 id="aws-cloudtrail" tabindex="-1">AWS CloudTrail <a class="header-anchor" href="#aws-cloudtrail" aria-label="Permalink to “AWS CloudTrail”">​</a></h2><ul><li>Provides governance, compliance and audit for your AWS Account</li><li>CloudTrail is enabled by default!</li><li>Get an history of events / API calls made within your AWS Account by: <ul><li>Console</li><li>SDK</li><li>CLI</li><li>AWS Services</li></ul></li><li>Can put logs from CloudTrail into CloudWatch Logs or S3</li><li>A trail can be applied to All Regions (default) or a single Region.</li><li>If a resource is deleted in AWS, investigate CloudTrail first!</li></ul><h2 id="cloudtrail-events" tabindex="-1">CloudTrail Events <a class="header-anchor" href="#cloudtrail-events" aria-label="Permalink to “CloudTrail Events”">​</a></h2><ul><li>Management Events: <ul><li>Operations that are performed on resources in your AWS account</li><li>Examples: <ul><li>Configuring security (IAM AttachRolePolicy)</li><li>Configuring rules for routing data (Amazon EC2 CreateSubnet)</li><li>Setting up logging (AWS CloudTrail CreateTrail)</li></ul></li><li>By default, trails are configured to log management events.</li><li>Can separate Read Events (that don&#39;t modify resources) from Write Events (that may modify resources)</li></ul></li><li>Data Events: <ul><li>By default, data events are not logged (because high volume operations)</li><li>Amazon S3 object-level activity (ex: GetObject, DeleteObject, PutObject): can separate Read and Write Events</li><li>AWS Lambda function execution activity (the Invoke API)</li></ul></li><li>CloudTrail Insights Events</li></ul><h3 id="cloudtrail-insights" tabindex="-1">CloudTrail Insights <a class="header-anchor" href="#cloudtrail-insights" aria-label="Permalink to “CloudTrail Insights”">​</a></h3><ul><li>Enable CloudTrail Insights to detect unusual activity in your account: <ul><li>inaccurate resource provisioning</li><li>hitting service limits</li><li>Bursts of AWS IAM actions</li><li>Gaps in periodic maintenance activity</li></ul></li><li>CloudTrail Insights analyzes normal management events to create a baseline</li><li>And then continuously analyzes write events to detect unusual patterns <ul><li>Anomalies appear in the CloudTrail console</li><li>Event is sent to Amazon S3</li><li>An EventBridge event is generated (for automation needs)</li></ul></li></ul><h3 id="cloudtrail-events-retention" tabindex="-1">CloudTrail Events Retention <a class="header-anchor" href="#cloudtrail-events-retention" aria-label="Permalink to “CloudTrail Events Retention”">​</a></h3><ul><li>Events are stored for 90 days in CloudTrail</li><li>To keep events beyond this period, log them to S3 and use Athena</li><li>All Events --&gt; CloudTrail (more than 90 days retention) --log--&gt; S3 Bucket Long-term retention --analyze--&gt; Athena</li></ul><h3 id="cloudtrail-vs-cloudwatch-vs-x-ray" tabindex="-1">CloudTrail vs CloudWatch vs X-Ray <a class="header-anchor" href="#cloudtrail-vs-cloudwatch-vs-x-ray" aria-label="Permalink to “CloudTrail vs CloudWatch vs X-Ray”">​</a></h3><ul><li>CloudTrail: <ul><li>Audit API calls made by users / services / AWS console</li><li>Useful to detect unauthorized calls or root cause of changes</li></ul></li><li>CloudWatch: <ul><li>CloudWatch Metrics over time for monitoring</li><li>CloudWatch Logs for storing application log</li><li>CloudWatch Alarms to send notifications in case of unexpected metrics</li></ul></li><li>X-Ray: <ul><li>Automated Trace Analysis &amp; Central Service Map Visualization</li><li>Latency, Errors and Fault analysis</li><li>Request tracking across distributed systems</li></ul></li></ul>`,82)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
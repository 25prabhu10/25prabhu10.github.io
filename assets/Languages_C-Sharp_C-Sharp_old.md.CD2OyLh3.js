import{A as e,d as t,m as n}from"./chunks/runtime-core.esm-bundler.BXAIOQQS.js";import{t as r}from"./chunks/plugin-vue_export-helper.CtN8rQnz.js";const i=JSON.parse(`{"title":"Interfaces","description":"","frontmatter":{},"headers":[],"relativePath":"Languages/C-Sharp/C-Sharp_old.md","filePath":"Languages/C-Sharp/C-Sharp_old.md","lastUpdated":1756574703000}`);var a={name:`Languages/C-Sharp/C-Sharp_old.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#interfaces" aria-label="Permalink to “Interfaces”">​</a></h1><ul><li>An interface is like a class, except that it only describes members. The implementation for those members comes from types that implement the interface.</li></ul><h2 id="function-members" tabindex="-1">Function Members <a class="header-anchor" href="#function-members" aria-label="Permalink to “Function Members”">​</a></h2><ol><li><p>Properties:</p><ul><li>Properties are function members that encapsulate a piece of an object&#39;s state, such as a button&#39;s color or a label&#39;s text.</li></ul></li><li><p>Methods</p><ul><li>Are traditional functions.</li></ul></li><li><p>Events</p><ul><li>Events are function members that simplify acting on object state changes.</li></ul></li></ol><blockquote><p>Functions can be treated as values through the use of <strong>delegates</strong>, C# allows functions to be passed as values to and from other functions.</p></blockquote><ul><li><p>And when calling a method with multiple out parameters, you can discard ones you&#39;re uninterested in with the underscore character:</p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">SomeBigMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> _</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> out</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> _</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> out</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> _</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> out</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> out</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> _</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> out</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> _</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> out</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> _</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div></li></ul><h3 id="enumerations" tabindex="-1">Enumerations <a class="header-anchor" href="#enumerations" aria-label="Permalink to “Enumerations”">​</a></h3><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Directions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> East</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> West</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> North</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> South</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// method 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> direction</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Directions</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">North</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">$&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">Direction: </span><span style="--shiki-light:#032F62;--shiki-dark:#666666;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#C98A7D;"> direction</span><span style="--shiki-light:#032F62;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// method 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Enum</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">TryParse</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D;">West</span><span style="--shiki-light:#032F62;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> out</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Directions</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> parsedDirections</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">parsedDirections</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span></span></code></pre></div><ul><li>By default, the <strong>1st</strong> item has value &quot;<strong>0</strong>&quot;, and the <strong>next</strong> has <strong>1</strong> and so on...</li></ul><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to “Methods”">​</a></h3><ul><li>Access modifiers</li><li>Return type</li><li>Parameters <ul><li>Call-by-value: <code>static void PrintNumber(int[] numbers){...}</code><ul><li>The original value remains unaffected.</li></ul></li><li>Call-by-reference: <code>static void PrintNumber(params int[] numbers){...}</code><ul><li>The original value changes.</li></ul></li></ul></li></ul><hr><p>title: C# and Angular description: C# and Angular interview questions.</p><hr><h2 id="object-orientated-paradigm" tabindex="-1">Object Orientated Paradigm <a class="header-anchor" href="#object-orientated-paradigm" aria-label="Permalink to “Object Orientated Paradigm”">​</a></h2><h3 id="encapsulation" tabindex="-1">Encapsulation <a class="header-anchor" href="#encapsulation" aria-label="Permalink to “Encapsulation”">​</a></h3><ul><li>Encapsulation means creating a boundary around an object, to separate its external (public) behaviour from its internal (private) implementation details.</li></ul><h2 id="class" tabindex="-1">Class <a class="header-anchor" href="#class" aria-label="Permalink to “Class”">​</a></h2><ul><li><p><strong>Methods</strong> are what an <em>object</em> <strong>does</strong> (object&#39;s behaviour). <strong>Fields</strong> are what the <em>object</em> <strong>knows</strong>.</p><blockquote><p><em>Objects</em> are stored in computer&#39;s memory in <strong>heap</strong>.</p></blockquote></li><li><p>Class can be split up into different files by using <strong>partial</strong> keyword in the same <em>namespace</em>.</p><p>File1.cs</p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Pets</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    partial</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Purr</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">            // statements</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><p>File2.cs</p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Pets</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">    partial</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#5DA994;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> Meow</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">            // statements</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li></ul><h3 id="static" tabindex="-1">static <a class="header-anchor" href="#static" aria-label="Permalink to “static”">​</a></h3><ul><li><p>The <strong>static</strong> modifier makes an <strong>item non-instantiable</strong>.</p></li><li><p>If <strong>static</strong> is applied to a <strong>class</strong> then that class <strong>cannot be instantiated</strong> using the <em>new</em> keyword.</p></li><li><p>If <strong>static</strong> is applied to a <strong>var, method or property</strong> of class then they can be <strong>accessed without creating object</strong> of the class, just use <em>className.propertyName</em>, <em>className.methodName</em>.</p></li><li><p><strong>static class</strong> [^task] must have <strong>all</strong> of it&#39;s <strong>methods</strong> to be <strong>static</strong> too.</p><blockquote><p><em>static method</em> can only access other <em>static items</em>. and instance of a <em>non-static class</em> cannot use its <em>static members</em>.</p></blockquote></li></ul><h3 id="type-casting" tabindex="-1">Type Casting <a class="header-anchor" href="#type-casting" aria-label="Permalink to “Type Casting”">​</a></h3><ul><li><p>Changing an expression from one data type to another.</p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">decimal</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> myDecimal</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> myInt</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">myDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span></code></pre></div></li><li><p>When a big value is cast into smaller one, C# will automatically wrap the value around.</p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> myDecimal</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 365</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">byte</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> myInt</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">myDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// myInt will become 109 instead of 365, as byte can only hold upto 256</span></span></code></pre></div><blockquote><p>Note: To get wrapped value. Open calculator, switch to Scientific mode, and calculate 365 <em>Mod</em> 256</p></blockquote></li><li><p><strong>+</strong> (plus) operator when used between a <em>string</em> and any <em>other type</em>, it converts the <strong>other type</strong> to <strong>string</strong>.</p></li></ul><hr><h2 id="loops" tabindex="-1">Loops <a class="header-anchor" href="#loops" aria-label="Permalink to “Loops”">​</a></h2><h3 id="for" tabindex="-1">for <a class="header-anchor" href="#for" aria-label="Permalink to “for”">​</a></h3><ul><li><p>for loop is used when the number of <strong>iterations</strong> are <strong>known</strong>.</p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// initialization; condition; iteration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#80A665;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // statements</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li></ul><h3 id="while" tabindex="-1">While <a class="header-anchor" href="#while" aria-label="Permalink to “While”">​</a></h3><ul><li><p>while loop is used when the number of <strong>iterations</strong> are <strong>unknown</strong>.</p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// check the condition first</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // statements</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div></li></ul><h3 id="do-while" tabindex="-1">do-while <a class="header-anchor" href="#do-while" aria-label="Permalink to “do-while”">​</a></h3><ul><li><p>do-while executes statements <strong>at least once</strong> and afterwards it behaves like <em>while</em> loop.</p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// execute at least once</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // statements</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> while</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;"> // now check condition</span></span></code></pre></div></li></ul><hr><h2 id="conditional" tabindex="-1">Conditional <a class="header-anchor" href="#conditional" aria-label="Permalink to “Conditional”">​</a></h2><h3 id="if-else" tabindex="-1">if/else <a class="header-anchor" href="#if-else" aria-label="Permalink to “if/else”">​</a></h3><ul><li><p>It is used to execute certain statements only when the <strong>conditions</strong> that are set up <strong>true</strong>.</p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light vitesse-dark" style="--shiki-light:#24292e;--shiki-dark:#dbd7caee;--shiki-light-bg:#fff;--shiki-dark-bg:#121212;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">// if someValue is 24 then execute statement-1 else execute statement-2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#BD976A;">someValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#4C9A91;"> 24</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // statement-1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#4D9375;"> else</span><span style="--shiki-light:#24292E;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#758575DD;">    // statement-2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#666666;">}</span></span></code></pre></div><blockquote><p>Note: When <strong>conditional operators</strong> (&lt;, ==,...) are used to test two <em>variables</em> or <em>values</em>, it&#39;s called performing a <strong>conditional test</strong>.</p></blockquote></li></ul><p>[^task]: <em>Learn about static constructor</em></p>`,36)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};